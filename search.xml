<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>机器学习算法：决策树</title>
      <link href="/2017/11/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%EF%BC%9A%E5%86%B3%E7%AD%96%E6%A0%91.html/"/>
      <url>/2017/11/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%EF%BC%9A%E5%86%B3%E7%AD%96%E6%A0%91.html/</url>
      <content type="html"><![CDATA[<p>机器学习中，决策树是一个预测模型。<br><a id="more"></a></p><blockquote><p>本文决策树算法使用 <a href="https://zh.wikipedia.org/wiki/ID3%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">ID3 算法</a>。</p></blockquote><h1 id="决策树简介"><a href="#决策树简介" class="headerlink" title="决策树简介"></a>决策树简介</h1><p>决策树代表的是对象属性与对象值之间的一种映射关系。树中每个节点表示某个对象，每个分叉路径代表某个可能的属性值，而每个叶节点则对应从根节点到该叶节点所经历的路径所表示的对象的值。<br>决策树的一个重要任务是为了数据中所蕴含的知识信息，因此决策树可以使用不熟悉的数据集合，并从中提取出一系列规则。</p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><ul><li>优点：计算复杂度不高，输出结果易于理解，对中间值的缺失不敏感，可以处理不相关特征数据。</li><li>缺点：可能会产生过度匹配问题。</li><li>适用数据类型：数值型和标称型。</li></ul><h2 id="决策树的一般流程"><a href="#决策树的一般流程" class="headerlink" title="决策树的一般流程"></a>决策树的一般流程</h2><ol><li>收集数据：可以使用任何方法。</li><li>准备数据：树构造算法只适用于标称型数据，因此数值型数据必须离散化。</li><li>分析数据：可以使用任何方法，构造树完成之后，我们应该检查图形是否符合预期。</li><li>训练算法：构造树的数据结构。</li><li>测试算法：使用经验树计算错误率。</li><li>使用算法：此步骤可以适用于任何监督学习算法，而使用决策树可以更好地理解数据的内在含义。</li></ol><h1 id="信息增益"><a href="#信息增益" class="headerlink" title="信息增益"></a>信息增益</h1><p>在决策树之前，需要知道什么是信息增益。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在划分数据集之前之后信息发生的变化称为信息增益。其度量方式称为香农熵或者简称为熵。</p><h2 id="计算熵"><a href="#计算熵" class="headerlink" title="计算熵"></a>计算熵</h2><p>熵定义为信息的期望值。</p><ol><li>如果待分类的事务可能划分在多个分类之中，则符号 xi 的信息定义为：<br><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><br>$$l(x_{i})=-log_{2}p(x_{i})$$ 其中 $$p(x_{i})$$ 是选择该分类的概率。</li><li>计算所有类别所有可能包含的信息的期望值：<br>$$H=-\sum_{i=1}^np(x_{i})log_{2}p(x_{i})$$<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_shannon_ent</span><span class="params">(data_set)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    计算给定数据集的香农熵</span></span><br><span class="line"><span class="string">    :param data_set: 给定数据集</span></span><br><span class="line"><span class="string">    :return shannon_ent: 香农熵</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 数据集中实例的总数</span></span><br><span class="line">    num_entries = len(data_set)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 为所有可能分类创建字典</span></span><br><span class="line">    label_counts = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> feat_vec <span class="keyword">in</span> data_set:</span><br><span class="line">        current_label = feat_vec[<span class="number">-1</span>]</span><br><span class="line">        label_counts[current_label] = label_counts.get(current_label, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 求香农熵</span></span><br><span class="line">    shannon_ent = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> label_counts:</span><br><span class="line">        prob = label_counts[key] / num_entries</span><br><span class="line">        shannon_ent -= prob * log(prob, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> shannon_ent</span><br></pre></td></tr></table></figure></li></ol><h1 id="实现决策树算法"><a href="#实现决策树算法" class="headerlink" title="实现决策树算法"></a>实现决策树算法</h1><h2 id="划分数据集"><a href="#划分数据集" class="headerlink" title="划分数据集"></a>划分数据集</h2><p>决策树算法除了需要测量信息熵，还需要划分数据集，度量划分数据集的熵，以便判断当前是否正确地划分了数据集。我们将对每个特征划分数据集的结果计算一次信息熵，然后判断按照哪个特征划分数据集是最好的划分方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_data_set</span><span class="params">(data_set, axis, value)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    按照给定特征划分数据集</span></span><br><span class="line"><span class="string">    :param data_set: 带划分的数据集</span></span><br><span class="line"><span class="string">    :param axis: 划分数据集的特征</span></span><br><span class="line"><span class="string">    :param value: 需要返回的特征的值</span></span><br><span class="line"><span class="string">    :return: 符合特征的数据</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 建立新的 list 对象</span></span><br><span class="line">    ret_data_set = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将符合特征的数据抽取出来</span></span><br><span class="line">    <span class="keyword">for</span> feat_vec <span class="keyword">in</span> data_set:</span><br><span class="line">        <span class="keyword">if</span> feat_vec[axis] == value:</span><br><span class="line">            reduced_feat_vec = feat_vec[: axis]</span><br><span class="line">            reduced_feat_vec.extend(feat_vec[axis + <span class="number">1</span>:])</span><br><span class="line">            ret_data_set.append(reduced_feat_vec)</span><br><span class="line">    <span class="keyword">return</span> ret_data_set</span><br></pre></td></tr></table></figure><h2 id="选择最好的数据集划分方式"><a href="#选择最好的数据集划分方式" class="headerlink" title="选择最好的数据集划分方式"></a>选择最好的数据集划分方式</h2><p>接下来遍历整个数据集，循环计算香农熵和 splitDataSet() 函数，找到最好的特征划分方式。熵计算将会告诉我们如何划分数据集是最好的数据组织方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choose_best_feature_to_split</span><span class="params">(data_set)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    选择最好的数据集划分方式</span></span><br><span class="line"><span class="string">    :param data_set: 带划分的数据集</span></span><br><span class="line"><span class="string">    :return best_feature: 最好用于划分数据集的特征</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    num_features = len(data_set[<span class="number">0</span>]) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 原始香农熵</span></span><br><span class="line">    base_entropy = calc_shannon_ent(data_set)</span><br><span class="line">    best_info_gain = <span class="number">0</span></span><br><span class="line">    best_feature = <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历数据集中所有特征</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_features):</span><br><span class="line">        <span class="comment"># 将数据集中所有第 i 个特征值或可能存在的值写入新 list 中</span></span><br><span class="line">        <span class="comment"># 创建唯一分类标签列表</span></span><br><span class="line">        feat_list = [example[i] <span class="keyword">for</span> example <span class="keyword">in</span> data_set]</span><br><span class="line">        unique_vals = set(feat_list)</span><br><span class="line">        new_entropy = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对每个唯一属性值划分一次数据集</span></span><br><span class="line">        <span class="comment"># 计算每种划分方式的信息熵</span></span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> unique_vals:</span><br><span class="line">            sub_data_set = split_data_set(data_set, i, value)</span><br><span class="line">            prob = len(sub_data_set) / len(data_set)</span><br><span class="line">            new_entropy += prob * calc_shannon_ent(sub_data_set)</span><br><span class="line">        info_gain = base_entropy - new_entropy</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算最好的信息增益</span></span><br><span class="line">        <span class="keyword">if</span> info_gain &gt; best_info_gain:</span><br><span class="line">            best_info_gain = info_gain</span><br><span class="line">            best_feature = i</span><br><span class="line">    <span class="keyword">return</span> best_feature</span><br></pre></td></tr></table></figure><h2 id="构建决策树"><a href="#构建决策树" class="headerlink" title="构建决策树"></a>构建决策树</h2><p>使用递归来构建决策树，每次递归都找出一个最好的数据集划分方式作为一个节点，再向下划分数据集。当程序遍历完所有划分数据集的属性，或者每个分支下的所有实例都具有相同的分类，递归结束。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">majority_cnt</span><span class="params">(class_list)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    找出出现最多次数的类别</span></span><br><span class="line"><span class="string">    :param class_list:</span></span><br><span class="line"><span class="string">    :return sorted_class_count[0][0]: 出现最多次数的类别</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    class_count = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> vote <span class="keyword">in</span> class_list:</span><br><span class="line">        class_count[vote] = class_count.get(vote, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    sorted_class_count = sorted(class_count.items(), key=operator.itemgetter(<span class="number">1</span>), reverse=<span class="keyword">True</span>)</span><br><span class="line">    <span class="keyword">return</span> sorted_class_count[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_tree</span><span class="params">(data_set, labels)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    创建树</span></span><br><span class="line"><span class="string">    :param data_set: 数据集</span></span><br><span class="line"><span class="string">    :param labels: 标签列表</span></span><br><span class="line"><span class="string">    :return my_tree: 决策树</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 包含数据集的所有类标签</span></span><br><span class="line">    class_list = [example[<span class="number">-1</span>] <span class="keyword">for</span> example <span class="keyword">in</span> data_set]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类别完全相同则停止继续划分</span></span><br><span class="line">    <span class="keyword">if</span> class_list.count(class_list[<span class="number">0</span>]) == len(class_list):</span><br><span class="line">        <span class="keyword">return</span> class_list[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历完所有特征时返回出现次数最多的类别</span></span><br><span class="line">    <span class="keyword">if</span> len(data_set[<span class="number">0</span>]) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> majority_cnt(class_list)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当前数据集中的最好特征</span></span><br><span class="line">    best_feat = choose_best_feature_to_split(data_set)</span><br><span class="line"></span><br><span class="line">    best_feat_label = labels[best_feat]</span><br><span class="line">    my_tree = &#123;best_feat_label: &#123;&#125;&#125;</span><br><span class="line">    <span class="keyword">del</span>(labels[best_feat])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 得到列表包含的所有属性值</span></span><br><span class="line">    feat_values = [example[best_feat] <span class="keyword">for</span> example <span class="keyword">in</span> data_set]</span><br><span class="line">    unique_vals = set(feat_values)</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> unique_vals:</span><br><span class="line">        sub_labels = labels[:]</span><br><span class="line">        my_tree[best_feat_label][value] = \</span><br><span class="line">            create_tree(split_data_set(data_set, best_feat, value), sub_labels)</span><br><span class="line">    <span class="keyword">return</span> my_tree</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="http://www.ituring.com.cn/book/1021" target="_blank" rel="noopener">机器学习实战</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%86%B3%E7%AD%96%E6%A0%91" target="_blank" rel="noopener">决策树|维基百科</a></li></ol>]]></content>
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>机器学习算法：k-近邻算法</title>
      <link href="/2017/10/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%EF%BC%9Ak-%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95.html/"/>
      <url>/2017/10/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%EF%BC%9Ak-%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95.html/</url>
      <content type="html"><![CDATA[<p>k-近邻算法采用测量不同特征值之间的距离方法进行分类。</p><a id="more"></a><h1 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h1><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>存在一个样本数据集合，也称作训练样本集，并且样本集中每个数据都存在标签，即知道样本集中每一数据与所属分类的对应关系。输入没有标签的新数据后，将新数据的每个特征与样本集中数据对应的特征进行比较，然后算法提取样本集中特征最相似数据（最近邻）的分类标签。一般来说，只选择样本数据集中前 k 个最相似的数据，通常k是不大于20的整数。最后，选择 k 个最相似数据中出现次数最多的分类，作为新数据的分类。</p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><ul><li>优点：精度高、对异常值不敏感、无数据输入假定。</li><li>缺点：计算复杂度高、空间复杂度高。</li><li>适用数据范围：数值型和标称型。</li></ul><h2 id="一般流程"><a href="#一般流程" class="headerlink" title="一般流程"></a>一般流程</h2><ol><li>收集数据：可以使用任何方法。</li><li>准备数据：距离计算所需要的数值，最好是结构化的数据格式。</li><li>分析数据：可以使用任何方法。</li><li>训练算法：此步骤不适用于k-近邻算法。</li><li>测试算法：计算错误率。</li><li>使用算法：首先需要输入样本数据和结构化的输出结果，然后运行k-近邻算法判定输入数据分别属于哪个分类，最后应用对计算出的分类执行后续的处理。</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="kNN-分类算法"><a href="#kNN-分类算法" class="headerlink" title="kNN 分类算法"></a>kNN 分类算法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify0</span><span class="params">(in_x, data_set, labels, k)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    k-邻近算法</span></span><br><span class="line"><span class="string">    :param in_x: 用于分类的输入量</span></span><br><span class="line"><span class="string">    :param data_set: 训练样本集</span></span><br><span class="line"><span class="string">    :param labels: 训练样本集的标签向量</span></span><br><span class="line"><span class="string">    :param k: 用于选择最近邻居的数目</span></span><br><span class="line"><span class="string">    :return: 分类结果</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># data_set 维度</span></span><br><span class="line">    data_set_size = data_set.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用欧拉公式计算距离</span></span><br><span class="line">    diff_mat = np.tile(in_x, (data_set_size, <span class="number">1</span>)) - data_set</span><br><span class="line">    sq_diff_mat = diff_mat ** <span class="number">2</span></span><br><span class="line">    sq_distances = sq_diff_mat.sum(axis=<span class="number">1</span>)</span><br><span class="line">    distance = sq_distances ** <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回距离由小到大的索引</span></span><br><span class="line">    sorted_dist_indices = distance.argsort()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 由大到小排序</span></span><br><span class="line">    class_count = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        vote_i_label = labels[sorted_dist_indices[i]]</span><br><span class="line">        class_count[vote_i_label] = class_count.get(vote_i_label, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    sorted_class_count = sorted(class_count.items(), key=operator.itemgetter(<span class="number">1</span>), reverse=<span class="keyword">True</span>)</span><br><span class="line">    <span class="keyword">return</span> sorted_class_count[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h3 id="归一化数值"><a href="#归一化数值" class="headerlink" title="归一化数值"></a>归一化数值</h3><p>有时给的数据中数值范围太大会严重影响到计算结果，所有通常讲这些数值归一化。下面将任意取值范围的特征值转化为0到1区间内的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auto_norm</span><span class="params">(data_set)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    归一化特征值</span></span><br><span class="line"><span class="string">    :param data_set: 训练样本</span></span><br><span class="line"><span class="string">    :return norm_data_set: 归一化后特征值</span></span><br><span class="line"><span class="string">    :return ranges: 原特征值每列最大值与最小值之差</span></span><br><span class="line"><span class="string">    :return min_values: 原特征值每列最小值</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 得到 data_set 每一列的最大最小值</span></span><br><span class="line">    min_values = data_set.min(<span class="number">0</span>)</span><br><span class="line">    max_values = data_set.max(<span class="number">0</span>)</span><br><span class="line">    ranges = max_values - min_values</span><br><span class="line">    norm_data_set = np.zeros(np.shape(data_set))</span><br><span class="line">    m = data_set.shape[<span class="number">0</span>]</span><br><span class="line">    norm_data_set = data_set - np.tile(min_values, (m, <span class="number">1</span>))</span><br><span class="line">    norm_data_set /= np.tile(ranges, (m, <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> norm_data_set, ranges, min_values</span><br></pre></td></tr></table></figure><h1 id="案例一：改进约会网站的配对效果"><a href="#案例一：改进约会网站的配对效果" class="headerlink" title="案例一：改进约会网站的配对效果"></a>案例一：改进约会网站的配对效果</h1><blockquote><p>样本矩阵第一列：每年获取的飞行常客里程数；<br>第二列：玩视频游戏所消耗时间百分比；<br>第三列：每周消耗的冰淇淋公升数；<br>标签向量1：不喜欢的人；2：魅力一般的人；3：极具魅力的人</p></blockquote><h2 id="从文本文件中解析数据"><a href="#从文本文件中解析数据" class="headerlink" title="从文本文件中解析数据"></a>从文本文件中解析数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file2matrix</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    将文本记录转换为 NumPy 的解析程序</span></span><br><span class="line"><span class="string">    :param filename: 文件名</span></span><br><span class="line"><span class="string">    :return return_mat: 训练样本矩阵</span></span><br><span class="line"><span class="string">    :return class_libel_vector: 标签向量。1：不喜欢的人；2：魅力一般的人；3：极具魅力的人</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 得到文件行数</span></span><br><span class="line">    fr = open(filename)</span><br><span class="line">    array0_lines = fr.readlines()</span><br><span class="line">    number_of_lines = len(array0_lines)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建返回的 NumPy 矩阵</span></span><br><span class="line">    return_mat = np.zeros((number_of_lines, <span class="number">3</span>))</span><br><span class="line">    class_libel_vector = []</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析文件数据到列表</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> array0_lines:</span><br><span class="line">        line = line.strip()</span><br><span class="line">        list_from_line = line.split(<span class="string">'\t'</span>)</span><br><span class="line">        return_mat[index, :] = list_from_line[<span class="number">0</span>: <span class="number">3</span>]</span><br><span class="line">        class_libel_vector.append(int(list_from_line[<span class="number">-1</span>]))</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> return_mat, class_libel_vector</span><br></pre></td></tr></table></figure><h2 id="使用-Matplotlib-创建分类结果的散点图"><a href="#使用-Matplotlib-创建分类结果的散点图" class="headerlink" title="使用 Matplotlib 创建分类结果的散点图"></a>使用 Matplotlib 创建分类结果的散点图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scatter_plot</span><span class="params">(data_x, data_y, date_libel)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    使用 Matplotlib 创建散点图</span></span><br><span class="line"><span class="string">    :param data_x: 某指标的训练样本</span></span><br><span class="line"><span class="string">    :param data_y: 某指标的训练样本</span></span><br><span class="line"><span class="string">    :param date_libel: 标签属性向量</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    fig = plt.figure()</span><br><span class="line">    ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">    ax.scatter(data_x, data_y, s=<span class="number">15.0</span> * np.array(date_libel),</span><br><span class="line">               c=<span class="number">15.0</span> * np.array(date_libel))</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h2 id="测试分类器"><a href="#测试分类器" class="headerlink" title="测试分类器"></a>测试分类器</h2><p>进行测试时，值得注意的是，应从样本数据中随机选取部分数据作为测试数据。这里使用样本数据的 10% 作为测试数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dating_class_test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    测试约会分类器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 测试用数据在 10%</span></span><br><span class="line">    ho_ratio = <span class="number">0.1</span></span><br><span class="line">    dating_data_mat, dating_labels = file2matrix(<span class="string">'datingTestSet2.txt'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 归一化特征值</span></span><br><span class="line">    norm_mat, ranges, min_values = kn.auto_norm(dating_data_mat)</span><br><span class="line"></span><br><span class="line">    m = norm_mat.shape[<span class="number">0</span>]</span><br><span class="line">    num_test_values = int(ho_ratio * m)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试用数据中错误次数</span></span><br><span class="line">    error_count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_test_values):</span><br><span class="line">        classifier_result = kn.classify0(norm_mat[i, :], norm_mat[num_test_values:m, :],</span><br><span class="line">                                         dating_labels[num_test_values:m], <span class="number">3</span>)</span><br><span class="line">        print(<span class="string">"the classifier came back whit: %d, the real answer is: %d"</span></span><br><span class="line">              % (classifier_result, dating_labels[i]))</span><br><span class="line">        <span class="keyword">if</span> classifier_result != dating_labels[i]:</span><br><span class="line">            error_count += <span class="number">1</span></span><br><span class="line">    print(<span class="string">"the total error rate is: %f"</span> % (error_count / num_test_values))</span><br></pre></td></tr></table></figure><h2 id="约会网站分类器预测"><a href="#约会网站分类器预测" class="headerlink" title="约会网站分类器预测"></a>约会网站分类器预测</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">classifier_person</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    约会网站预测函数</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    result_list = [<span class="string">'not at all'</span>, <span class="string">'in small doses'</span>, <span class="string">'in large doses'</span>]</span><br><span class="line">    percent_tats = float(input(</span><br><span class="line">        <span class="string">"percentage of time spent playing video dames?"</span></span><br><span class="line">    ))</span><br><span class="line">    ff_miles = float(input(<span class="string">"frequent flier mils earned per year?"</span>))</span><br><span class="line">    ice_cream = float(input(<span class="string">"liters of ice cream consumed per year"</span>))</span><br><span class="line">    dating_data_mat, dating_labels = file2matrix(<span class="string">'datingTestSet2.txt'</span>)</span><br><span class="line">    norm_mat, ranges, min_values = kn.auto_norm(dating_data_mat)</span><br><span class="line">    in_arr = np.array([ff_miles, percent_tats, ice_cream])</span><br><span class="line">    classifier_result = kn.classify0((in_arr - min_values) / ranges,</span><br><span class="line">                                     norm_mat, dating_labels, <span class="number">3</span>)</span><br><span class="line">    print(<span class="string">"You will probably like this person: "</span> + result_list[classifier_result - <span class="number">1</span>])</span><br></pre></td></tr></table></figure><h1 id="案例二：手写识别系统"><a href="#案例二：手写识别系统" class="headerlink" title="案例二：手写识别系统"></a>案例二：手写识别系统</h1><h2 id="将图像转换为测试向量"><a href="#将图像转换为测试向量" class="headerlink" title="将图像转换为测试向量"></a>将图像转换为测试向量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">img2vector</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    将图像转换为向量</span></span><br><span class="line"><span class="string">    :param filename: 包含图像的文件名</span></span><br><span class="line"><span class="string">    :return return_vector: 1*1024 向量</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    return_vector = np.zeros((<span class="number">1</span>, <span class="number">1024</span>))</span><br><span class="line">    fr = open(filename)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        line_str = fr.readline()</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">            return_vector[<span class="number">0</span>, <span class="number">32</span>*i+j] = int(line_str[j])</span><br><span class="line">    <span class="keyword">return</span> return_vector</span><br></pre></td></tr></table></figure><h2 id="手写识别测试"><a href="#手写识别测试" class="headerlink" title="手写识别测试"></a>手写识别测试</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hand_writing_class_test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    手写数字识别系统测试</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    hw_labels = []</span><br><span class="line">    training_file_list = os.listdir(<span class="string">'./digits/trainingDigits'</span>)</span><br><span class="line">    m = len(training_file_list)</span><br><span class="line">    training_mat = np.zeros((m, <span class="number">1024</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">        file_name_str = training_file_list[i]</span><br><span class="line">        file_str = file_name_str.split(<span class="string">'.'</span>)[<span class="number">0</span>]</span><br><span class="line">        class_num_str = int(file_str.split(<span class="string">'_'</span>)[<span class="number">0</span>])</span><br><span class="line">        hw_labels.append(class_num_str)</span><br><span class="line">        training_mat[i, :] = img2vector(<span class="string">'./digits/trainingDigits/%s'</span> % file_name_str)</span><br><span class="line">    test_file_list = os.listdir(<span class="string">'./digits/testDigits'</span>)</span><br><span class="line">    error_count = <span class="number">0</span></span><br><span class="line">    m_test = len(test_file_list)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m_test):</span><br><span class="line">        file_name_str = test_file_list[i]</span><br><span class="line">        file_str = file_name_str.split(<span class="string">'.'</span>)[<span class="number">0</span>]</span><br><span class="line">        class_num_str = int(file_str.split(<span class="string">'_'</span>)[<span class="number">0</span>])</span><br><span class="line">        vector_under_test = img2vector(<span class="string">'./digits/testDigits/%s'</span> % file_name_str)</span><br><span class="line">        classifier_result = kn.classify0(vector_under_test, training_mat, hw_labels, <span class="number">3</span>)</span><br><span class="line">        print(<span class="string">"the classifier came back whit: %d, the real answer is: %d"</span></span><br><span class="line">              % (classifier_result, class_num_str))</span><br><span class="line">        <span class="keyword">if</span> classifier_result != class_num_str:</span><br><span class="line">            error_count += <span class="number">1</span></span><br><span class="line">    print(<span class="string">"the total number of errors is: %d"</span> % error_count)</span><br><span class="line">    print(<span class="string">"the total error rate is: %f"</span> % (error_count / m_test))</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.ituring.com.cn/book/1021" target="_blank" rel="noopener">机器学习实战</a></p><h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h1><p><a href="https://github.com/tyrotalk/ML-learning/tree/master/k_nearest_neighbors" target="_blank" rel="noopener">Github</a></p>]]></content>
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 数据结构：优先队列</title>
      <link href="/2017/08/26/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97.html/"/>
      <url>/2017/08/26/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97.html/</url>
      <content type="html"><![CDATA[<p>优先队列是一种特殊的队列类型，其中具有最高优先级的项会最先弹出，相同优先级的项按照 FIFO 的顺序弹出。</p><a id="more"></a><h1 id="优先队列的主要方法"><a href="#优先队列的主要方法" class="headerlink" title="优先队列的主要方法"></a>优先队列的主要方法</h1><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>__len__(s)</td><td>返回优先队列中项的数目</td></tr><tr><td>__str__(s)</td><td>返回优先队列的字符串表示</td></tr><tr><td>__iter__()</td><td>从前到后依次访问优先队列中的每一项</td></tr><tr><td>__add__(s)</td><td>将两个优先队列合并</td></tr><tr><td>__eq__(s)</td><td>如何两个优先队列对应位置的项相等，两个优先队列相等</td></tr><tr><td>is_empty()</td><td>优先队列为空返回 False，否则返回 True</td></tr><tr><td>clear()</td><td>将优先队列清空</td></tr><tr><td>peak()</td><td>返回优先队列优先级最高项</td></tr><tr><td>pop()</td><td>删除优先队列优先级最高项并返回该项</td></tr><tr><td>add(item)</td><td>将元素添加优先队列中</td></tr></tbody></table><h1 id="优先队列的单链表实现"><a href="#优先队列的单链表实现" class="headerlink" title="优先队列的单链表实现"></a>优先队列的单链表实现</h1><p>基于队列结构，可以实现一个简单的优先队列。</p><p>节点类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data, later=None)</span>:</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.later = later  <span class="comment"># 指向下一个节点</span></span><br></pre></td></tr></table></figure><p>定义队列类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedPriorityQueue</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, source_collection=None)</span>:</span></span><br><span class="line">        self.head = self.last = <span class="keyword">None</span></span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> source_collection:</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> source_collection:</span><br><span class="line">                self.add(item)</span><br></pre></td></tr></table></figure><p>在 __init__() 中定义一个 size 用于表示当前队列中项的个数。实例变量 last 作为一个指针，用于指向队列的末尾项。</p><h2 id="len-s"><a href="#len-s" class="headerlink" title="__len__(s)"></a>__len__(s)</h2><p>优先队列类已经实现了一个实例变量 size ，只需返回这个实例变量即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.size</span><br></pre></td></tr></table></figure><h2 id="str-s"><a href="#str-s" class="headerlink" title="__str__(s)"></a>__str__(s)</h2><p>返回优先队列的字符串表示，将优先队列中个项的值封装成一个列表形式返回，优先队列较高的项在前。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'['</span> + <span class="string">', '</span>.join(map(str, self)) + <span class="string">']'</span></span><br></pre></td></tr></table></figure><h2 id="iter"><a href="#iter" class="headerlink" title="__iter__()"></a>__iter__()</h2><p>优先级从高到低，依次访问各项，返回各项的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">    probe = self.head</span><br><span class="line">    <span class="keyword">while</span> probe <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">yield</span> probe.data</span><br><span class="line">        probe = probe.later</span><br></pre></td></tr></table></figure><h2 id="add-s"><a href="#add-s" class="headerlink" title="__add__(s)"></a>__add__(s)</h2><p>两个优先队列相加。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> other:</span><br><span class="line">        self.add(item)</span><br><span class="line">    <span class="keyword">return</span> self</span><br></pre></td></tr></table></figure><h2 id="eq-s"><a href="#eq-s" class="headerlink" title="__eq__(s)"></a>__eq__(s)</h2><p>与 <code>==</code> 相同，比较优先两个队列中项是否相等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self <span class="keyword">is</span> other:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">if</span> type(self) != type(other) <span class="keyword">or</span> len(self) != len(other):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    other_iter = iter(other)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> self:</span><br><span class="line">        <span class="keyword">if</span> item != next(other_iter):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><h2 id="is-empty"><a href="#is-empty" class="headerlink" title="is_empty()"></a>is_empty()</h2><p>判断优先队列是否为空。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.size == <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h2><p>将优先队列全部清空</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.head = self.last = <span class="keyword">None</span></span><br><span class="line">    self.size = <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="peak"><a href="#peak" class="headerlink" title="peak()"></a>peak()</h2><p>返回优先队列优先级最高项但不删除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">peak</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.is_empty():</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">"当前栈为空！"</span>)</span><br><span class="line">    <span class="keyword">return</span> self.head.data</span><br></pre></td></tr></table></figure><h2 id="add-item"><a href="#add-item" class="headerlink" title="add(item)"></a>add(item)</h2><p>将元素添加优先队列中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, item)</span>:</span></span><br><span class="line">    <span class="comment"># 如果优先队列为空或者新的项优先级低于队列中所有项的优先级，将新项添加到队列末尾中</span></span><br><span class="line">    <span class="keyword">if</span> self.is_empty() <span class="keyword">or</span> item &gt;= self.last.data:</span><br><span class="line">        new_node = Node(item)</span><br><span class="line">        <span class="keyword">if</span> self.is_empty():</span><br><span class="line">            self.head = new_node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.last.later = new_node</span><br><span class="line">        self.last = new_node</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># 否则遍历所有项找到合适位置</span></span><br><span class="line">        probe = self.head</span><br><span class="line">        trailer = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">while</span> item &gt;= probe.data:</span><br><span class="line">            trailer = probe</span><br><span class="line">            probe = probe.later</span><br><span class="line">        new_node = Node(item, probe)</span><br><span class="line">        <span class="keyword">if</span> trailer <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            self.head = new_node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            trailer.later = new_node</span><br><span class="line">    self.size += <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h2><p>返回优先队列优先级最高项并删除。当优先队列只有唯一项并被删除后，队列末尾的外部指针 <code>last</code> 与头部指针 <code>head</code> 都指向 None。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.is_empty():</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">"当前栈为空！"</span>)</span><br><span class="line">    remove_item = self.head.data</span><br><span class="line">    self.head = self.head.later</span><br><span class="line">    <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        self.last = <span class="keyword">None</span></span><br><span class="line">    self.size -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> remove_item</span><br></pre></td></tr></table></figure><h2 id="基于队列的子类表示"><a href="#基于队列的子类表示" class="headerlink" title="基于队列的子类表示"></a>基于队列的子类表示</h2><p>上面实现了一个基本的与队列（基于单链表）类似的优先队列，完全可以实现一个继承<a href="/2017/08/20/Python-数据结构：队列.html/" title="队列">队列</a>的子类表示优先队列，唯一不同的是 <code>add(item)</code> 有所不同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedPriorityQueue</span><span class="params">(SinglyLinkedQueue)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, source_collection=None)</span>:</span></span><br><span class="line">        super().__init__(source_collection)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="comment"># 如果优先队列为空或者新的项优先级低于队列中所有项的优先级，将新项添加到队列末尾中</span></span><br><span class="line">        <span class="keyword">if</span> self.is_empty() <span class="keyword">or</span> item &gt;= self.last.data:</span><br><span class="line">            super().add(item)</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 否则遍历所有项找到合适位置</span></span><br><span class="line">            probe = self.head</span><br><span class="line">            trailer = <span class="keyword">None</span></span><br><span class="line">            <span class="keyword">while</span> item &gt;= probe.data:</span><br><span class="line">                trailer = probe</span><br><span class="line">                probe = probe.later</span><br><span class="line">            new_node = Node(item, probe)</span><br><span class="line">            <span class="keyword">if</span> trailer <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                self.head = new_node</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                trailer.later = new_node</span><br><span class="line">            self.size += <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="实例化优先队列"><a href="#实例化优先队列" class="headerlink" title="实例化优先队列"></a>实例化优先队列</h1><p>定义好一个优先队列类后，将其实例化有两种方式：无参和传递一个列表参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">linked_priority_queue = LinkedPriorityQueue()</span><br><span class="line">singly_priority_queue1 = LinkedPriorityQueue([<span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 优先队列 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 数据结构：队列</title>
      <link href="/2017/08/20/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E9%98%9F%E5%88%97.html/"/>
      <url>/2017/08/20/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E9%98%9F%E5%88%97.html/</url>
      <content type="html"><![CDATA[<p>队列是线性的集合，遵从先进先出（FIFO）的协议。</p><a id="more"></a><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/Python-数据结构：队列/queue.png"><p>队列操作与栈操作类似，区别在于队列的新数据在后端添加；队列通常用链表或者数组来实现。</p><h1 id="队列的主要方法"><a href="#队列的主要方法" class="headerlink" title="队列的主要方法"></a>队列的主要方法</h1><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>__len__(s)</td><td>返回队列中项的数目</td></tr><tr><td>__str__(s)</td><td>返回队列的字符串表示</td></tr><tr><td>__iter__()</td><td>从前到后依次访问队列中的每一项</td></tr><tr><td>__add__(s)</td><td>将两个队列合并</td></tr><tr><td>__eq__(s)</td><td>如何两个队列对应位置的项相等，两个队列相等</td></tr><tr><td>is_empty()</td><td>队列为空返回 False，否则返回 True</td></tr><tr><td>clear()</td><td>将队列清空</td></tr><tr><td>peak()</td><td>返回队列开始项</td></tr><tr><td>pop()</td><td>删除队列开始顶并返回该元素</td></tr><tr><td>add(item)</td><td>将元素添加队列末尾</td></tr></tbody></table><h1 id="队列的单链表实现"><a href="#队列的单链表实现" class="headerlink" title="队列的单链表实现"></a>队列的单链表实现</h1><p>借助于单链表结构，可以实现一个简单的队列。</p><p>节点类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data, later=None)</span>:</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.later = later  <span class="comment"># 指向下一个节点</span></span><br></pre></td></tr></table></figure><p>定义队列类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SinglyLinkedQueue</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, source_collection=None)</span>:</span></span><br><span class="line">        self.head = self.last = <span class="keyword">None</span></span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> source_collection:</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> source_collection:</span><br><span class="line">                self.add(item)</span><br></pre></td></tr></table></figure><p>在 __init__() 中定义一个 size 用于表示当前队列中项的个数。与栈的单链表实现不同的是，这里还定义了一个实例变量 last，用于指向队列的末尾项，在 <code>add(item)</code> 方法中很有用。</p><h2 id="len-s"><a href="#len-s" class="headerlink" title="__len__(s)"></a>__len__(s)</h2><p>队列类已经实现了一个实例变量 size ，只需返回这个实例变量即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.size</span><br></pre></td></tr></table></figure><h2 id="str-s"><a href="#str-s" class="headerlink" title="__str__(s)"></a>__str__(s)</h2><p>返回队列的字符串表示，将队列中个项的值封装成一个列表形式返回，队列开始项在前。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'['</span> + <span class="string">', '</span>.join(map(str, self)) + <span class="string">']'</span></span><br></pre></td></tr></table></figure><h2 id="iter"><a href="#iter" class="headerlink" title="__iter__()"></a>__iter__()</h2><p>从头到尾，依次访问各项，返回各项的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">    probe = self.head</span><br><span class="line">    <span class="keyword">while</span> probe <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">yield</span> probe.data</span><br><span class="line">        probe = probe.later</span><br></pre></td></tr></table></figure><h2 id="add-s"><a href="#add-s" class="headerlink" title="__add__(s)"></a>__add__(s)</h2><p>两个队列相加，依次将队列 s 的开头添加到另一个队列的末尾。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> other:</span><br><span class="line">        self.add(item)</span><br><span class="line">    <span class="keyword">return</span> self</span><br></pre></td></tr></table></figure><h2 id="eq-s"><a href="#eq-s" class="headerlink" title="__eq__(s)"></a>__eq__(s)</h2><p>与 <code>==</code> 相同，比较两个队列中项是否相等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self <span class="keyword">is</span> other:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">if</span> type(self) != type(other) <span class="keyword">or</span> len(self) != len(other):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    other_iter = iter(other)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> self:</span><br><span class="line">        <span class="keyword">if</span> item != next(other_iter):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><h2 id="is-empty"><a href="#is-empty" class="headerlink" title="is_empty()"></a>is_empty()</h2><p>判断队列是否为空。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.size == <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h2><p>将队列全部清空</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.head = self.last = <span class="keyword">None</span></span><br><span class="line">    self.size = <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="peak"><a href="#peak" class="headerlink" title="peak()"></a>peak()</h2><p>返回队列开始项但不删除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">peak</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.is_empty():</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">"当前栈为空！"</span>)</span><br><span class="line">    <span class="keyword">return</span> self.head.data</span><br></pre></td></tr></table></figure><h2 id="add-item"><a href="#add-item" class="headerlink" title="add(item)"></a>add(item)</h2><p>将一个新的项添加到队列末尾。这里为队列末尾添加了一个外部指针，用于对队列结构的快速访问。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, item)</span>:</span></span><br><span class="line">    new_node = Node(item)</span><br><span class="line">    <span class="keyword">if</span> self.is_empty():</span><br><span class="line">        self.head = new_node</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.last.later = new_node</span><br><span class="line">    self.last = new_node</span><br><span class="line">    self.size += <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h2><p>返回队列开始项并删除。当队列只有唯一项并被删除后，队列末尾的外部指针 <code>last</code> 与头部指针 <code>head</code> 都指向 None。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.is_empty():</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">"当前栈为空！"</span>)</span><br><span class="line">    remove_item = self.head.data</span><br><span class="line">    self.head = self.head.later</span><br><span class="line">    <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        self.last = <span class="keyword">None</span></span><br><span class="line">    self.size -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> remove_item</span><br></pre></td></tr></table></figure><h1 id="实例化队列"><a href="#实例化队列" class="headerlink" title="实例化队列"></a>实例化队列</h1><p>定义好一个队列类后，将其实例化有两种方式：无参和传递一个列表参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">singly_linked_queue = SinglyLinkedQueue()</span><br><span class="line">singly_linked_queue1 = SinglyLinkedQueue([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure><h1 id="队列的两种应用"><a href="#队列的两种应用" class="headerlink" title="队列的两种应用"></a>队列的两种应用</h1><ol><li>计算机模拟现实世界的行为；</li><li>轮询 CPU 调度。</li></ol>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 数据结构：栈</title>
      <link href="/2017/08/15/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%88.html/"/>
      <url>/2017/08/15/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%88.html/</url>
      <content type="html"><![CDATA[<p>栈是线性的集合，遵从后进先出（LIFO）的协议。</p><a id="more"></a><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/Python-数据结构：栈/stack.png"><p>栈中进和出的一端称为顶（top），放入栈顶和删除栈顶的操作分别为压入（push）和弹出（pop）。</p><h1 id="栈的主要方法"><a href="#栈的主要方法" class="headerlink" title="栈的主要方法"></a>栈的主要方法</h1><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>__len__(s)</td><td>返回栈中项的数目</td></tr><tr><td>__str__(s)</td><td>返回栈的字符串表示</td></tr><tr><td>__iter__()</td><td>从底部到顶部依次访问栈中的每一项</td></tr><tr><td>__add__(s)</td><td>将两个栈合并</td></tr><tr><td>__eq__(s)</td><td>如何两个栈对应位置的项相等，两个栈相等</td></tr><tr><td>is_empty()</td><td>栈为空返回 False，否则返回 True</td></tr><tr><td>clear()</td><td>将栈清空</td></tr><tr><td>peak()</td><td>返回栈顶</td></tr><tr><td>pop()</td><td>删除栈顶并返回该元素</td></tr><tr><td>push(item)</td><td>将元素压入栈顶</td></tr></tbody></table><h1 id="栈的单链表实现"><a href="#栈的单链表实现" class="headerlink" title="栈的单链表实现"></a>栈的单链表实现</h1><p>借助于单链表结构，可以实现一个简单的栈结构。</p><p>节点类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data, later=None)</span>:</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.later = later  <span class="comment"># 指向下一个节点</span></span><br></pre></td></tr></table></figure><p>定义栈类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SinglyLinkedStack</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, source_collection=None)</span>:</span></span><br><span class="line">        self.head = <span class="keyword">None</span></span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> source_collection:</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> source_collection:</span><br><span class="line">                self.push(item)</span><br></pre></td></tr></table></figure><p>在 __init__() 中定义一个 size 用于表示当前栈中项的个数。</p><h2 id="len-s"><a href="#len-s" class="headerlink" title="__len__(s)"></a>__len__(s)</h2><p>栈类已经实现了一个实例变量 size ，只需返回这个实例变量即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.size</span><br></pre></td></tr></table></figure><h2 id="str-s"><a href="#str-s" class="headerlink" title="__str__(s)"></a>__str__(s)</h2><p>返回栈的字符串表示，将栈中个项的值封装成一个列表形式返回，栈顶项在前。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'['</span> + <span class="string">', '</span>.join(map(str, self)) + <span class="string">']'</span></span><br></pre></td></tr></table></figure><h2 id="iter"><a href="#iter" class="headerlink" title="__iter__()"></a>__iter__()</h2><p>从顶部到底部，依次访问各项，返回各项的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">    probe = self.head</span><br><span class="line">    <span class="keyword">while</span> probe <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">yield</span> probe.data</span><br><span class="line">        probe = probe.later</span><br></pre></td></tr></table></figure><h2 id="add-s"><a href="#add-s" class="headerlink" title="__add__(s)"></a>__add__(s)</h2><p>两个栈相加，依次对栈 s 进行 <code>pop()</code> 的项再 <code>push()</code>到另一个栈中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> other:</span><br><span class="line">        self.push(item)</span><br><span class="line">    <span class="keyword">return</span> self</span><br></pre></td></tr></table></figure><h2 id="eq-s"><a href="#eq-s" class="headerlink" title="__eq__(s)"></a>__eq__(s)</h2><p>与 <code>==</code> 相同，比较两个栈中项是否相等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self <span class="keyword">is</span> other:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">if</span> type(self) != type(other) <span class="keyword">or</span> len(self) != len(other):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    other_iter = iter(other)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> self:</span><br><span class="line">        <span class="keyword">if</span> item != next(other_iter):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><h2 id="is-empty"><a href="#is-empty" class="headerlink" title="is_empty()"></a>is_empty()</h2><p>判断栈是否为空。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.size == <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h2><p>将栈全部清空</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.head = <span class="keyword">None</span></span><br><span class="line">    self.size = <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="peak"><a href="#peak" class="headerlink" title="peak()"></a>peak()</h2><p>返回栈顶项但不删除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">peak</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.is_empty():</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">"当前栈为空！"</span>)</span><br><span class="line">    <span class="keyword">return</span> self.head.data</span><br></pre></td></tr></table></figure><h2 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h2><p>返回栈顶项并删除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.is_empty():</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">"当前栈为空！"</span>)</span><br><span class="line">    remove_item = self.head.data</span><br><span class="line">    self.head = self.head.later</span><br><span class="line">    self.size -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> remove_item</span><br></pre></td></tr></table></figure><h2 id="push-item"><a href="#push-item" class="headerlink" title="push(item)"></a>push(item)</h2><p>将一个新的项压入到栈顶。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, item)</span>:</span></span><br><span class="line">    self.head = Node(item, self.head)</span><br><span class="line">    self.size += <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="实例化栈"><a href="#实例化栈" class="headerlink" title="实例化栈"></a>实例化栈</h1><p>定义好一个栈类后，将其实例化有两种方式：无参和传递一个列表参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">singly_linked_stack = SinglyLinkedStack()</span><br><span class="line">singly_linked_stack1 = SinglyLinkedStack([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure><h1 id="栈的三种应用"><a href="#栈的三种应用" class="headerlink" title="栈的三种应用"></a>栈的三种应用</h1><ol><li>计算算术表达式；</li><li>实现回溯算法；</li><li>内存管理。</li></ol>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 数据结构：单链表</title>
      <link href="/2017/08/09/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E5%8D%95%E9%93%BE%E8%A1%A8.html/"/>
      <url>/2017/08/09/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E5%8D%95%E9%93%BE%E8%A1%A8.html/</url>
      <content type="html"><![CDATA[<p>单链表是链表的一种，其链接方向是单向的，对链表的访问要通过从头部开始，依序往下读取。<br><a id="more"></a><br><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/Python-数据结构：单链表/singlylinkdedlist.png"></p><ol><li>在单链表中很容易访问一个项的后一项，但并不容易访问前一项。</li><li>链表在内存中的表示使用非连续性内存，即只需给定每个项的地址和链接，便能在内存中任一位置找到。</li></ol><h1 id="单链表节点表示"><a href="#单链表节点表示" class="headerlink" title="单链表节点表示"></a>单链表节点表示</h1><p>要表示一个单链表，最基本的元素即是节点，每个节点都含有节点自身的数据和指向下一个节点的链接。使用一个节点类表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data, later=None)</span>:</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.later = later</span><br></pre></td></tr></table></figure><h1 id="单链表操作"><a href="#单链表操作" class="headerlink" title="单链表操作"></a>单链表操作</h1><p>当定义好节点后，就可以开始实现一个单链表了。定义一个单链表类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SinglyLinkedList</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, source_collection=None)</span>:</span></span><br><span class="line">        self.head = source_collection</span><br></pre></td></tr></table></figure><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><p>这里迭代实际上是使用一个临时的指针变量进行了一次遍历；指针变量初始化指向 head 开始处，在遍历的过程中，指针一次指向 head 的每一个后节点，直到指向 None 结束。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">    probe = self.head</span><br><span class="line">    <span class="keyword">while</span> probe <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">yield</span> probe.data</span><br><span class="line">        probe = probe.later</span><br></pre></td></tr></table></figure><p>遍历在时间上是线性的，不需要额外的内存。</p><h2 id="单链表大小"><a href="#单链表大小" class="headerlink" title="单链表大小"></a>单链表大小</h2><p>计算单链表的大小（节点数目）基于遍历，只需在遍历每个节点时进行计数即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">size</span><span class="params">(self)</span>:</span></span><br><span class="line">    counter = <span class="number">0</span></span><br><span class="line">    probe = self.head</span><br><span class="line">    <span class="keyword">while</span> probe <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">        probe = probe.later</span><br><span class="line">    <span class="keyword">return</span> counter</span><br></pre></td></tr></table></figure><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p>这里的搜索为顺序搜索，与遍历类似，从第一个节点开始沿着链接向后搜索。因为单链表的结构是顺序的并且每个节点都含有本身的数据，因此有两种方式来实现搜索。</p><ol><li><p>使用数据值来搜索匹配每个节点的数据值：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sequential_search_with_data</span><span class="params">(self, target)</span>:</span></span><br><span class="line">    probe = self.head</span><br><span class="line">    <span class="keyword">while</span> probe <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> target != probe.data:</span><br><span class="line">        probe = probe.later</span><br><span class="line">    <span class="keyword">if</span> probe <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span>  <span class="comment"># target 不在单链表中</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span>  <span class="comment"># target 在单链表中</span></span><br></pre></td></tr></table></figure></li><li><p>根据提供的索引顺序访问特定项：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sequential_search_with_index</span><span class="params">(self, index)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> index &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">'index 超出范围!'</span>)</span><br><span class="line">    probe = self.head</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> index &gt; <span class="number">0</span>:</span><br><span class="line">            probe = probe.later</span><br><span class="line">            index -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> probe.data</span><br><span class="line">    <span class="keyword">except</span> AttributeError:</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">'index 超出范围!'</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><p>替换急于搜索，搜索到便替换，也有两种方式。</p><ol><li><p>基于数据值的匹配后替换：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_with_data</span><span class="params">(self, target, new_item)</span>:</span></span><br><span class="line">    probe = self.head</span><br><span class="line">    <span class="keyword">while</span> probe <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> target != probe.data:</span><br><span class="line">        probe = probe.later</span><br><span class="line">    <span class="keyword">if</span> probe <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        probe.data = new_item</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span>  <span class="comment"># 替换成功</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span>  <span class="comment"># 目标项不存在</span></span><br></pre></td></tr></table></figure></li><li><p>根据提供的索引顺序访问特定项：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_with_index</span><span class="params">(self, index, new_item)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> index &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">'index 超出范围!'</span>)</span><br><span class="line">    probe = self.head</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> index &gt; <span class="number">0</span>:</span><br><span class="line">            probe = probe.later</span><br><span class="line">            index -= <span class="number">1</span></span><br><span class="line">        probe.data = new_item</span><br><span class="line">    <span class="keyword">except</span> AttributeError:</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">'index 超出范围!'</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>插入有三种情况：在开始处插入，在末尾插入，在任意位置插入。</p><ol><li><p>在开始处插入。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_pre</span><span class="params">(self, data)</span>:</span></span><br><span class="line">    self.head = Node(data, self.head)</span><br></pre></td></tr></table></figure></li><li><p>在末尾插入：此时有两种情况，head 为 None 和不为 None，不为 None 时需要搜索到最后一项。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_end</span><span class="params">(self, data)</span>:</span></span><br><span class="line">    new_node = Node(data)</span><br><span class="line">    <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="keyword">None</span>:  <span class="comment"># head 指针为 None</span></span><br><span class="line">        self.head = new_node</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># head 指针不为 None</span></span><br><span class="line">        probe = self.head</span><br><span class="line">        <span class="keyword">while</span> probe.later <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            probe = probe.later</span><br><span class="line">        probe.later = new_node</span><br></pre></td></tr></table></figure></li><li><p>在任意位置插入：此时不仅要考虑 head 是否为 None，还要考虑插入位置是否在单链表的范围内。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, index, data)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> index &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">'index 超出范围!'</span>)</span><br><span class="line">     <span class="keyword">elif</span> index == <span class="number">0</span> <span class="keyword">or</span> self.head <span class="keyword">is</span> <span class="keyword">None</span>:  <span class="comment"># 在开始处插入</span></span><br><span class="line">         self.head = Node(data, self.head)</span><br><span class="line">     <span class="keyword">else</span>:  <span class="comment"># index &gt; 0</span></span><br><span class="line">         probe = self.head</span><br><span class="line">         <span class="keyword">while</span> index &gt; <span class="number">1</span> <span class="keyword">and</span> probe.later <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:  <span class="comment"># 如果 index 超出了链表结构的末尾就在末尾插入</span></span><br><span class="line">             probe = probe.later</span><br><span class="line">             index -= <span class="number">1</span></span><br><span class="line">         <span class="keyword">if</span> index &gt; <span class="number">1</span>:  <span class="comment"># 超出范围</span></span><br><span class="line">             <span class="keyword">raise</span> KeyError(<span class="string">'index 超出范围!'</span>)</span><br><span class="line">         probe.later = Node(data, probe.later)</span><br></pre></td></tr></table></figure></li></ol><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>删除有三种情况：在开始处删除，在末尾删除，在任意位置删除。三种情况都需要考虑 head 是否为 None。</p><ol><li><p>在开始处删除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_pre</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">'链表为空'</span>)</span><br><span class="line">    remove_item = self.head.data</span><br><span class="line">    self.head = self.head.later</span><br><span class="line">    <span class="keyword">return</span> remove_item</span><br></pre></td></tr></table></figure></li><li><p>在末尾删除：此时有两种情况，head 只有一个节点，和多个节点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_end</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">'链表为空'</span>)</span><br><span class="line">    <span class="keyword">if</span> self.head.later <span class="keyword">is</span> <span class="keyword">None</span>:  <span class="comment"># 只有一个节点</span></span><br><span class="line">        remove_item = self.head.data</span><br><span class="line">        self.head = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># 含有多个节点</span></span><br><span class="line">        probe = self.head</span><br><span class="line">        <span class="keyword">while</span> probe.later.later <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            probe = probe.later</span><br><span class="line">        remove_item = probe.later.data</span><br><span class="line">        probe.later = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">return</span> remove_item</span><br></pre></td></tr></table></figure></li><li><p>在任意位置删除：此时不仅要考虑 head 有多少节点，好要考虑插入位置是否在单链表的范围内。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, index)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">'链表为空'</span>)</span><br><span class="line">    <span class="keyword">if</span> index &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">'index 超出范围!'</span>)</span><br><span class="line">    <span class="keyword">elif</span> index == <span class="number">0</span> <span class="keyword">or</span> self.head.later <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        remove_item = self.head.data</span><br><span class="line">        self.head = self.head.later</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># index &gt; 0</span></span><br><span class="line">        probe = self.head</span><br><span class="line">        <span class="keyword">while</span> index &gt; <span class="number">1</span> <span class="keyword">and</span> probe.later.later <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>: </span><br><span class="line">            probe = probe.later</span><br><span class="line">            index -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> index &gt; <span class="number">1</span>:  <span class="comment"># 超出范围</span></span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">'index 超出范围!'</span>)</span><br><span class="line">        remove_item = probe.later.data</span><br><span class="line">        probe.later = probe.later.later</span><br><span class="line">    <span class="keyword">return</span> remove_item</span><br></pre></td></tr></table></figure></li></ol><h2 id="是否为空"><a href="#是否为空" class="headerlink" title="是否为空"></a>是否为空</h2><p>判断是否为空很简单，只需判断 head 第一个节点是否存在数据值即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span> <span class="keyword">if</span> self.head <span class="keyword">else</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>上述操作中，遍历是线性的，基于遍历的操作同样是线性的；只有在开始处插入、在开始处删除和判断是否为空是常数的。</p>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用 reuqests 爬取豆瓣数据书籍 URL</title>
      <link href="/2017/08/02/%E4%BD%BF%E7%94%A8-reuqests-%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E6%95%B0%E6%8D%AE%E4%B9%A6%E7%B1%8D-URL.html/"/>
      <url>/2017/08/02/%E4%BD%BF%E7%94%A8-reuqests-%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E6%95%B0%E6%8D%AE%E4%B9%A6%E7%B1%8D-URL.html/</url>
      <content type="html"><![CDATA[<p>使用 requests 库爬取豆瓣读书中所有书籍的 URL，并将其存储到 Mysql 中。<br><a id="more"></a></p><h1 id="安装第三方库"><a href="#安装第三方库" class="headerlink" title="安装第三方库"></a>安装第三方库</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install lxml</span><br><span class="line">pip install DBUtils</span><br><span class="line">pip install mysqlclient</span><br><span class="line">pip install requests</span><br><span class="line">pip install BeautifulSoup4</span><br></pre></td></tr></table></figure><p><code>DBUtils</code> 库用于构建 Mysql 连接池。</p><h1 id="构建-Mysql-连接池"><a href="#构建-Mysql-连接池" class="headerlink" title="构建 Mysql 连接池"></a>构建 Mysql 连接池</h1><p>在爬取数据的过程中需要实时将数据保存到数据库中，如果频繁的新建连接再关闭容易产生性能问题，造成堵塞。可通过构建连接池来解决，这里借助于 DBUtils。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"><span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MysqlPool</span>:</span></span><br><span class="line">    <span class="string">"""Mysql 连接池类"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.pool = PooledDB(MySQLdb,</span><br><span class="line">                                 <span class="number">5</span>,</span><br><span class="line">                                 host=<span class="string">'host'</span>,</span><br><span class="line">                                 user=<span class="string">'user'</span>,</span><br><span class="line">                                 passwd=<span class="string">'password'</span>,</span><br><span class="line">                                 db=<span class="string">'db'</span>,</span><br><span class="line">                                 port=<span class="number">3306</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            print(<span class="string">"连接池创建错误！"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_add_conn</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        在连接池中添加一个连接</span></span><br><span class="line"><span class="string">        :return: 游标、连接</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        conn = self.pool.connection()</span><br><span class="line">        <span class="keyword">return</span> conn.cursor(), conn</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_close_conn</span><span class="params">(cur, conn)</span>:</span></span><br><span class="line">        <span class="string">"""关闭游标和连接"""</span></span><br><span class="line">        cur.close()</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_insert_data</span><span class="params">(sql, cur, conn)</span>:</span></span><br><span class="line">        <span class="string">"""向数据库中插入数据"""</span></span><br><span class="line">        cur.execute(sql)</span><br><span class="line">        conn.commit()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">once_insert</span><span class="params">(self, sql)</span>:</span></span><br><span class="line">        <span class="string">"""向连接池发起一次连接"""</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cur, conn = self._add_conn()</span><br><span class="line">            self._insert_data(sql, cur, conn)</span><br><span class="line">            self._close_conn(cur, conn)</span><br><span class="line">        <span class="keyword">except</span> MySQLdb.Error <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">'Error: &#123;&#125;'</span>.format(e))</span><br></pre></td></tr></table></figure><p>这里创建了一个连接池类，当定义一个连接池实例时，便创建了一个最少连接数为5的连接池，每次需要向数据库发起连接时，只需要调用 once_insert() 函数即可。</p><h1 id="爬取书籍-URL"><a href="#爬取书籍-URL" class="headerlink" title="爬取书籍 URL"></a>爬取书籍 URL</h1><h2 id="爬取书籍标签-URL"><a href="#爬取书籍标签-URL" class="headerlink" title="爬取书籍标签 URL"></a>爬取书籍标签 URL</h2><p>豆瓣读书有个图书标签页，该页面包含了所有标签，每个标签下包含了所属标签的书籍列表，所有我们可以先爬取标签 URL，再通过这些 URL 爬取所有书籍。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标签页 url</span></span><br><span class="line">CAT_LABEL_URL = <span class="string">'https://book.douban.com/tag/?view=cloud'</span></span><br><span class="line"></span><br><span class="line">User_Agent = [<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36"</span>,</span><br><span class="line">              <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36"</span>,</span><br><span class="line">              <span class="string">"Mozilla/5.0 (Linux; Android 5.1.1; Nexus 5 Build/LMY48B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.78 Mobile Safari/537.36"</span>,</span><br><span class="line">              <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) AppleWebKit/604.5.6 (KHTML, like Gecko) Version/11.0.3 Safari/604.5.6"</span>,</span><br><span class="line">              ]</span><br><span class="line">              </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_tags_urls</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="string">"""获取所有标签 url"""</span></span><br><span class="line">    <span class="comment"># 请求头</span></span><br><span class="line">    headers = &#123;<span class="string">'user-agent'</span>: random.choice(User_Agent)&#125;</span><br><span class="line"></span><br><span class="line">    response = requests.get(url, headers=headers)</span><br><span class="line">    soup = BeautifulSoup(response.text, <span class="string">'lxml'</span>)</span><br><span class="line"></span><br><span class="line">    tags = soup.find(<span class="string">"table"</span>, &#123;<span class="string">"class"</span>: <span class="string">"tagCol"</span>&#125;)</span><br><span class="line">    tags = tags.find_all(<span class="string">'a'</span>)</span><br><span class="line">    tags_urls = []</span><br><span class="line">    <span class="keyword">for</span> tag <span class="keyword">in</span> tags:</span><br><span class="line">        tag_url = tag.attrs[<span class="string">"href"</span>]</span><br><span class="line">        tags_urls.append(<span class="string">'https://book.douban.com'</span> + tag_url)</span><br><span class="line">    <span class="keyword">return</span> tags_urls</span><br></pre></td></tr></table></figure><h2 id="爬取所有书籍-URL"><a href="#爬取所有书籍-URL" class="headerlink" title="爬取所有书籍 URL"></a>爬取所有书籍 URL</h2><p>有了这些标签 URL，就可以通过遍历这些标签 URL 爬取该标签所有书籍。</p><p>通过观察标签下书籍列表的 URL，发现所有 URL 都形如 <code>https://book.douban.com/tag/标签名?start=page&amp;type=T</code>。每页显示书籍为 20，所以只需 page 从零开始，每次增加 20，就可以得到所有书籍列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .common_func <span class="keyword">import</span> get_md5</span><br><span class="line"><span class="keyword">from</span> requests_urls.mysql_conn <span class="keyword">import</span> MysqlPool</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立一个连接池</span></span><br><span class="line">db_pool = MysqlPool()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_books_urls</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="string">"""获取所有书籍 url"""</span></span><br><span class="line">    page = <span class="number">0</span></span><br><span class="line">    url += <span class="string">'?start=&#123;&#125;&amp;type=T'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="comment"># 延时</span></span><br><span class="line">        time.sleep(random.random() * <span class="number">5</span> + <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 请求头</span></span><br><span class="line">        headers = &#123;<span class="string">'user-agent'</span>: random.choice(User_Agent)&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(url.format(page), headers=headers)</span><br><span class="line">            soup = BeautifulSoup(response.text, <span class="string">'lxml'</span>)</span><br><span class="line">            books = soup.find_all(<span class="string">"li"</span>, &#123;<span class="string">"class"</span>: <span class="string">"subject-item"</span>&#125;)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 当前标签下书籍 url 已爬取完</span></span><br><span class="line">            <span class="keyword">if</span> len(books) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> book <span class="keyword">in</span> books:</span><br><span class="line">                book_url = book.find(<span class="string">"div"</span>, &#123;<span class="string">"class"</span>: <span class="string">"info"</span>&#125;)</span><br><span class="line">                book_url = book_url.find(<span class="string">'a'</span>, &#123;<span class="string">"href"</span>: re.compile(<span class="string">r"https://book.douban.com/subject/\d+/"</span>)&#125;)</span><br><span class="line">                book_url = book_url.attrs[<span class="string">"href"</span>]</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 将书籍 url 用 md5 加密</span></span><br><span class="line">                book_url_md5 = get_md5(book_url)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 通过连接池将数据插入到 mysql 中</span></span><br><span class="line">                sql = <span class="string">"INSERT IGNORE INTO books_urls(id, url) VALUE('&#123;&#125;', '&#123;&#125;');"</span>.format(book_url_md5, book_url)</span><br><span class="line">                db_pool.once_insert(sql)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">"爬取失败"</span>)</span><br><span class="line">        page += <span class="number">20</span></span><br></pre></td></tr></table></figure><p>其中：</p><ol><li><code>time.sleep()</code> 和 随机选取一个 <code>user-agent</code> 都是防止反爬虫的策略。</li><li><p>由于一本书可能有多个标签，在遍历不同标签时，爬取的书籍可能可能重复，就需要去重。在这里，我将每个 URL 都通过 md5 加密并存储到 Mysql，并在 Mysql 中将此列设为具有唯一键的一列。当向数据库保存数据时，使用 <code>INSERT IGNORE</code> 的 sql 语法，即不存在时存入，存在时忽略。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_md5</span><span class="params">(url)</span>:</span></span><br><span class="line"><span class="string">"""md5 加密"""</span></span><br><span class="line">   <span class="keyword">if</span> isinstance(url, str):</span><br><span class="line">       url = url.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">   md = hashlib.md5()</span><br><span class="line">   md.update(url)</span><br><span class="line">   <span class="keyword">return</span> md.hexdigest()</span><br></pre></td></tr></table></figure></li></ol><h1 id="部署爬虫及爬取结果"><a href="#部署爬虫及爬取结果" class="headerlink" title="部署爬虫及爬取结果"></a>部署爬虫及爬取结果</h1><ol><li>爬取过程需要一定时间，因此将其部署在云服务器上。使用命令 <code>nohup python -u main.py &gt; log.out &amp;</code> 使其在后台静静地开始爬虫。</li><li>查看数据库的爬取结果：<img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/使用-reuqests-爬取豆瓣数据书籍-URL/doubanbooksurls.png"></li></ol><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p><a href="https://github.com/tyrotalk/crawler_projects/tree/master/doubanbook" target="_blank" rel="noopener">Github</a></p>]]></content>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> requests </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mysql 简介及 Python 连接数据库</title>
      <link href="/2017/07/26/Mysql-%E7%AE%80%E4%BB%8B%E5%8F%8A-Python-%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93.html/"/>
      <url>/2017/07/26/Mysql-%E7%AE%80%E4%BB%8B%E5%8F%8A-Python-%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93.html/</url>
      <content type="html"><![CDATA[<p>MySQL 是一种 DBMS，即它是一种数据库软件。<br><a id="more"></a></p><h1 id="数据库是什么"><a href="#数据库是什么" class="headerlink" title="数据库是什么"></a>数据库是什么</h1><p>数据库是保存有组织的数据的容器（通常是一个文件或一组文件）。</p><blockquote><p>注意：不能用数据库代表数据库软件。数据库软件称为DBMS（数据库管理系统）。</p></blockquote><h1 id="数据库分类"><a href="#数据库分类" class="headerlink" title="数据库分类"></a>数据库分类</h1><p>数据库包括关系型数据库和非关系型数据库，本文基于关系型数据库。</p><h2 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h2><p>关系数据库（Relational database）是创建在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据。标准数据查询语言SQL就是一种基于关系数据库的语言。<br>关系数据库管理系统有 MySQL、MariaDB、SQLite、SQLSever、PostgreSQL、ORECLE 等。</p><h2 id="非关系型数据库（NoSQL）"><a href="#非关系型数据库（NoSQL）" class="headerlink" title="非关系型数据库（NoSQL）"></a>非关系型数据库（NoSQL）</h2><p>非关系数据库管理系统有 mangoDB、redis、HBASE、CouchDB、cassandra、Neo4j 等。<br>NOSQL 分类：</p><ol><li>文档型</li><li>key-value 型</li><li>列式数据库</li><li>图形数据库</li></ol><h1 id="关系型数据库基本结构"><a href="#关系型数据库基本结构" class="headerlink" title="关系型数据库基本结构"></a>关系型数据库基本结构</h1><ol><li>表（table）：某种特定类型数据的结构化清单。数据库中的每个表都有一个名字，用来标识自己。此名字是唯一的。</li><li>列（column）：表中的一个字段。所有表都是由一个或多个列组成的。数据库中每个列都有相应的数据类型。数据类型定义列可以存储的数据种类。</li><li>行（row）:表中的一个记录。表中的数据是按行存储的，所保存的每个记录存储在自己的行内。如果将表想象为网格，网格中垂直的列为表列，水平行为表行。</li><li>主键：唯一标识表中每行的这个列（或这组列）。主键用来表示一个特定的行。没有主键，更新或删除表中特定行很困难，因为没有安全的方法保证只涉及相关的行。<blockquote><p>主键规则：</p><ol><li>任意两行都不具有相同的主键值（MySQL强制实施）；</li><li>每个行都必须具有一个主键值（主键列不允许NULL值）（MySQL强制实施）；</li><li>不更新主键列中的值；</li><li>不重用主键列的值；</li><li>不在主键列中使用可能会更改的值。</li></ol></blockquote></li></ol><h1 id="SQL-简介及语法"><a href="#SQL-简介及语法" class="headerlink" title="SQL 简介及语法"></a>SQL 简介及语法</h1><p>SQL 是结构化查询语言（Structured Query Language）的缩写。SQL 是一种专门用来与数据库通信的语言。</p><h2 id="SQL-优点"><a href="#SQL-优点" class="headerlink" title="SQL 优点"></a>SQL 优点</h2><ol><li>SQL 不是某个特定数据库供应商专有的语言。几乎所有重要的 DBMS 都支持 SQL。</li><li>SQL 简单易学。它的语句全都是由描述性很强的英语单词组成，而且这些单词的数目不多。</li><li>SQL 尽管看上去很简单，但它实际上是一种强有力的语言，灵活使用其语言元素，可以进行非常复杂和高级的数据库操作。</li></ol><h2 id="语法基础"><a href="#语法基础" class="headerlink" title="语法基础"></a>语法基础</h2><ol><li>DDL（数据定义语句）<ol><li>CREATE TABLE/DATABASE</li><li>ALTER TABLE/DATABASE</li><li>DROP TABLE/DATABASE</li></ol></li><li>DML（数据管理语句）<ol><li>INSERT（新增）</li><li>DELETE（删除）</li><li>UPDATE（更新）</li><li>SELECT（查询）</li></ol></li></ol><h3 id="新建及使用"><a href="#新建及使用" class="headerlink" title="新建及使用"></a>新建及使用</h3><ol><li>新建数据库：<code>CREATE DATABASE 数据库名称;</code></li><li>使用数据库：<code>USE 数据库名称;</code></li><li>显示所有数据库：<code>SHOW DATABASES;</code><blockquote><p>其它 SHOW 语句：</p><ul><li>显示一个数据库中所有的表：<code>SHOW TABLES;</code></li><li>显示一个表中的所有列信息：<code>SHOW COLUMNS FROM 表名称;</code><br><code>DESCRIBE</code> 可作为 <code>SHOW COLUMNS FROM</code> 的快捷方式。</li><li>显示广泛的服务器状态信息：<code>SHOW STATUS;</code></li><li>显示创建特定数据库或表：<code>SHOW CREATE DATA BASE;</code> 和 <code>SHOW CREATE TABLE;</code></li><li>显示授予用户（所有用户或特定用户）的安全权限：<code>SHOW GRANTS</code></li><li>显示服务器错误或警告消息：<code>SHOW ERRORS</code> 和 <code>SHOW WARNINGS</code></li></ul></blockquote></li></ol><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p><code>CREATE TABLE 表名称(--描述--);</code><br>例如创建一个名为「students」的表：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`students`</span>(</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line"><span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`nickname`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`sex`</span> <span class="built_in">CHAR</span>(<span class="number">1</span>) <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`in_time`</span> DATETIME <span class="literal">NULL</span></span><br><span class="line"><span class="comment">-- 也可在此处 PRIMARY KEY (`id`)</span></span><br><span class="line">) <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> <span class="string">`UTF8`</span>;</span><br></pre></td></tr></table></figure></p><blockquote><p>其中：</p><ul><li>INT/VARCHAR/DATETIME 表示类型；</li><li>NOT NULL 表示不为空；</li><li>AUTO_INCREMENT 表示自增；</li><li>PRIMARY KEY 表示主键，主键的定义方式有两种；</li><li>DEFAULT CHARSET `UTF8` 表示编码格式为 <code>UTF8</code>。</li></ul></blockquote><h3 id="插入和查询数据"><a href="#插入和查询数据" class="headerlink" title="插入和查询数据"></a>插入和查询数据</h3><ol><li><p>插入单条数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`students`</span> <span class="keyword">VALUE</span>(<span class="number">1</span>, <span class="string">'李四'</span>, <span class="string">'小四'</span>, <span class="string">'男'</span>, <span class="keyword">NOW</span>());</span><br></pre></td></tr></table></figure></li><li><p>插入单条数据，指定内容、id 自增</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`students`</span>(<span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`sex`</span>, <span class="string">`in_time`</span>) <span class="keyword">VALUE</span>(<span class="string">'李四2'</span>, <span class="string">'小四2'</span>, <span class="string">'男'</span>, <span class="keyword">NOW</span>());</span><br></pre></td></tr></table></figure></li><li><p>插入多条记录，指定内容、id 自增</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`students`</span>(<span class="string">`name`</span>, <span class="string">`nickname`</span>) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'李四3'</span>, <span class="string">'小四3'</span>),</span><br><span class="line">(<span class="string">'李四X'</span>, <span class="string">'小四X'</span>)</span><br><span class="line">;</span><br></pre></td></tr></table></figure></li><li><p>查询全部</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`students`</span>;</span><br></pre></td></tr></table></figure></li><li><p>查询指定内容</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 当性别为男</span></span><br><span class="line"><span class="comment">-- 升序：ASC 降序：DEC</span></span><br><span class="line"><span class="comment">-- 分页：LIMIT 偏移量 显示数据量（偏移量=显示页*显示数据量-显示数据量）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span> <span class="keyword">FROM</span> <span class="string">`students`</span> <span class="keyword">WHERE</span> <span class="string">`sex`</span>=<span class="string">'男'</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="string">`id`</span> <span class="keyword">DESC</span> <span class="keyword">LIMIT</span> <span class="number">0</span>, <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li></ol><h3 id="修改和删除数据"><a href="#修改和删除数据" class="headerlink" title="修改和删除数据"></a>修改和删除数据</h3><ol><li><p>修改数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="string">`students`</span> <span class="keyword">SET</span> <span class="string">`sex`</span>=<span class="string">'女'</span> <span class="keyword">WHERE</span> <span class="string">`sex`</span>=<span class="string">'男'</span>;</span><br></pre></td></tr></table></figure></li><li><p>删除数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="string">`students`</span> <span class="keyword">WHERE</span> <span class="string">`sex`</span>=<span class="string">'男'</span>;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>当没有 <code>WHERE</code> 条件时，表示修改、删除全部内容。</p></blockquote><h1 id="Python-连接数据库"><a href="#Python-连接数据库" class="headerlink" title="Python 连接数据库"></a>Python 连接数据库</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备SQL</span></span><br><span class="line">sql = <span class="string">'SELECT * FROM `news` ORDER BY `created_at` DESC;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取连接</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    conn = MySQLdb.connect(</span><br><span class="line">        host=<span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="comment"># host='localhost'</span></span><br><span class="line">        user=<span class="string">'root'</span>,</span><br><span class="line">        passwd=<span class="string">'960645'</span>,</span><br><span class="line">        db=<span class="string">'news'</span>,</span><br><span class="line">        port=<span class="number">3306</span>,</span><br><span class="line">        charset=<span class="string">'utf8'</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 找到cursor</span></span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    <span class="comment"># 执行SQL</span></span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    <span class="comment"># 拿到结果</span></span><br><span class="line">    rest = cursor.fetchone()</span><br><span class="line">    <span class="comment"># 处理结果</span></span><br><span class="line">    print(rest)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    cursor.close()</span><br><span class="line"><span class="keyword">except</span> MySQLdb.Error <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'Error: %s'</span> % e)</span><br></pre></td></tr></table></figure><blockquote><p>其中：<br>连接本地数据库时，<code>host</code> 可以是 <code>127.0.0.1</code> 或 <code>localhost</code>；<br>最后一定要关闭连接。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>初识 Requests 库</title>
      <link href="/2017/07/16/%E5%88%9D%E8%AF%86-Requests-%E5%BA%93.html/"/>
      <url>/2017/07/16/%E5%88%9D%E8%AF%86-Requests-%E5%BA%93.html/</url>
      <content type="html"><![CDATA[<p>Requests 库是一个处理复杂 HTTP 请求、cookie、header 等内容的 Python 第三方库。</p><a id="more"></a><h1 id="安装与示例"><a href="#安装与示例" class="headerlink" title="安装与示例"></a>安装与示例</h1><p>命令行安装：<code>pip install requests</code></p><p>简单示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>requests.get(<span class="string">"https://tyrotalk.com"</span>)</span><br><span class="line">&lt;Response [<span class="number">200</span>]&gt;</span><br></pre></td></tr></table></figure><p>这里使用了 HTTP 的 GET 请求，其它 HTTP 请求类型还有 PUT、DELETE、HEAD 、 OPTIONS。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.put(<span class="string">'http://httpbin.org/put'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.delete(<span class="string">'http://httpbin.org/delete'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.head(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.options(<span class="string">'http://httpbin.org/get'</span>)</span><br></pre></td></tr></table></figure><h1 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h1><p>以前面示例 <code>html = requests.get(&quot;https://tyrotalk.com&quot;)</code> 为例，html 类型（requests 返回类型）为 <code>requests.models.Response</code>；输出 <code>&lt;Response [200]&gt;</code> 中 200 为 httpcode，表示请求被成功处理。</p><h2 id="返回类型"><a href="#返回类型" class="headerlink" title="返回类型"></a>返回类型</h2><p>requests 返回类型为 <code>requests.models.Response</code>，可转换成其它类型。</p><ol><li><p>text 方法：<code>html.text</code> 将返回 str 类型的数据；</p></li><li><p>content 方法：<code>html.content</code> 将返回 bytes 类型的数据；</p></li><li><p>json() 方法：<code>html.json()</code> 将 JSON 格式的字符串转换为字典格式。</p><blockquote><p>如何返回类型不为 JSON，使用 json() 方法将抛出 <code>json.decoder.JSONDecodeError</code>异常。</p></blockquote></li></ol><h2 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h2><p>如果要为 URL 传递一些参数构建新的新的请求参数，只需将将这些参数构建成一个字典，传递给 GET 的 params 参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">params = &#123;</span><br><span class="line">    &apos;key&apos;: &apos;value&apos;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.get(&quot;http://httpbin.org/get&quot;, params=data)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>输出内容为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"args"</span>: &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"value"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="attr">"headers"</span>: &#123;</span><br><span class="line">    <span class="attr">"Accept"</span>: <span class="string">"*/*"</span>, </span><br><span class="line">    <span class="attr">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, </span><br><span class="line">    <span class="attr">"Connection"</span>: <span class="string">"close"</span>, </span><br><span class="line">    <span class="attr">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="attr">"User-Agent"</span>: <span class="string">"python-requests/2.18.4"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h2><p> HTTP 的请求头是每次向网络服务器发送请求时，传递的一组属性和配置信息。可向 requests 传递 headers 参数来传递请求头信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">"https://tyrotalk.com"</span>, headers=headers)</span><br></pre></td></tr></table></figure><h1 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h1><p>POST 方法把信息推送给网络服务器进行存储和分析。通常用户通过 HTML 表单发送 POST 请求，也可以通过 requests 来实现，并将对应的信息添加到请求信息中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;<span class="string">'key'</span>: <span class="string">'germey'</span>, <span class="string">'age'</span>: <span class="string">'22'</span>&#125;</span><br><span class="line">r = requests.post(<span class="string">"http://httpbin.org/post"</span>, data=data)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>输出内容为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"args"</span>: &#123;&#125;, </span><br><span class="line">  <span class="attr">"data"</span>: <span class="string">""</span>, </span><br><span class="line">  <span class="attr">"files"</span>: &#123;&#125;, </span><br><span class="line">  <span class="attr">"form"</span>: &#123;</span><br><span class="line">    key": "value"</span><br><span class="line">  &#125;, </span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><p>网站使用 cookie 来跟踪用户是否已登陆的状态信息，当网站验证了登陆权证后，会将一些信息保存在浏览器的 cookie 中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(<span class="string">"https://tyrotalk.com"</span>)</span><br><span class="line">print(r.cookies.get_dict())</span><br></pre></td></tr></table></figure><p>返回的 cookie 的类型为：<code>RequestsCookieJar</code>，通过 get_dict() 方法将 cookie 转换成字典格式。</p><h2 id="传递-cookies-参数"><a href="#传递-cookies-参数" class="headerlink" title="传递 cookies 参数"></a>传递 cookies 参数</h2><p>在需要 cookie 的网站中，可通过 requests 的 POST 方法或直接在浏览器中直接复制来获得 cookie 信息，然后传递给 requests 的 cookies 参数来再次访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r2 = requests.get(&quot;https://tyrotalk.com&quot;, cookies=r.cookies)</span><br></pre></td></tr></table></figure><h2 id="Session"><a href="#Session" class="headerlink" title="Session()"></a>Session()</h2><p>有时不想频繁设置 cookie ，就可以通过 requests 的 session 函数持续跟踪会话信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">session = requests.Session()</span><br><span class="line">session.get(&apos;https://tyrotalk.com&apos;)</span><br><span class="line">r = session.get(&apos;https://tyrotalk.com&apos;)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python 库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python 库 </tag>
            
            <tag> Requests </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>BeautifulSoup 使用</title>
      <link href="/2017/07/07/BeautifulSoup-%E4%BD%BF%E7%94%A8.html/"/>
      <url>/2017/07/07/BeautifulSoup-%E4%BD%BF%E7%94%A8.html/</url>
      <content type="html"><![CDATA[<p>Beautiful Soup是一个Python包，功能包括解析HTML、XML文档、修复含有未闭合标签等错误的文档，通过定位 HTML 标签来格式化和组织复杂的网络信息。<br><a id="more"></a></p><h1 id="创建-BeautifulSoup-对象"><a href="#创建-BeautifulSoup-对象" class="headerlink" title="创建 BeautifulSoup 对象"></a>创建 BeautifulSoup 对象</h1><ol><li><p>获取网页源代码：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line">html = urlopen(<span class="string">'http://pythonscraping.com/pages/page3.html'</span>)</span><br></pre></td></tr></table></figure></li><li><p>使用解析器解析网页源代码生成 BeautifulSoup 对象：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="comment"># soup = BeautifulSoup(网页源代码, '解析器')</span></span><br><span class="line">soup = BeautifulSoup(html.read(), <span class="string">'html.parser'</span>)</span><br></pre></td></tr></table></figure></li></ol><p>为方便演示，网页源代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        img &#123;</span></span><br><span class="line"><span class="undefined">            width: 75px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        table &#123;</span></span><br><span class="line"><span class="undefined">            width: 50%;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">       td &#123;</span></span><br><span class="line"><span class="undefined">            margin: 10px;</span></span><br><span class="line"><span class="undefined">            padding: 10px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">       .wrapper &#123;</span></span><br><span class="line"><span class="undefined">            width: 800px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">       .excitingNote &#123;</span></span><br><span class="line"><span class="undefined">            font-style: italic;</span></span><br><span class="line"><span class="undefined">            font-weight: bold;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../img/gifts/logo.jpg"</span> <span class="attr">style</span>=<span class="string">"float:left;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Totally Normal Gifts<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span>Here is a collection of totally normal, totally reasonable gifts that your friends are sure to</span><br><span class="line">        love! Our collection is</span><br><span class="line">        hand-curated by well-paid, free-range Tibetan monks.<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            We haven't figured out how to make online shopping carts yet, but you can send us a check to:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            123 Main St.<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            Abuja, Nigeria</span><br><span class="line">            We will then send your totally amazing gift, pronto! Please include an extra $5.00 for gift wrapping.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"giftList"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Item Title<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Description<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Cost<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Image<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"gift"</span> <span class="attr">id</span>=<span class="string">"gift1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Vegetable Basket<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>This vegetable basket is the perfect gift for your health conscious (or overweight) friends!</span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"excitingNote"</span>&gt;</span>Now with super-colorful bell peppers!<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$15.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../img/gifts/img1.jpg"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"gift"</span> <span class="attr">id</span>=<span class="string">"gift2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Russian Nesting Dolls<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Hand-painted by trained monkeys, these exquisite dolls are priceless! And by "priceless," we mean</span><br><span class="line">                "extremely expensive"! <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"excitingNote"</span>&gt;</span>8 entire dolls per set! Octuple the presents!<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$10,000.52<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../img/gifts/img2.jpg"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"gift"</span> <span class="attr">id</span>=<span class="string">"gift3"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span> Fish Painting<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>If something seems fishy about this painting, it's because it's a fish! <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"excitingNote"</span>&gt;</span>Also hand-painted by trained monkeys!<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$10,005.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../img/gifts/img3.jpg"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"gift"</span> <span class="attr">id</span>=<span class="string">"gift4"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Dead Parrot<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>This is an ex-parrot! <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"excitingNote"</span>&gt;</span>Or maybe he's only resting?<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$0.50<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../img/gifts/img4.jpg"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"gift"</span> <span class="attr">id</span>=<span class="string">"gift5"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Mystery Box<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span> If you love suprises, this mystery box is for you! Do not place on light-colored surfaces. May cause oil</span><br><span class="line">                staining. <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"excitingNote"</span>&gt;</span>Keep your friends guessing!<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$1.50<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../img/gifts/img6.jpg"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">    © Totally Normal Gifts, Inc. <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    +234 (617) 863-0736</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="常见-BeautifulSoup-对象"><a href="#常见-BeautifulSoup-对象" class="headerlink" title="常见 BeautifulSoup 对象"></a>常见 BeautifulSoup 对象</h1><ol><li>BeautifulSoup 对象：如上面的 <code>soup</code>。</li><li>标签 Tag 对象：Tag 为 html 中的一个标签，BeautifulSoup 对象获取 Tag 具体内容的格式为 <code>soup.tag</code>。如 <code>soup.div.h1</code> 将获取 h1 标签下所有内容，包括标签本身。</li><li>NavigableString 对象：标签内部的文字内容，可使用 <code>.string</code> 来调用，如 <code>soup.div.h1.string</code> 将获取 h1 标签内部的内容。</li><li>Comment 对象，查找 html 文档的注释内容（&lt;!– 注释 –>)。</li></ol><h1 id="find-和-find-all"><a href="#find-和-find-all" class="headerlink" title="find() 和 find_all()"></a>find() 和 find_all()</h1><p>find() 和 find_all() 算是 BeautifulSoup 中最常用的两个函数了，其通过标签的不同属性查找需要的单个标签和标签组。两个函数的定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find(name, attrs, recursive, text, **kwargs)</span><br><span class="line">find_all(name, attrs, recursive, text, limit, **kwargs)</span><br></pre></td></tr></table></figure><ol><li>name：一个标签名称或多个标签名称组成的集合；</li><li>attrs：一个标签的多个属性和对应的属性值，用字典表示，如 <code>soup.find_all(&#39;div&#39;, {&#39;id&#39;: &#39;footer&#39;})</code>；</li><li>recursive：布尔变量，为 True 时查找标签参数下的所有后代标签，为 False 时只查找标签参数下的子标签，默认为 True；</li><li>text：标签的文本内容匹配，如 <code>soup.find_all(text=&quot;Mystery Box&quot;)</code>；</li><li>limit：范围限制，适用于find_all()，limit=1 时等价于 find()；</li><li><p>kwargs：关键字参数，指定标签具体的属性，如 <code>soup.find_all(id=&#39;gift1&#39;)</code>；</p><blockquote><p>注意：当关键字为 class 时，因为 class 为 Python 的保留字，直接使用可能出现错误，可在 class 后加一个下划线（class_）或使用 attrs 方式。</p></blockquote></li></ol><h1 id="导航树"><a href="#导航树" class="headerlink" title="导航树"></a>导航树</h1><p>Html 页面可以看成一棵树，可以通过标签在树中的位置来查找标签，即为导航树。</p><h2 id="子标签和后代标签"><a href="#子标签和后代标签" class="headerlink" title="子标签和后代标签"></a>子标签和后代标签</h2><ol><li>子标签：父标签的下一级标签，使用 <code>children</code> 函数；</li><li>后代标签：父标签下所有级别的标签，使用 <code>descendants</code> 函数。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印 table 下每个 &lt;tr&gt; 标签</span></span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> soup.find(<span class="string">'table'</span>, &#123;<span class="string">'id'</span>: <span class="string">'giftList'</span>&#125;).children:</span><br><span class="line">print(child)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印 table 下所有标签，包括 &lt;img&gt;、&lt;span&gt;、&lt;td&gt;等</span></span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> soup.find(<span class="string">'table'</span>, &#123;<span class="string">'id'</span>: <span class="string">'giftList'</span>&#125;).descendants:</span><br><span class="line">print(child)</span><br></pre></td></tr></table></figure><h2 id="兄弟标签"><a href="#兄弟标签" class="headerlink" title="兄弟标签"></a>兄弟标签</h2><ol><li>处理标签后面的兄弟标签：<code>next_siblings</code>、<code>next_sibling</code>；</li><li>处理标签前面的兄弟标签：<code>previous_siblings</code>、<code>previous_sibling</code>。</li></ol><p>前者返回一组标签，后者为返回一个标签。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印 table 下第一个 tr 标签后面的所有兄弟标签</span></span><br><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.find(<span class="string">'table'</span>, &#123;<span class="string">'id'</span>: <span class="string">'giftList'</span>&#125;).tr.next_siblings:</span><br><span class="line">    print(sibling)</span><br></pre></td></tr></table></figure><h2 id="父标签"><a href="#父标签" class="headerlink" title="父标签"></a>父标签</h2><p>父标签查找函数：<code>parents</code>、<code>patent</code>，前者返回一组标签，后者为返回一个标签。</p><h1 id="get-text-和-attrs"><a href="#get-text-和-attrs" class="headerlink" title="get_text() 和 attrs"></a>get_text() 和 attrs</h1><p>标签中含有标签属性和内容文本，可通过 get_text() 和 attrs 获取。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(soup.find(<span class="string">'tr'</span>, &#123;<span class="string">'id'</span>: <span class="string">'gift1'</span>&#125;).td.get_text())</span><br><span class="line"><span class="comment"># 打印 ‘Vegetable Basket’</span></span><br><span class="line"></span><br><span class="line">print(soup.find(<span class="string">'div'</span>, &#123;<span class="string">'id'</span>: <span class="string">'content'</span>&#125;).attrs[<span class="string">'id'</span>])</span><br><span class="line"><span class="comment"># 打印 ‘content'</span></span><br></pre></td></tr></table></figure><h1 id="使用正则"><a href="#使用正则" class="headerlink" title="使用正则"></a>使用正则</h1><p>有时通过标签属性值查找多个标签时，这些属性值并不相同但具有类似规律，此时就可以使用正则来匹配了。举例说明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">images = soup.find_all(<span class="string">'img'</span>, &#123;<span class="string">'src'</span>: re.compile(<span class="string">r'../img/gifts/img\d+.jpg'</span>)&#125;)</span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> images:</span><br><span class="line">print(image)</span><br></pre></td></tr></table></figure><p>compile 函数生成一个正则表达式对象，匹配所有含有图片地址的 img 标签，输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"../img/gifts/img1.jpg"</span>/&gt;</span><br><span class="line">&lt;img src=<span class="string">"../img/gifts/img2.jpg"</span>/&gt;</span><br><span class="line">&lt;img src=<span class="string">"../img/gifts/img3.jpg"</span>/&gt;</span><br><span class="line">&lt;img src=<span class="string">"../img/gifts/img4.jpg"</span>/&gt;</span><br><span class="line">&lt;img src=<span class="string">"../img/gifts/img6.jpg"</span>/&gt;</span><br></pre></td></tr></table></figure><h1 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h1><p>BeautifulSoup 允许在 find_all() 中使用函数作为参数，但这样的函数必须以标签作为参数并且返回布尔值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> soup.find_all(<span class="keyword">lambda</span> tag: len(tag.attrs) == <span class="number">2</span>):</span><br><span class="line">    print(t)</span><br></pre></td></tr></table></figure><p>上面代码返回所有属性数量为2的标签。</p><h1 id="CSS-选择器"><a href="#CSS-选择器" class="headerlink" title="CSS 选择器"></a>CSS 选择器</h1><ol><li><p>通过标签名查找：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.select(&apos;img&apos;)</span><br></pre></td></tr></table></figure></li><li><p>通过 class 查找：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.select(<span class="string">'.gift'</span>)</span><br></pre></td></tr></table></figure></li><li><p>通过标 id 查找：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.select(<span class="string">'#footer'</span>)</span><br></pre></td></tr></table></figure></li><li><p>查找子标签：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.select(&apos;body &gt; div &gt; h1&apos;)</span><br></pre></td></tr></table></figure></li><li><p>查找后代标签，查找 body 标签中的所有 h1 标签：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.select(<span class="string">'body h1'</span>)</span><br></pre></td></tr></table></figure></li><li><p>通过标签属性值查找：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 标签 div、属性 id、id 的属性值为 content</span></span><br><span class="line">soup.select(<span class="string">'div[id="content"]'</span>)</span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content>
      
      <categories>
          
          <category> Python 库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BeautifulSoup </tag>
            
            <tag> python 库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法：无向图</title>
      <link href="/2017/06/30/%E7%AE%97%E6%B3%95%EF%BC%9A%E6%97%A0%E5%90%91%E5%9B%BE.html/"/>
      <url>/2017/06/30/%E7%AE%97%E6%B3%95%EF%BC%9A%E6%97%A0%E5%90%91%E5%9B%BE.html/</url>
      <content type="html"><![CDATA[<p>图是由一组顶点和一组能够将两个顶点相连的边组成的。边有方向的图称为有向图，没有方向的图称为无向图。<br><a id="more"></a></p><blockquote><p>本文主要实现了无向图的相关结构。</p></blockquote><h1 id="无向图基本结构"><a href="#无向图基本结构" class="headerlink" title="无向图基本结构"></a>无向图基本结构</h1><ol><li>创建一个含有 v 个节点但不含边的图；</li><li>返回节点个数；</li><li>返回边数；</li><li>向图中添加一条边；</li><li>验证图中是否有一条边 v-w；</li><li>返回图中一个节点的所有邻边；</li><li>图的字符显示。</li></ol><h1 id="图的表示"><a href="#图的表示" class="headerlink" title="图的表示"></a>图的表示</h1><p>图可使用邻接矩阵和邻接表表示。根据图的密度（指已经连接的节点对占所有可能被连接的节点的比例）不同，一般稠密图使用邻接矩阵表示更好，稀疏图使用邻接表表示更好。</p><ol><li><p>邻接矩阵</p><p>  使用一个 n 乘 n 的布尔矩阵, 当节点 v 和节点 w 之间有相连接的边时，定义 v 行 w 列的元素值为 true （图为无向图时 w 行 v 列的元素值也为 true）否则为false。</p></li><li><p>邻接表</p><p> 使用一个以节点为索引的序列数组，其中每个元素都是和该节点相邻的节点列表。</p></li></ol><h2 id="Python-实现"><a href="#Python-实现" class="headerlink" title="Python 实现"></a>Python 实现</h2><h3 id="邻接矩阵表示"><a href="#邻接矩阵表示" class="headerlink" title="邻接矩阵表示"></a>邻接矩阵表示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DenseGraph</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n, directed)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        g 初始化为 n*n 的布尔矩阵, 每一个 g[i][j] 均为 False, 表示没有任何边</span></span><br><span class="line"><span class="string">        :param n: 节点数</span></span><br><span class="line"><span class="string">        :param directed: True 表示有向图，False 表示无向图</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">assert</span> n &gt; <span class="number">0</span></span><br><span class="line">        self.n = n</span><br><span class="line">        self.m = <span class="number">0</span>  <span class="comment"># 边数，初始化没有任何边</span></span><br><span class="line">        self.directed = directed</span><br><span class="line">        self.g = [[<span class="keyword">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_v</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""返回节点个数"""</span></span><br><span class="line">        <span class="keyword">return</span> self.n</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_e</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""返回边数"""</span></span><br><span class="line">        <span class="keyword">return</span> self.m</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_edge</span><span class="params">(self, v, w)</span>:</span></span><br><span class="line">        <span class="string">"""向图中添加一个边"""</span></span><br><span class="line">        <span class="keyword">assert</span> v <span class="keyword">in</span> range(self.n)</span><br><span class="line">        <span class="keyword">assert</span> w <span class="keyword">in</span> range(self.n)</span><br><span class="line">        <span class="keyword">if</span> self.has_edge(v, w):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        self.g[v][w] = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果为无向图</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.directed:</span><br><span class="line">            self.g[w][v] = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">        self.m += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_edge</span><span class="params">(self, v, w)</span>:</span></span><br><span class="line">        <span class="string">"""验证图中是否有从 v 到 w 的边"""</span></span><br><span class="line">        <span class="keyword">assert</span> v <span class="keyword">in</span> range(self.n)</span><br><span class="line">        <span class="keyword">assert</span> w <span class="keyword">in</span> range(self.n)</span><br><span class="line">        <span class="keyword">return</span> self.g[v][w]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">adj</span><span class="params">(self, v)</span>:</span></span><br><span class="line">        <span class="string">"""返回图中一个节点的所有邻边"""</span></span><br><span class="line">        <span class="keyword">return</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> range(self.n) <span class="keyword">if</span> self.g[v][i]]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""显示图的信息"""</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.g:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">                print(j, end=<span class="string">'\t'</span>)</span><br><span class="line">            print()</span><br></pre></td></tr></table></figure><h3 id="邻接表表示"><a href="#邻接表表示" class="headerlink" title="邻接表表示"></a>邻接表表示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SparseGraph</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n, directed)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        g 初始化为 n 个空的 list, 表示每一个 g[i] 都为空, 即没有任何边</span></span><br><span class="line"><span class="string">        :param n: 节点数</span></span><br><span class="line"><span class="string">        :param directed: True 表示有向图，False 表示无向图</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">assert</span> n &gt; <span class="number">0</span></span><br><span class="line">        self.n = n</span><br><span class="line">        self.m = <span class="number">0</span>  <span class="comment"># 边数，初始化没有任何边</span></span><br><span class="line">        self.directed = directed</span><br><span class="line">        self.g = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_v</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""返回节点个数"""</span></span><br><span class="line">        <span class="keyword">return</span> self.n</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_e</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""返回边数"""</span></span><br><span class="line">        <span class="keyword">return</span> self.m</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_edge</span><span class="params">(self, v, w)</span>:</span></span><br><span class="line">        <span class="string">"""向图中添加一个边"""</span></span><br><span class="line">        <span class="keyword">assert</span> v <span class="keyword">in</span> range(self.n)</span><br><span class="line">        <span class="keyword">assert</span> w <span class="keyword">in</span> range(self.n)</span><br><span class="line">        self.g[v].append(w)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> v != w <span class="keyword">and</span> <span class="keyword">not</span> self.directed:</span><br><span class="line">            self.g[w].append(v)</span><br><span class="line"></span><br><span class="line">        self.m += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_edge</span><span class="params">(self, v, w)</span>:</span></span><br><span class="line">        <span class="string">"""验证图中是否有从 v 到 w 的边"""</span></span><br><span class="line">        <span class="keyword">assert</span> v <span class="keyword">in</span> range(self.n)</span><br><span class="line">        <span class="keyword">assert</span> w <span class="keyword">in</span> range(self.n)</span><br><span class="line">        <span class="keyword">if</span> w <span class="keyword">in</span> self.g[v]:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">adj</span><span class="params">(self, v)</span>:</span></span><br><span class="line">        <span class="string">"""返回图中一个节点的所有邻边"""</span></span><br><span class="line">        <span class="keyword">return</span> self.g[v]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""显示图的信息"""</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.g:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">                print(j, end=<span class="string">'\t'</span>)</span><br><span class="line">            print()</span><br></pre></td></tr></table></figure><h2 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h2><h3 id="邻接矩阵表示-1"><a href="#邻接矩阵表示-1" class="headerlink" title="邻接矩阵表示"></a>邻接矩阵表示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DenseGraph</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;  <span class="comment">// 节点数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> m;  <span class="comment">// 边数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> directed;  <span class="comment">// 是否为有向图</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[][] g;  <span class="comment">// 图的具体数据</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DenseGraph</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">boolean</span> directed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">        <span class="keyword">this</span>.m = <span class="number">0</span>;  <span class="comment">// 初始化没有任何边</span></span><br><span class="line">        <span class="keyword">this</span>.directed = directed;  <span class="comment">// true 表示有向图，false 表示无向图</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// g 初始化为 n*n 的布尔矩阵, 每一个 g[i][j] 均为 false, 表示没有任何边</span></span><br><span class="line">        <span class="comment">// false为 boolean型变量的默认值</span></span><br><span class="line">        <span class="keyword">this</span>.g = <span class="keyword">new</span> <span class="keyword">boolean</span>[n][n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回节点个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回边数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getE</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向图中添加一个边</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> v &gt;= <span class="number">0</span> &amp;&amp; v &lt; n;</span><br><span class="line">        <span class="keyword">assert</span> w &gt;= <span class="number">0</span> &amp;&amp; w &lt; n;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hasEdge(v, w)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        g[v][w] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果为无向图</span></span><br><span class="line">        <span class="keyword">if</span> (!directed) g[w][v] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        m ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证图中是否有从 v 到 w 的边</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasEdge</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> v &gt;= <span class="number">0</span> &amp;&amp; v &lt; n;</span><br><span class="line">        <span class="keyword">assert</span> w &gt;= <span class="number">0</span> &amp;&amp; w &lt; n;</span><br><span class="line">        <span class="keyword">return</span> g[v][w];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回图中一个节点的所有邻边</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Integer&gt; <span class="title">adj</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> v &gt;= <span class="number">0</span> &amp;&amp; v &lt; n;</span><br><span class="line">        Vector&lt;Integer&gt; adjV = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">if</span> (g[v][i])</span><br><span class="line">                adjV.add(i);</span><br><span class="line">        <span class="keyword">return</span> adjV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示图的信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                System.out.print(g[i][j] + <span class="string">"\t"</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="邻接表表示-1"><a href="#邻接表表示-1" class="headerlink" title="邻接表表示"></a>邻接表表示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparseGraph</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;  <span class="comment">// 节点数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> m;  <span class="comment">// 边数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> directed;  <span class="comment">// 是否为有向图</span></span><br><span class="line">    <span class="keyword">private</span> Vector&lt;Integer&gt;[] g;  <span class="comment">// 图的具体数据</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SparseGraph</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">boolean</span> directed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">        <span class="keyword">this</span>.m = <span class="number">0</span>;  <span class="comment">// 初始化没有任何边</span></span><br><span class="line">        <span class="keyword">this</span>.directed = directed;  <span class="comment">// true 表示有向图，false 表示无向图</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// g 初始化为 n 个空的 vector, 表示每一个 g[i] 都为空, 即没有任何边</span></span><br><span class="line">        <span class="keyword">this</span>.g = (Vector&lt;Integer&gt;[]) <span class="keyword">new</span> Vector[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            g[i] = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回节点个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回边数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getE</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向图中添加一个边</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> v &gt;= <span class="number">0</span> &amp;&amp; v &lt; n;</span><br><span class="line">        <span class="keyword">assert</span> w &gt;= <span class="number">0</span> &amp;&amp; w &lt; n;</span><br><span class="line">        g[v].add(w);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果为无向图</span></span><br><span class="line">        <span class="keyword">if</span> (v != w &amp;&amp; !directed)</span><br><span class="line">            g[w].add(v);</span><br><span class="line"></span><br><span class="line">        m ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证图中是否有从 v 到 w 的边</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasEdge</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> v &gt;= <span class="number">0</span> &amp;&amp; v &lt; n;</span><br><span class="line">        <span class="keyword">assert</span> w &gt;= <span class="number">0</span> &amp;&amp; w &lt; n;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g[v].size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (g[v].elementAt(i) == w)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回图中一个节点的所有邻边</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Integer&gt; <span class="title">adj</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> v &gt;= <span class="number">0</span> &amp;&amp; v &lt; n;</span><br><span class="line">        <span class="keyword">return</span> g[v];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示图的信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; g[i].size(); j++)</span><br><span class="line">                System.out.print(g[i].elementAt(j) + <span class="string">"\t"</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h1><p>从图的某个顶点出发，访问此顶点，然后选择一个与顶点相邻且没被访问过的节点访问，再从此节点出发选择一个与其相邻且未被访问的节点进行访问，依次继续。如果当前被访问过的节点的所有邻接节点都已被访问，则退回到已被访问的节点序列中最后一个拥有未被访问的相邻节点的节点，再出发按同样的方法向前遍历，直到图中所有节点都被访问。</p><p>图的深度优先遍历的两个应用：求连通分量和寻路。</p><h2 id="连通分量"><a href="#连通分量" class="headerlink" title="连通分量"></a>连通分量</h2><p>无向图的一个极大连通子图称为一个连通分量。可以通过深度优先遍历求得联通分量。</p><h3 id="Python-实现-1"><a href="#Python-实现-1" class="headerlink" title="Python 实现"></a>Python 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Components</span>:</span></span><br><span class="line">    <span class="string">"""求无向图的连通分量"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, graph)</span>:</span></span><br><span class="line">        self.G = graph  <span class="comment">#图的引用</span></span><br><span class="line">        self.visited = [<span class="keyword">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(self.G.get_v())]  <span class="comment">#记录 dfs 的过程中节点是否被访问</span></span><br><span class="line">        self.count = <span class="number">0</span>  <span class="comment">#记录连通分量个数</span></span><br><span class="line">        self.id = [<span class="number">-1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(self.G.get_v())]  <span class="comment">#每个节点所对应的连通分量标记</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 求图的连通分量</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.G.get_v()):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.visited[i]:</span><br><span class="line">                self.dfs(i)</span><br><span class="line">                self.count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, v)</span>:</span></span><br><span class="line">        <span class="string">"""图的深度优先遍历"""</span></span><br><span class="line">        self.visited[v] = <span class="keyword">True</span></span><br><span class="line">        self.id[v] = self.count</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.G.adj(v):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.visited[i]:</span><br><span class="line">                self.dfs(i)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_count</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""返回图的连通分量个数"""</span></span><br><span class="line">        <span class="keyword">return</span> self.count</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_connected</span><span class="params">(self, v, w)</span>:</span></span><br><span class="line">        <span class="string">"""查询点 v 和点 w 是否连通"""</span></span><br><span class="line">        <span class="keyword">assert</span> v <span class="keyword">in</span> range(self.G.get_v())</span><br><span class="line">        <span class="keyword">assert</span> w <span class="keyword">in</span> range(self.G.get_v())</span><br><span class="line">        <span class="keyword">return</span> self.id[v] == self.id[w]</span><br></pre></td></tr></table></figure><h3 id="Java-实现-1"><a href="#Java-实现-1" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Components</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Graph G;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[] visited; <span class="comment">//记录 dfs 的过程中节点是否被访问</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;  <span class="comment">//记录连通分量个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] id;  <span class="comment">//每个节点所对应的连通分量标记</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Components</span><span class="params">(Graph graph)</span> </span>&#123;</span><br><span class="line">        G = graph;</span><br><span class="line">        visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[G.getV()];</span><br><span class="line">        id = <span class="keyword">new</span> <span class="keyword">int</span>[G.getV()];</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.getV(); i++) &#123;</span><br><span class="line">            visited[i] = <span class="keyword">false</span>;</span><br><span class="line">            id[i] = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 求图的连通分量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.getV(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[i]) &#123;</span><br><span class="line">                dfs(i);</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 图的深度优先遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        visited[v] = <span class="keyword">true</span>;</span><br><span class="line">        id[v] = count;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i: G.adj(v)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[i])</span><br><span class="line">                dfs(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回图的连通分量个数"</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询点 v 和点 w 是否连通</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isConnected</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> v &gt;= <span class="number">0</span> &amp;&amp; v &lt; G.getV();</span><br><span class="line">        <span class="keyword">assert</span> w &gt;= <span class="number">0</span> &amp;&amp; w &lt; G.getV();</span><br><span class="line">        <span class="keyword">return</span> id[v] == id[w];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Graph 为实现的一个图的接口。</p><h2 id="寻路"><a href="#寻路" class="headerlink" title="寻路"></a>寻路</h2><p>图的另一个应用即为寻找一个节点到起点的路径。</p><h3 id="Python-实现-2"><a href="#Python-实现-2" class="headerlink" title="Python 实现"></a>Python 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Path</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, graph, s)</span>:</span></span><br><span class="line">        <span class="string">"""寻路算法, 寻找图 graph 从 s 点到其他点的路径"""</span></span><br><span class="line">        self.G = graph  <span class="comment">#图的引用</span></span><br><span class="line">        <span class="keyword">assert</span> s <span class="keyword">in</span> range(self.G.get_v())</span><br><span class="line">        self.visited = [<span class="keyword">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(self.G.get_v())]  <span class="comment">#记录 dfs 的过程中节点是否被访问</span></span><br><span class="line">        self.s = s  <span class="comment">#起始点</span></span><br><span class="line">        self._from = [<span class="number">-1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(self.G.get_v())]  <span class="comment"># 记录路径, _from[i]表示查找的路径上i的上一个节点</span></span><br><span class="line"></span><br><span class="line">        self.dfs(s)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, v)</span>:</span></span><br><span class="line">        <span class="string">"""图的深度优先遍历"""</span></span><br><span class="line">        self.visited[v] = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.G.adj(v):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.visited[i]:</span><br><span class="line">                self._from[i] = v</span><br><span class="line">                self.dfs(i)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">path</span><span class="params">(self, w)</span>:</span></span><br><span class="line">        <span class="string">"""查询从 s 点到 w 点的路径, 存放在 vec 中"""</span></span><br><span class="line">        <span class="keyword">assert</span> self.has_path(w)</span><br><span class="line">        vec = []</span><br><span class="line">        p = w</span><br><span class="line">        <span class="keyword">while</span> p != <span class="number">-1</span>:</span><br><span class="line">            vec.append(p)</span><br><span class="line">            p = self._from[p]</span><br><span class="line">        <span class="keyword">return</span> vec[::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_path</span><span class="params">(self, w)</span>:</span></span><br><span class="line">        <span class="string">"""查询从 s 点到 w 点是否有路径"""</span></span><br><span class="line">        <span class="keyword">assert</span> w <span class="keyword">in</span> range(self.G.get_v())</span><br><span class="line">        <span class="keyword">return</span> self.visited[w]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_path</span><span class="params">(self, w)</span>:</span></span><br><span class="line">        <span class="string">"""打印出从 s 点到 w 点的路径"""</span></span><br><span class="line">        <span class="keyword">assert</span> self.has_path(w)</span><br><span class="line">        vec = self.path(w)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> vec:</span><br><span class="line">            <span class="keyword">if</span> i == vec[<span class="number">-1</span>]:</span><br><span class="line">                print(i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(i, end=<span class="string">'-&gt;'</span>)</span><br></pre></td></tr></table></figure><h3 id="Java-实现-2"><a href="#Java-实现-2" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Path</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Graph G;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> s;  <span class="comment">//起始点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[] visited;  <span class="comment">//记录dfs的过程中节点是否被访问</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] from;  <span class="comment">//记录路径, from[i]表示查找的路径上i的上一个节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻路算法, 寻找图 graph 从 s 点到其他点的路径</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Path</span><span class="params">(Graph graph, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">        G = graph;</span><br><span class="line">        <span class="keyword">assert</span> s &gt;= <span class="number">0</span> &amp;&amp; s &lt; G.getV();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">        visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[G.getV()];</span><br><span class="line">        from = <span class="keyword">new</span> <span class="keyword">int</span>[G.getV()];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.getV(); i++) &#123;</span><br><span class="line">            visited[i] = <span class="keyword">false</span>;</span><br><span class="line">            from[i] = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dfs(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 图的深度优先遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        visited[v] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i: G.adj(v)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[i]) &#123;</span><br><span class="line">                from[i] = v;</span><br><span class="line">                dfs(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询从 s 点到 w 点是否有路径</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPath</span><span class="params">(<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> w &gt;= <span class="number">0</span> &amp;&amp; w &lt; G.getV();</span><br><span class="line">        <span class="keyword">return</span> visited[w];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询从 s 点到 w 点的路径, 存放在 vec 中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Vector&lt;Integer&gt; <span class="title">path</span><span class="params">(<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">hasPath</span><span class="params">(w)</span></span>;</span><br><span class="line"></span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> p = w;</span><br><span class="line">        <span class="keyword">while</span> (p != -<span class="number">1</span>) &#123;</span><br><span class="line">            stack.push(p);</span><br><span class="line">            p = from[p];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Vector&lt;Integer&gt; res = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty())</span><br><span class="line">            res.add(stack.pop());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印出从 s 点到 w 点的路径</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showPath</span><span class="params">(<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">hasPath</span><span class="params">(w)</span></span>;</span><br><span class="line">        Vector&lt;Integer&gt; vec = path(w);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i: vec) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == vec.lastElement())</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            <span class="keyword">else</span> System.out.print(i + <span class="string">"-&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h1><p>首先访问起点，并将其标记为已访问过，接着访问起点的所有未被访问过的邻接点，并均标记已访问过，然后再按照遍历起点的邻接点的次序，访问每一个节的所有未被访问过的邻接点，并均标记为已访问过，依次类推，直到图中所有和起点有路径相通的顶点都被访问过为止。</p><h1 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h1><p>广度优先遍历也实现了一个节点到起点的最短路径。</p><h2 id="Python3-实现"><a href="#Python3-实现" class="headerlink" title="Python3 实现"></a>Python3 实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">import queue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ShortestPath:</span><br><span class="line">    def __init__(self, graph, s):</span><br><span class="line">        &quot;&quot;&quot;寻路算法, 寻找图 graph 从 s 点到其他点的路径&quot;&quot;&quot;</span><br><span class="line">        self.G = graph  #图的引用</span><br><span class="line">        assert s in range(self.G.get_v())</span><br><span class="line">        self.visited = [False for _ in range(self.G.get_v())]  #记录 dfs 的过程中节点是否被访问</span><br><span class="line">        self.s = s  #起始点</span><br><span class="line">        self._from = [-1 for _ in range(self.G.get_v())]  # 记录路径, _from[i]表示查找的路径上i的上一个节点</span><br><span class="line">        self._ord = [-1 for _ in range(self.G.get_v())]  # 记录路径中节点的次序。_ord[i]表示i节点在路径中的次序。</span><br><span class="line"></span><br><span class="line">        # 无向图最短路径算法, 从 s 开始广度优先遍历整张图</span><br><span class="line">        q = queue.Queue()</span><br><span class="line">        q.put(s)</span><br><span class="line">        self.visited[s] = True</span><br><span class="line">        self._ord[s] = 0</span><br><span class="line">        while not q.empty():</span><br><span class="line">            v = q.get()</span><br><span class="line">            for i in self.G.adj(v):</span><br><span class="line">                if not self.visited[i]:</span><br><span class="line">                    q.put(i)</span><br><span class="line">                    self.visited[i] = True</span><br><span class="line">                    self._from[i] = v</span><br><span class="line">                    self._ord[i] = self._ord[v] + 1</span><br><span class="line"></span><br><span class="line">    def path(self, w):</span><br><span class="line">        &quot;&quot;&quot;查询从 s 点到 w 点的路径, 存放在 vec 中&quot;&quot;&quot;</span><br><span class="line">        assert self.has_path(w)</span><br><span class="line">        vec = []</span><br><span class="line">        p = w</span><br><span class="line">        while p != -1:</span><br><span class="line">            vec.append(p)</span><br><span class="line">            p = self._from[p]</span><br><span class="line">        return vec[::-1]</span><br><span class="line"></span><br><span class="line">    def has_path(self, w):</span><br><span class="line">        &quot;&quot;&quot;查询从 s 点到 w 点是否有路径&quot;&quot;&quot;</span><br><span class="line">        assert w in range(self.G.get_v())</span><br><span class="line">        return self.visited[w]</span><br><span class="line"></span><br><span class="line">    def show_path(self, w):</span><br><span class="line">        &quot;&quot;&quot;打印出从 s 点到 w 点的路径&quot;&quot;&quot;</span><br><span class="line">        assert self.has_path(w)</span><br><span class="line">        vec = self.path(w)</span><br><span class="line">        for i in vec:</span><br><span class="line">            if i == vec[-1]:</span><br><span class="line">                print(i)</span><br><span class="line">            else:</span><br><span class="line">                print(i, end=&apos;-&gt;&apos;)</span><br><span class="line"></span><br><span class="line">    def length(self, w):</span><br><span class="line">        &quot;&quot;&quot;查看从 s 点到 w 点的最短路径长度。若从 s 到 w 不可达，返回-1&quot;&quot;&quot;</span><br><span class="line">        assert w in range(self.G.get_v())</span><br><span class="line">        return self._ord[w]</span><br></pre></td></tr></table></figure><h2 id="Java-实现-3"><a href="#Java-实现-3" class="headerlink" title="Java 实现"></a>Java 实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">import java.util.LinkedList;</span><br><span class="line">import java.util.Stack;</span><br><span class="line">import java.util.Vector;</span><br><span class="line"></span><br><span class="line">public class ShortestPath &#123;</span><br><span class="line">    private Graph G;</span><br><span class="line">    private int s;  //起始点</span><br><span class="line">    private boolean[] visited;  //记录dfs的过程中节点是否被访问</span><br><span class="line">    private int[] from;  //记录路径, from[i]表示查找的路径上i的上一个节点</span><br><span class="line">    private int[] ord;  //记录路径中节点的次序。ord[i]表示i节点在路径中的次序。</span><br><span class="line"></span><br><span class="line">    // 寻路算法, 寻找图 graph 从 s 点到其他点的路径</span><br><span class="line">    public ShortestPath(Graph graph, int s) &#123;</span><br><span class="line">        G = graph;</span><br><span class="line">        assert s &gt;= 0 &amp;&amp; s &lt; G.getV();</span><br><span class="line"></span><br><span class="line">        this.s = s;</span><br><span class="line">        visited = new boolean[G.getV()];</span><br><span class="line">        from = new int[G.getV()];</span><br><span class="line">        ord = new int[G.getV()];</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; G.getV(); i++) &#123;</span><br><span class="line">            visited[i] = false;</span><br><span class="line">            from[i] = -1;</span><br><span class="line">            ord[i] = -1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 无向图最短路径算法, 从 s 开始广度优先遍历整张图</span><br><span class="line">        LinkedList&lt;Integer&gt; q = new LinkedList&lt;&gt;();</span><br><span class="line">        q.push(s);</span><br><span class="line">        visited[s] = true;</span><br><span class="line">        ord[s] = 0;</span><br><span class="line">        while (!q.isEmpty()) &#123;</span><br><span class="line">            int v = q.pop();</span><br><span class="line">            for (int i: G.adj(v)) &#123;</span><br><span class="line">                if (!visited[i]) &#123;</span><br><span class="line">                    q.push(i);</span><br><span class="line">                    visited[i] = true;</span><br><span class="line">                    from[i] = v;</span><br><span class="line">                    ord[i] = ord[v] + 1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 查询从 s 点到 w 点是否有路径</span><br><span class="line">    public boolean hasPath(int w) &#123;</span><br><span class="line">        assert w &gt;= 0 &amp;&amp; w &lt; G.getV();</span><br><span class="line">        return visited[w];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 查询从 s 点到 w 点的路径, 存放在 vec 中</span><br><span class="line">    public Vector&lt;Integer&gt; path(int w) &#123;</span><br><span class="line">        assert hasPath(w);</span><br><span class="line"></span><br><span class="line">        Stack&lt;Integer&gt; stack = new Stack&lt;&gt;();</span><br><span class="line">        int p = w;</span><br><span class="line">        while (p != -1) &#123;</span><br><span class="line">            stack.push(p);</span><br><span class="line">            p = from[p];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Vector&lt;Integer&gt; res = new Vector&lt;&gt;();</span><br><span class="line">        while (!stack.isEmpty())</span><br><span class="line">            res.add(stack.pop());</span><br><span class="line"></span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 打印出从 s 点到 w 点的路径</span><br><span class="line">    public void showPath(int w) &#123;</span><br><span class="line">        assert hasPath(w);</span><br><span class="line">        Vector&lt;Integer&gt; vec = path(w);</span><br><span class="line">        for (int i: vec) &#123;</span><br><span class="line">            if (i == vec.lastElement())</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            else System.out.print(i + &quot;-&gt;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 查看从 s 点到 w 点的最短路径长度</span><br><span class="line">    // 若从 s 到 w 不可达，返回-1</span><br><span class="line">    public int length(int w)&#123;</span><br><span class="line">        assert w &gt;= 0 &amp;&amp; w &lt; G.getV();</span><br><span class="line">        return ord[w];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h1><table><thead><tr><th style="text-align:center"><strong>无向图</strong></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">邻接矩阵表示</td><td style="text-align:center"><a href="https://github.com/tyrotalk/Algorithms-in-Action/blob/master/06-Graph_Basics/Code-Python/dense_graph.py" target="_blank" rel="noopener">Python 源码</a></td><td style="text-align:center"><a href="https://github.com/tyrotalk/Algorithms-in-Action/blob/master/06-Graph_Basics/Code-Java/DenseGraph.java" target="_blank" rel="noopener">Java 源码</a></td></tr><tr><td style="text-align:center">邻接表表示</td><td style="text-align:center"><a href="https://github.com/tyrotalk/Algorithms-in-Action/blob/master/06-Graph_Basics/Code-Python/sparse_graph.py" target="_blank" rel="noopener">Python 源码</a></td><td style="text-align:center"><a href="https://github.com/tyrotalk/Algorithms-in-Action/blob/master/06-Graph_Basics/Code-Java/SparseGraph.java" target="_blank" rel="noopener">Java 源码</a></td></tr><tr><td style="text-align:center">深度优先遍历和连通分量</td><td style="text-align:center"><a href="https://github.com/tyrotalk/Algorithms-in-Action/blob/master/06-Graph_Basics/Code-Python/components.py" target="_blank" rel="noopener">Python 源码</a></td><td style="text-align:center"><a href="https://github.com/tyrotalk/Algorithms-in-Action/blob/master/06-Graph_Basics/Code-Java/Components.java" target="_blank" rel="noopener">Java 源码</a></td></tr><tr><td style="text-align:center">深度优先遍历和寻路</td><td style="text-align:center"><a href="https://github.com/tyrotalk/Algorithms-in-Action/blob/master/06-Graph_Basics/Code-Python/path.py" target="_blank" rel="noopener">Python 源码</a></td><td style="text-align:center"><a href="https://github.com/tyrotalk/Algorithms-in-Action/blob/master/06-Graph_Basics/Code-Java/Path.java" target="_blank" rel="noopener">Java 源码</a></td></tr><tr><td style="text-align:center">广度优先遍历和最短路径</td><td style="text-align:center"><a href="https://github.com/tyrotalk/Algorithms-in-Action/blob/master/06-Graph_Basics/Code-Python/shortest_path.py" target="_blank" rel="noopener">Python 源码</a></td><td style="text-align:center"><a href="https://github.com/tyrotalk/Algorithms-in-Action/blob/master/06-Graph_Basics/Code-Java/ShortestPath.java" target="_blank" rel="noopener">Java 源码</a></td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法：二分搜索树</title>
      <link href="/2017/06/23/%E7%AE%97%E6%B3%95%EF%BC%9A%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E6%95%B0.html/"/>
      <url>/2017/06/23/%E7%AE%97%E6%B3%95%EF%BC%9A%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E6%95%B0.html/</url>
      <content type="html"><![CDATA[<p>二分查找法和二分搜索树。</p><a id="more"></a><h1 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a>二分查找法</h1><p>二分查找法在有序序列中查找某一特定元素。查找过程从序列的中间元素开始，如果中间元素正好是要查找的元素，则查找过程结束；如果某一特定元素大于中间元素，则在序列大于中间元素的那一半中查找；如果某一特定元素小于中间元素，则在序列小于中间元素的那一半中查找。而且跟开始一样从中间元素开始比较。时间复杂度为 O(logn)。<br><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/算法（四）：二分搜索树/Binary_search.png"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>在有序序列 lst 中，查找 target，如果找到 target，返回相应的索引 index，否则返回 -1。</p><p>###Python 实现<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(lst, target)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    非递归方法</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    l, r = <span class="number">0</span>, len(lst) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">        <span class="comment"># 防止整形溢出，不使用 mid = (l + r) // 2</span></span><br><span class="line">        mid = l + (r - l) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> lst[mid] == target:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">if</span> lst[mid] &gt; target:</span><br><span class="line">            r = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find2</span><span class="params">(lst, target, l, r)</span>:</span></span><br><span class="line">    <span class="string">"""递归方法"""</span></span><br><span class="line">    <span class="keyword">if</span> l &gt; r:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    mid = l + (r - l) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> lst[mid] == target:</span><br><span class="line">        <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">elif</span> lst[mid] &gt; target:</span><br><span class="line">        <span class="keyword">return</span> find2(lst, target, l, mid - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> find2(lst, target, mid + <span class="number">1</span>, r)</span><br></pre></td></tr></table></figure></p><h3 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非递归方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(Comparable[] arr, Comparable target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> r = arr.length;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="comment">// 防止整形溢出，不使用 int mid = (l + r) / 2</span></span><br><span class="line">        <span class="keyword">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[mid].compareTo(target) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">if</span> (arr[mid].compareTo(target) &gt; <span class="number">0</span>)</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">find2</span><span class="params">(Comparable[] arr, Comparable target, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (arr[mid].compareTo(target) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid].compareTo(target) &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> find2(arr, target, l, mid - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> find2(arr, target, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二分搜索树"><a href="#二分搜索树" class="headerlink" title="二分搜索树"></a>二分搜索树</h1><p>二分搜索树是一颗二叉树，其中每一个结点都含有一个键以及相关联的的值，且每个结点的键都大于其左子树中任意结点的键、小于其右子树中任意结点的键。<br><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/算法（四）：二分搜索树/binary_search_tree.png"></p><h2 id="定义二分搜索树的基本数据结构"><a href="#定义二分搜索树的基本数据结构" class="headerlink" title="定义二分搜索树的基本数据结构"></a>定义二分搜索树的基本数据结构</h2><p>本文中定义的二分搜索树包含一下内容：</p><ol><li>结点表示；</li><li>查找；</li><li>遍历</li><li>插入；</li><li>最大键和最小键；</li><li>删除。</li></ol><h2 id="结点表示"><a href="#结点表示" class="headerlink" title="结点表示"></a>结点表示</h2><p>用 <code>BST</code> 类表示二分搜索树算法，在 <code>BST</code> 中定义一个 <code>Node</code> 类表示二分搜索树上一个结点。每个节点都包含一个键、一个值、一条左链接、一条右链接和一个结点计数器。其中结点计数器 N 表示以该结点为根的子树的结点总数。</p><h3 id="Python-实现"><a href="#Python-实现" class="headerlink" title="Python 实现"></a>Python 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BST</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line">        <span class="string">"""二分搜索树上一个结点"""</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key=None, val=None, n=None)</span>:</span></span><br><span class="line">            self.key = key</span><br><span class="line">            self.val = val</span><br><span class="line">            self.left = <span class="keyword">None</span></span><br><span class="line">            self.right = <span class="keyword">None</span></span><br><span class="line">            self.N = n  <span class="comment"># 该结点为根结点的子树中结点的个数（含该结点）</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""根结点"""</span></span><br><span class="line">        self.__root = <span class="keyword">None</span></span><br></pre></td></tr></table></figure><h3 id="Java-实现-1"><a href="#Java-实现-1" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BST</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;, <span class="title">Value</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 二分搜索树的根结点</span></span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Key key; <span class="comment">// 键</span></span><br><span class="line">        <span class="keyword">private</span> Value val; <span class="comment">// 值</span></span><br><span class="line">        <span class="keyword">private</span> Node left, right; <span class="comment">// 指向子结点的链接</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> N; <span class="comment">// 该结点为根结点的子树中结点的个数（含该结点）</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Node</span><span class="params">(Key key, Value val, <span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.N = N;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>在二分搜索树中查找一个键，如果二分搜索树中含有该键的结点，就返回该键所对应的值，否则返回空。可用递归实现。</p><h3 id="Python-实现-1"><a href="#Python-实现-1" class="headerlink" title="Python 实现"></a>Python 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, key)</span>:</span></span><br><span class="line">    <span class="string">"""在二分搜索树中搜索键 key 所对应的值。如果这个值不存在, 则返回 None"""</span></span><br><span class="line">    <span class="keyword">return</span> self.__search(self.__root, key)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__search</span><span class="params">(self, node, key)</span>:</span></span><br><span class="line">    <span class="string">"""在以 node 为根结点的子树中查找并返回 key 所对应的值如果找不到返回 None"""</span></span><br><span class="line">    <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">if</span> node.key == key:</span><br><span class="line">        <span class="keyword">return</span> node.val</span><br><span class="line">    <span class="keyword">elif</span> node.key &lt; key:</span><br><span class="line">        <span class="keyword">return</span> self.__search(node.right, key)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> self.__search(node.left, key)</span><br></pre></td></tr></table></figure><h3 id="Java-实现-2"><a href="#Java-实现-2" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在二分搜索树中搜索键 key 所对应的值。如果这个值不存在, 则返回 null</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Value <span class="title">search</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> search(root, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在以 node 为根结点的子树中查找并返回 key 所对应的值</span></span><br><span class="line"><span class="comment">// 如果找不到返回 null</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Value <span class="title">search</span><span class="params">(Node node, Key key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> cmp = node.key.compareTo(key);</span><br><span class="line">    <span class="keyword">if</span> (cmp == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> node.val;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> search(node.right, key);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> search(node.left, key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>遍历二分搜索树时使用深度优先遍历和广度优先遍历。</p><h3 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h3><p>首先以一个未被访问过的结点作为起始结点，沿一条边向下遍历到末端，然后向上返回一个结点，再沿着另一条进行同样的遍历，直到所有的顶点都被访问过为止。</p><p>深度优先遍历又包括前中后序遍历：</p><ol><li>前序遍历；先访问结点本身，再遍历左结点，最后遍历右结点。</li><li>中序遍历；先遍历左结点，再访问结点本身，最后遍历右结点。</li><li>后序遍历；先遍历左结点，再遍历右结点，最后访问结点本身。</li></ol><h4 id="Python-实现-2"><a href="#Python-实现-2" class="headerlink" title="Python 实现"></a>Python 实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__pre_order</span><span class="params">(self, node)</span>:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">对以 node 为根的二分搜索树进行基于递归的前序遍历</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">    <span class="keyword">if</span> node:</span><br><span class="line">        print(node.val)</span><br><span class="line">        self.__pre_order(node.left)</span><br><span class="line">        self.__pre_order(node.right)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__in_order</span><span class="params">(self, node)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    对以 node 为根的二分搜索树进行基于递归的中序遍历</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> node:</span><br><span class="line">        self.__in_order(node.left)</span><br><span class="line">        print(node.val)</span><br><span class="line">        self.__in_order(node.right)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__post_order</span><span class="params">(self, node)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    对以 node 为根的二分搜索树进行基于递归的后序遍历</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> node:</span><br><span class="line">        self.__post_order(node.left)</span><br><span class="line">        self.__post_order(node.right)</span><br><span class="line">        print(node.val)</span><br></pre></td></tr></table></figure><h4 id="Java-实现-3"><a href="#Java-实现-3" class="headerlink" title="Java 实现"></a>Java 实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对以 node 为根的二分搜索树进行基于递归的前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.out.println(node.key);</span><br><span class="line">        preOrder(node.left);</span><br><span class="line">        preOrder(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对以 node 为根的二分搜索树进行基于递归的中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">        inOrder(node.left);</span><br><span class="line">        System.out.println(node.key);</span><br><span class="line">        inOrder(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对以 node 为根的二分搜索树进行基于递归的后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">        postOrder(node.left);</span><br><span class="line">        postOrder(node.right);</span><br><span class="line">        System.out.println(node.key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h3><p>从根节点开始，沿着树的宽度遍历树的结点。期间所有结点都会被加进一个先进先出的队列中。Python 使用 <code>queue</code>，Java 使用 <code>LinkedList</code>。</p><h4 id="Python-实现-3"><a href="#Python-实现-3" class="headerlink" title="Python 实现"></a>Python 实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">level_order</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""广度优先遍历"""</span></span><br><span class="line">    q = queue.Queue()</span><br><span class="line">    q.put(self.__root)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">        node = q.get()</span><br><span class="line">        print(node.key)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> node.left:</span><br><span class="line">        q.put(node.left)</span><br><span class="line">        <span class="keyword">if</span> node.right:</span><br><span class="line">            q.put(node.right)</span><br></pre></td></tr></table></figure><h4 id="Java-实现-4"><a href="#Java-实现-4" class="headerlink" title="Java 实现"></a>Java 实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 广度优先遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用 LinkedList 作为辅助队列</span></span><br><span class="line">    LinkedList&lt;Node&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    q.add(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">        Node node = q.remove();</span><br><span class="line">        System.out.println(node.key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="keyword">null</span>)</span><br><span class="line">            q.add(node.left);</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="keyword">null</span>)</span><br><span class="line">            q.add(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>二分搜索树的插入和查找类似：如果树是空的，就返回一个含有该键值对的新结点；如果被查找的键小于根结点的键，就继续在左子树中插入该键，否则在右子树中插入该键。并通过递归来实现二分搜索树的插入。</p><h3 id="Python-实现-4"><a href="#Python-实现-4" class="headerlink" title="Python 实现"></a>Python 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, key, val)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    向二分搜索树中插入一个新的(key, Value)数据对</span></span><br><span class="line"><span class="string">    查找 key，找到则更新它的值，否则创建一个新的结点</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    self.__root = self.__insert(self.__root, key, val)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__insert</span><span class="params">(self, node, key, val)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    如果 key 存在于 node 为根结点的子树中就更新它的值</span></span><br><span class="line"><span class="string">    不存在就将 key-value 键值对作为新结点插入到子树中</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> BST.Node(key, val, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> node.key == key:</span><br><span class="line">        node.val = val</span><br><span class="line">    <span class="keyword">if</span> node.key &lt; key:</span><br><span class="line">        node.right = self.__insert(node.right, key, val)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        node.left = self.__insert(node.left, key, val)</span><br><span class="line">    node.N = self.__size(node.left) + self.__size(node.right) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> node</span><br></pre></td></tr></table></figure><h3 id="Java-实现-5"><a href="#Java-实现-5" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向二分搜索树中插入一个新的(key, Value)数据对</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Key key, Value val)</span> </span>&#123;</span><br><span class="line">    root = insert(root, key, val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 key 存在于 node 为根结点的子树中就更新它的值</span></span><br><span class="line"><span class="comment">// 不存在就将 key-value 键值对作为新结点插入到子树中</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">insert</span><span class="params">(Node node, Key key, Value val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Node(key, val, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> cmp = node.key.compareTo(key);</span><br><span class="line">    <span class="keyword">if</span> (cmp == <span class="number">0</span>)</span><br><span class="line">        node.val = val;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">        node.right = insert(node.right, key, val);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        node.left = insert(node.left, key, val);</span><br><span class="line">    node.N = size(node.left) + size(node.right) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最大键和最小键"><a href="#最大键和最小键" class="headerlink" title="最大键和最小键"></a>最大键和最小键</h2><p>如果根结点的左子树为空，那么二分搜索树的最小键就是根结点，否则最小键就是左子树中的最小键。<br>如果根结点的右子树为空，那么二分搜索树的最大键就是根结点，否则最大键就是右子树中的最大键。</p><h3 id="Python-实现-5"><a href="#Python-实现-5" class="headerlink" title="Python 实现"></a>Python 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_min</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""返回二分搜索树的最小的键值"""</span></span><br><span class="line">    min_node = self.__get_min(self.__root)</span><br><span class="line">    <span class="keyword">return</span> min_node.key</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_max</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""返回二分搜索树的最大的键值"""</span></span><br><span class="line">    max_node = self.__get_max(self.__root)</span><br><span class="line">    <span class="keyword">return</span> max_node.key</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__get_min</span><span class="params">(self, node)</span>:</span></span><br><span class="line">    <span class="string">"""返回以 node 为根的二分搜索树的最小键值所在的结点"""</span></span><br><span class="line">    <span class="keyword">if</span> node.left <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    <span class="keyword">return</span> self.__get_min(node.left)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__get_max</span><span class="params">(self, node)</span>:</span></span><br><span class="line">    <span class="string">"""返回以 node 为根的二分搜索树的最大键值所在的结点"""</span></span><br><span class="line">    <span class="keyword">if</span> node.right <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    <span class="keyword">return</span> self.__get_max(node.right)</span><br></pre></td></tr></table></figure><h3 id="Java-实现-6"><a href="#Java-实现-6" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回二分搜索树的最小的键值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Key <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Node minNode = getMin(root);</span><br><span class="line">    <span class="keyword">return</span> minNode.key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回二分搜索树的最大的键值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Key <span class="title">getMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Node maxNode = getMax(root);</span><br><span class="line">    <span class="keyword">return</span> maxNode.key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回以 node 为根的二分搜索树的最小键值所在的结点</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">getMin</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node.left == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    <span class="keyword">return</span> getMin(node.left);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回以 node 为根的二分搜索树的最大键值所在的结点</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">getMax</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node.right == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    <span class="keyword">return</span> getMax(node.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="删除最大键和最小键"><a href="#删除最大键和最小键" class="headerlink" title="删除最大键和最小键"></a>删除最大键和最小键</h3><p>通过递归不断深入根结点的左子树中直到遇到空，然后将该结点的链接指向该结点的右子树并删除右子树，最后更新父结点的结点计数器 N。如此便删除了最小键，删除最大键类似。</p><h4 id="Python-实现-6"><a href="#Python-实现-6" class="headerlink" title="Python 实现"></a>Python 实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_min</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""删除二分搜索树中最小值所在结点"""</span></span><br><span class="line">    <span class="keyword">if</span> self.__root <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        self.__root = self.__remove_min(self.__root)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_max</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""删除二分搜索树中最小值所在结点"""</span></span><br><span class="line">    <span class="keyword">if</span> self.__root <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        self.__root = self.__remove_max(self.__root)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__remove_min</span><span class="params">(self, node)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    删除以 node 为根的二分搜索树中的最小结点</span></span><br><span class="line"><span class="string">    返回删除结点后新的二分搜索树的根</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> node.left <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        node_right = node.right</span><br><span class="line">        node.right = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">return</span> node_right</span><br><span class="line">    node.left = self.__remove_min(node.left)</span><br><span class="line">    self.__shift_n(node)</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__remove_max</span><span class="params">(self, node)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    删除以 node 为根的二分搜索树中的最大结点</span></span><br><span class="line"><span class="string">    返回删除结点后新的二分搜索树的根</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> node.right <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        node_left = node.left</span><br><span class="line">        node.left = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">return</span> node_left</span><br><span class="line">    node.right = self.__remove_max(node.right)</span><br><span class="line">    self.__shift_n(node)</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line">    </span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__shift_n</span><span class="params">(node)</span>:</span></span><br><span class="line">    <span class="string">"""使各结点以本结点为根结点的子树中结点的个数正确"""</span></span><br><span class="line">    <span class="keyword">if</span> node.left <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">and</span> node.right <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        node.N = <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> node.left <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        node.N = node.right.N + <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> node.right <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        node.N = node.left.N + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        node.N = node.right.N + node.left.N + <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="Java-实现-7"><a href="#Java-实现-7" class="headerlink" title="Java 实现"></a>Java 实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除二分搜索树中最小值所在结点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="keyword">null</span>)</span><br><span class="line">        root = removeMin(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除二分搜索树中最大值所在结点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="keyword">null</span>)</span><br><span class="line">        root = removeMax(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除以 node 为根的二分搜索树中的最小结点</span></span><br><span class="line"><span class="comment">// 返回删除结点后新的二分搜索树的根</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">removeMin</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node.left == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Node nodeRight = node.right;</span><br><span class="line">        node.right = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> nodeRight;</span><br><span class="line">    &#125;</span><br><span class="line">    node.left = removeMin(node.left);</span><br><span class="line">    shiftN(node);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除以 node 为根的二分搜索树中的最大结点</span></span><br><span class="line"><span class="comment">// 返回删除结点后新的二分搜索树的根</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">removeMax</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Node nodeLeft = node.left;</span><br><span class="line">        node.left = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> nodeLeft;</span><br><span class="line">    &#125;</span><br><span class="line">    node.right = removeMax(node.right);</span><br><span class="line">    shiftN(node);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使各结点以本结点为根结点的子树中结点的个数正确</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shiftN</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node.left == <span class="keyword">null</span> &amp;&amp; node.right == <span class="keyword">null</span>)</span><br><span class="line">        node.N = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (node.left == <span class="keyword">null</span>)</span><br><span class="line">        node.N = node.right.N + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (node.right == <span class="keyword">null</span>)</span><br><span class="line">        node.N = node.left.N + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> node.N = node.left.N + node.right.N + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除某一结点"><a href="#删除某一结点" class="headerlink" title="删除某一结点"></a>删除某一结点</h3><p>可通过删除最小键和最大键类似的方式删除只有一个子结点的结点，但当要删除的结点有两个子结点时就变的很麻烦。此时可通过右子树中的最小结点来填补删除结点的位置。</p><ol><li>将指向即将被删除的结点 node 的链接保存为 t；</li><li>将 node 指向 t 的右子树中的最小结点；</li><li>将 node 的右链接指向 t 的右子树删除最小结点后的右子树；</li><li>将 node 的左链接指向 t 的左子树。</li></ol><h4 id="Python-实现-7"><a href="#Python-实现-7" class="headerlink" title="Python 实现"></a>Python 实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, key)</span>:</span></span><br><span class="line">    <span class="string">"""从二分搜索树中删除键值为 key 的结点"""</span></span><br><span class="line">    self.__remove(self.__root, key)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__remove</span><span class="params">(self, node, key)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    删除以 node 为根的二分搜索树中键值为 key 的结点, 递归算法</span></span><br><span class="line"><span class="string">    返回删除结点后新的二分搜索树的根</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> node.key &lt; key:</span><br><span class="line">        node.right = self.__remove(node.right, key)</span><br><span class="line">        self.__shift_n(node)</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    <span class="keyword">elif</span> node.key &gt; key:</span><br><span class="line">        node.left = self.__remove(node.left, key)</span><br><span class="line">        self.__shift_n(node)</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> node.left <span class="keyword">is</span> <span class="keyword">None</span>:  <span class="comment">#待删除结点左子树为空</span></span><br><span class="line">            node_right = node.right</span><br><span class="line">            node.right = <span class="keyword">None</span></span><br><span class="line">            <span class="keyword">return</span> node_right</span><br><span class="line">        <span class="keyword">elif</span> node.right <span class="keyword">is</span> <span class="keyword">None</span>:  <span class="comment">#待删除结点右子树为空的情况</span></span><br><span class="line">            node_left = node.left</span><br><span class="line">            node.left = <span class="keyword">None</span></span><br><span class="line">            <span class="keyword">return</span> node_left</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="string">"""</span></span><br><span class="line"><span class="string">            待删除结点左右子树均不为空</span></span><br><span class="line"><span class="string">            找到比待删除结点大的最小结点, 即待删除结点右子树的最小结点</span></span><br><span class="line"><span class="string">            用这个结点顶替待删除结点的位置</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">            t = node</span><br><span class="line">            node = self.__get_min(t.right)</span><br><span class="line">            node.right = self.__remove_min(t.right)</span><br><span class="line">            node.left = t.left</span><br><span class="line">            self.__shift_n(node)</span><br><span class="line">            <span class="keyword">return</span> node</span><br></pre></td></tr></table></figure><h4 id="Java-实现-8"><a href="#Java-实现-8" class="headerlink" title="Java 实现"></a>Java 实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从二分搜索树中删除键值为 key 的结点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">    root = remove(root, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除以 node 为根的二分搜索树中键值为 key 的结点, 递归算法</span></span><br><span class="line"><span class="comment">// 返回删除结点后新的二分搜索树的根</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">remove</span><span class="params">(Node node, Key key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cmp = node.key.compareTo(key);</span><br><span class="line">    <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        node.left = remove(node.left, key);</span><br><span class="line">        shiftN(node);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        node.right = remove(node.right, key);</span><br><span class="line">        shiftN(node);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node.left == <span class="keyword">null</span>) &#123; <span class="comment">//待删除结点左子树为空</span></span><br><span class="line">            Node nodeRight = node.right;</span><br><span class="line">            node.right = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> nodeRight;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.right == <span class="keyword">null</span>) &#123; <span class="comment">//待删除结点右子树为空的情况</span></span><br><span class="line">            Node nodeLeft = node.left;</span><br><span class="line">            node.left = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> nodeLeft;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 待删除结点左右子树均不为空</span></span><br><span class="line">            <span class="comment">// 找到比待删除结点大的最小结点, 即待删除结点右子树的最小结点</span></span><br><span class="line">            <span class="comment">// 用这个结点顶替待删除结点的位置</span></span><br><span class="line">            Node t = node;</span><br><span class="line">            node = getMin(t.right);</span><br><span class="line">            node.right = removeMin(t.right);</span><br><span class="line">            node.left = t.left;</span><br><span class="line">            shiftN(node);</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h1><ol><li><p>二分查找法</p><p> <a href="https://github.com/tyrotalk/Algorithms-in-Action/blob/master/04-Binary-Search-Tree/Code-Python/binary_search.py" target="_blank" rel="noopener">Python 源码</a><br> <a href="https://github.com/tyrotalk/Algorithms-in-Action/blob/master/04-Binary-Search-Tree/Code-Java/BinarySearch.java" target="_blank" rel="noopener">Java 源码</a></p></li><li><p>二分搜索树</p><p> <a href="https://github.com/tyrotalk/Algorithms-in-Action/blob/master/04-Binary-Search-Tree/Code-Python/BST.py" target="_blank" rel="noopener">Python 源码</a><br> <a href="https://github.com/tyrotalk/Algorithms-in-Action/blob/master/04-Binary-Search-Tree/Code-Java/BST.java" target="_blank" rel="noopener">Java 源码</a></p></li></ol>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法：堆排序</title>
      <link href="/2017/06/17/%E7%AE%97%E6%B3%95%EF%BC%9A%E5%A0%86%E6%8E%92%E5%BA%8F.html/"/>
      <url>/2017/06/17/%E7%AE%97%E6%B3%95%EF%BC%9A%E5%A0%86%E6%8E%92%E5%BA%8F.html/</url>
      <content type="html"><![CDATA[<p><a href="https://zh.wikipedia.org/wiki/%E5%A0%86%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">堆排序（Heapsort）</a>：利用堆这种数据结构的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。<br><a id="more"></a></p><h1 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h1><p>有时我们对元素排序时不需要全部有序，或者不需要一次将它们排序。比如某时刻只需要处理最大元素，然后添加元素再在这些元素中找出最大元素。此时，使用优先队列最合适。</p><h2 id="什么是优先队列"><a href="#什么是优先队列" class="headerlink" title="什么是优先队列"></a>什么是优先队列</h2><p><a href="https://zh.wikipedia.org/wiki/%E5%84%AA%E5%85%88%E4%BD%87%E5%88%97" target="_blank" rel="noopener">优先队列</a>是计算机科学中的一类抽象数据类型。优先队列中的每个元素都有各自的优先级，优先级最高的元素最先得到服务；优先级相同的元素按照其在优先队列中的顺序得到服务。优先队列最重要的就是删除最大元素和插入元素。<br>优先队列至少包含三个内容：</p><ol><li>插入带优先级的元素；</li><li>取出具有最高优先级的元素；</li><li>查看最高优先级的元素。</li></ol><h2 id="优先队列应用场景"><a href="#优先队列应用场景" class="headerlink" title="优先队列应用场景"></a>优先队列应用场景</h2><ol><li>模拟系统</li><li>任务调度</li><li>数值计算</li></ol><h1 id="基于优先队列的堆排序"><a href="#基于优先队列的堆排序" class="headerlink" title="基于优先队列的堆排序"></a>基于优先队列的堆排序</h1><p>二叉堆堆能够很好的实现优先队列的基本操作。当一棵二叉树的每个节点都大于等于它的两个子节点时即为堆有序。</p><h2 id="堆算法"><a href="#堆算法" class="headerlink" title="堆算法"></a>堆算法</h2><h3 id="由下至上的堆有序化"><a href="#由下至上的堆有序化" class="headerlink" title="由下至上的堆有序化"></a>由下至上的堆有序化</h3><p>当堆的有序状态因为某个节点变得比其父节点更大时就需要通过交换它和它的父节点来使堆有序。</p><h4 id="Python3-实现"><a href="#Python3-实现" class="headerlink" title="Python3 实现"></a>Python3 实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shift_up</span><span class="params">(self, k)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    由下至上的堆有序化，保证最大堆的性质</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">while</span> k &gt; <span class="number">1</span> <span class="keyword">and</span> self.data[k] &gt; self.data[k // <span class="number">2</span>]:</span><br><span class="line">        self.data[k], self.data[k // <span class="number">2</span>] = self.data[k // <span class="number">2</span>], self.data[k]</span><br><span class="line">        k //= <span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 由下至上的堆有序化，保证最大堆的性质</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shiftUp</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (k &gt; <span class="number">1</span> &amp;&amp; data[k / <span class="number">2</span>].compareTo(data[k]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果当前元素大于父节点，交换</span></span><br><span class="line">        swap(k, k / <span class="number">2</span>);</span><br><span class="line">        k /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="由上至下的堆有序化"><a href="#由上至下的堆有序化" class="headerlink" title="由上至下的堆有序化"></a>由上至下的堆有序化</h3><p>当堆的有序状态因为某个节点变得比其两个子节点更小时就需要通过交换它和它的两个子节点中较大的一个来使堆有序。</p><h4 id="Python3-实现-1"><a href="#Python3-实现-1" class="headerlink" title="Python3 实现"></a>Python3 实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shift_down</span><span class="params">(self, k)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    由上至下的堆有序化，保证最大堆的性质</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">while</span> k * <span class="number">2</span> &lt;= self.count:</span><br><span class="line">        j = k * <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> j + <span class="number">1</span> &lt;= self.count <span class="keyword">and</span> self.data[j] &lt; self.data[j + <span class="number">1</span>]:</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.data[k] &gt; self.data[j]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        self.data[k], self.data[j] = self.data[j], self.data[k]</span><br><span class="line">        k = j</span><br></pre></td></tr></table></figure><h4 id="Java-实现-1"><a href="#Java-实现-1" class="headerlink" title="Java 实现"></a>Java 实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 由上至下的堆有序化，保证最大堆的性质</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shiftDown</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">2</span> * k &lt;= count) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = k * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (j + <span class="number">1</span> &lt;= count &amp;&amp; data[j + <span class="number">1</span>].compareTo(data[j]) &gt; <span class="number">0</span>)</span><br><span class="line">            j++;</span><br><span class="line">        <span class="keyword">if</span> (data[k].compareTo(data[j]) &gt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        swap(k, j);</span><br><span class="line">        k = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h3><p>将新元素加到堆末尾，通过由下至上的堆有序化使元素到合适的位置。</p><h4 id="Python3-实现-2"><a href="#Python3-实现-2" class="headerlink" title="Python3 实现"></a>Python3 实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, item)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    在最大堆中插入一个新的元素</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">assert</span> self.count + <span class="number">1</span> &lt;= self.capacity</span><br><span class="line">    self.count += <span class="number">1</span></span><br><span class="line">    self.data.append(item)</span><br><span class="line">    self.shift_up(self.count)</span><br></pre></td></tr></table></figure><h4 id="Java-实现-2"><a href="#Java-实现-2" class="headerlink" title="Java 实现"></a>Java 实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在最大堆中插入一个新的元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> count + <span class="number">1</span> &lt;= capacity;</span><br><span class="line">    data[++count] = item;</span><br><span class="line">    shiftUp(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除最大元素"><a href="#删除最大元素" class="headerlink" title="删除最大元素"></a>删除最大元素</h3><p>删除堆顶端的最大元素，将堆末尾的元素放到顶端，通过由上至下的堆有序化使此时顶端元素到合适的位置。</p><h4 id="Python3-实现-3"><a href="#Python3-实现-3" class="headerlink" title="Python3 实现"></a>Python3 实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_max</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    从最大堆中取出堆顶元素, 即堆中所存储的最大数据</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">assert</span> self.count &gt; <span class="number">0</span></span><br><span class="line">    re_max = self.data[<span class="number">1</span>]</span><br><span class="line">    self.data[<span class="number">1</span>] = self.data[self.count]</span><br><span class="line">    self.data[self.count] = <span class="keyword">None</span></span><br><span class="line">    self.count -= <span class="number">1</span></span><br><span class="line">    self.shift_down(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> re_max</span><br></pre></td></tr></table></figure><h4 id="Java-实现-3"><a href="#Java-实现-3" class="headerlink" title="Java 实现"></a>Java 实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从最大堆中取出堆顶元素, 即堆中所存储的最大数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Item <span class="title">extractMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> count &gt; <span class="number">0</span>;</span><br><span class="line">    Item max = data[<span class="number">1</span>];</span><br><span class="line">    data[<span class="number">1</span>] = data[count];</span><br><span class="line">    data[count--] = <span class="keyword">null</span>;</span><br><span class="line">    shiftDown(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原地堆排序"><a href="#原地堆排序" class="headerlink" title="原地堆排序"></a>原地堆排序</h2><p>原地堆排序将需要排序的序列通过由上至下的堆有序化使序列变成一个最大堆，将第一个元素（最大元素）与最后一个元素交换，再将此时序列除最后一个元素（最大元素）的前面部分进行上述变换；如此继续，最后序列有序。<br>注意：</p><ol><li>原地堆排序与上面堆算法不同，其索引从0开始；</li><li>源码地址中有另外两种堆排序算法（索引从1开开始），其都借助了一个辅助序列，效率不如原地堆排序。</li></ol><h3 id="Python3-实现-4"><a href="#Python3-实现-4" class="headerlink" title="Python3 实现"></a>Python3 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(lst)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    不使用额外的堆排序，直接对 lst 进行原地堆排序</span></span><br><span class="line"><span class="string">    最后一个非叶子节点的索引 = (最后一个元素的索引-1)/2</span></span><br><span class="line"><span class="string">    最后一个元素的索引 = n-1</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    n = len(lst)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range((n - <span class="number">1</span>) // <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        shift_down(lst, n, i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        lst[<span class="number">0</span>], lst[i] = lst[i], lst[<span class="number">0</span>]</span><br><span class="line">        shift_down(lst, i, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shift_down</span><span class="params">(lst, n, k)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    由上至下的堆有序化，保证最大堆的性质</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    e = lst[k]</span><br><span class="line">    <span class="keyword">while</span> k * <span class="number">2</span> + <span class="number">1</span> &lt; n:</span><br><span class="line">        j = k * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> j + <span class="number">1</span> &lt; n <span class="keyword">and</span> lst[j] &lt; lst[j + <span class="number">1</span>]:</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> e &gt; lst[j]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        lst[k] = lst[j]</span><br><span class="line">        k = j</span><br><span class="line">    lst[k] = e</span><br></pre></td></tr></table></figure><h3 id="Java-实现-4"><a href="#Java-实现-4" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 不使用额外的堆排序，直接对数组进行原地堆排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">newSort</span><span class="params">(Comparable[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对数组进行原地堆排序的索引从0开始索引的</span></span><br><span class="line">        <span class="comment">// 最后一个非叶子节点的索引 = (最后一个元素的索引-1)/2</span></span><br><span class="line">        <span class="comment">// 最后一个元素的索引 = n-1</span></span><br><span class="line">        <span class="keyword">int</span> n = arr.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = (n - <span class="number">1</span> - <span class="number">1</span>) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            shiftDown(arr, n, i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            swap(arr, i, <span class="number">0</span>);</span><br><span class="line">            shiftDown(arr, i, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由上至下的堆有序化，保证最大堆的性质</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shiftDown</span><span class="params">(Comparable[] arr, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        Comparable e = arr[k];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (k * <span class="number">2</span> + <span class="number">1</span> &lt; n) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = k * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (j + <span class="number">1</span> &lt; n &amp;&amp; arr[j + <span class="number">1</span>].compareTo(arr[j]) &gt; <span class="number">0</span>)</span><br><span class="line">                j++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (e.compareTo(arr[j]) &gt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            arr[k] = arr[j];</span><br><span class="line">            k = j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        arr[k] = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//交换堆中两个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Comparable[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Comparable temp = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h1><ol><li><a href="https://github.com/tyrotalk/Algorithms-in-Action/tree/master/03-Heap-Sort/Code-Python/heap" target="_blank" rel="noopener">Python 源码</a></li><li><a href="https://github.com/tyrotalk/Algorithms-in-Action/tree/master/03-Heap-Sort/Code-Java/heap" target="_blank" rel="noopener">Java 源码</a></li></ol>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法：高级排序算法</title>
      <link href="/2017/06/10/%E7%AE%97%E6%B3%95%EF%BC%9A%E9%AB%98%E7%BA%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95.html/"/>
      <url>/2017/06/10/%E7%AE%97%E6%B3%95%EF%BC%9A%E9%AB%98%E7%BA%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95.html/</url>
      <content type="html"><![CDATA[<p>本篇包括归并排序和快速排序，它们都是采用了分治法的 O(NlogN) 算法。<br><a id="more"></a></p><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>归并排序是建立在归并操作上的一种有效的排序算法，其将两个有序的序列归并成一个更大的有序序列。</p><h2 id="原地归并"><a href="#原地归并" class="headerlink" title="原地归并"></a>原地归并</h2><p>原地归并将两个不同的有序序列归并到第三个序列中，在实现过程中就需要一个辅助序列。</p><h3 id="Python3-实现"><a href="#Python3-实现" class="headerlink" title="Python3 实现"></a>Python3 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(lst, l, mid, r)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    将 lst[l...mid] 和 lst[mid+1...r] 两部分进行归并</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    aux = copy.deepcopy(lst[l:r + <span class="number">1</span>])  <span class="comment">#辅助序列aux</span></span><br><span class="line">    i, j = l, mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(l, r + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> i &gt; mid:  <span class="comment"># 左半部分元素已经处理完毕</span></span><br><span class="line">            lst[k] = aux[j - l]</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> j &gt; r:  <span class="comment"># 右半部分元素已经处理完毕</span></span><br><span class="line">            lst[k] = aux[i - l]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> aux[i - l] &lt; aux[j - l]:</span><br><span class="line">            lst[k] = aux[i - l]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            lst[k] = aux[j - l]</span><br><span class="line">            j += <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 arr[l...mid] 和 arr[mid+1...r] 两部分进行归并</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Comparable[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> mid, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = l;</span><br><span class="line">    <span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    System.arraycopy(arr, l, aux, l, r - l + <span class="number">1</span>);  <span class="comment">//辅助序列aux</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = l; k &lt;= r; k++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; mid) arr[k] = aux[j++]; <span class="comment">//左半部分元素已经处理完毕</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; r) arr[k] = aux[i++]; <span class="comment">//右半部分元素已经处理完毕</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (aux[i].compareTo(aux[j]) &lt; <span class="number">0</span>) arr[k] = aux[i++];</span><br><span class="line">        <span class="keyword">else</span> arr[k] = aux[j++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自顶向下的归并排序"><a href="#自顶向下的归并排序" class="headerlink" title="自顶向下的归并排序"></a>自顶向下的归并排序</h2><p>对子序列 a[l…r] 进行排序， 先将其分为 a[l…mid] 和 a[mid+1…r] 两部分，分别通过递归调用将它们单独排序，最后将有序的子序列归并为最终的排序结果。</p><h3 id="Python3-实现-1"><a href="#Python3-实现-1" class="headerlink" title="Python3 实现"></a>Python3 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(lst)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    初始化，使归并排序边界正确</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    sort_next(lst, <span class="number">0</span>, len(lst) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort_next</span><span class="params">(lst, l, r)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    使用自顶向下、递归进行归并排序,对 lst[l...r] 的范围进行排序</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> l &gt;= r:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    mid = (l + r) // <span class="number">2</span></span><br><span class="line">    sort_next(lst, l, mid)  <span class="comment">#将左半部分排序</span></span><br><span class="line">    sort_next(lst, mid + <span class="number">1</span>, r)  <span class="comment">#将右半部分排序</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对于 lst[mid] &lt;= lst[mid + 1]的情况, 不进行merge</span></span><br><span class="line">    <span class="keyword">if</span> lst[mid] &gt; lst[mid + <span class="number">1</span>]:</span><br><span class="line">        merge(lst, l, mid, r)  <span class="comment">#归并</span></span><br></pre></td></tr></table></figure><h3 id="Java-实现-1"><a href="#Java-实现-1" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Comparable[] aux; <span class="comment">// 辅助数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">newSort</span><span class="params">(Comparable[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = arr.length;</span><br><span class="line">    aux = <span class="keyword">new</span> Comparable[n]; <span class="comment">// 一次性分配空间</span></span><br><span class="line">    newSort(arr, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用递归进行归并排序,对 arr[l...r] 的范围进行排序</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">newSort</span><span class="params">(Comparable[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    newSort(arr, l, mid); <span class="comment">// 将左半部分排序</span></span><br><span class="line">    newSort(arr, mid + <span class="number">1</span>, r); <span class="comment">// 将右半部分排序</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对于arr[mid] &lt;= arr[mid+1]的情况,不进行merge</span></span><br><span class="line">    <span class="keyword">if</span> (arr[mid].compareTo(arr[mid + <span class="number">1</span>]) &gt; <span class="number">0</span>)</span><br><span class="line">        merge(arr, l, mid, r); <span class="comment">// 归并</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自底向上的归并排序"><a href="#自底向上的归并排序" class="headerlink" title="自底向上的归并排序"></a>自底向上的归并排序</h2><p>首先进行两两归并，然后四四归并，接着八八归并，一直下去，即先归并微型序列，再成对归并得到的子序列，一直下去，直到将整个序列归并。</p><h3 id="Python3-实现-2"><a href="#Python3-实现-2" class="headerlink" title="Python3 实现"></a>Python3 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(lst)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    进行 lgN 次两两归并</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    n = len(lst)</span><br><span class="line">    sz = <span class="number">1</span>  <span class="comment"># sz 子数组大小</span></span><br><span class="line">    <span class="keyword">while</span> sz &lt; n:</span><br><span class="line">        l = <span class="number">0</span>  <span class="comment"># l 子数组索引</span></span><br><span class="line">        <span class="keyword">while</span> l &lt; n - sz:</span><br><span class="line">            <span class="comment"># 对于 lst[mid] &lt;= lst[mid + 1]的情况, 不进行merge</span></span><br><span class="line">            <span class="keyword">if</span> lst[l + sz - <span class="number">1</span>] &gt; lst[l + sz]:</span><br><span class="line">                merge(lst, l, l + sz - <span class="number">1</span>, min(l + sz + sz - <span class="number">1</span>, n - <span class="number">1</span>))</span><br><span class="line">            l += sz + sz</span><br><span class="line">        sz += sz</span><br></pre></td></tr></table></figure><h3 id="Java-实现-2"><a href="#Java-实现-2" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Comparable[] aux;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行 lgN 次两两归并</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">newSort</span><span class="params">(Comparable[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = arr.length;</span><br><span class="line">    aux = <span class="keyword">new</span> Comparable[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> sz = <span class="number">1</span>; sz &lt; n; sz += sz) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; n - sz; l += sz + sz) &#123;</span><br><span class="line">            <span class="comment">// 对于arr[mid] &lt;= arr[mid+1]的情况,不进行merge</span></span><br><span class="line">            <span class="keyword">if</span> (arr[l + sz - <span class="number">1</span>].compareTo(arr[l + sz]) &gt; <span class="number">0</span>)</span><br><span class="line">                merge(arr, l, l + sz - <span class="number">1</span>,</span><br><span class="line">                        Math.min(l + sz + sz - <span class="number">1</span>, n - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序特点"><a href="#归并排序特点" class="headerlink" title="归并排序特点"></a>归并排序特点</h2><ol><li>对于长度为 N 的序列，自顶向下的归并排序和自顶向上的归并排序都需要 1/2NlgN 至 NlgN 次比较，最多访问序列 6NlgN 次；</li><li>归并排序的主要缺点是辅助序列所使用的额外空间和 N 的大小成正比。</li></ol><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>快速排序将一个序列分成两个子序列，两部分独立地排序。<br>步骤：</p><ol><li>从序列中挑出一个基准。</li><li>切分操作：重新排序序列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任何一边）。在这个分区结束之后，该基准就处于序列的中间位置。</li><li>递归地把小于基准值元素的子序列和大于基准值元素的子序列排序。</li></ol><h2 id="基本算法"><a href="#基本算法" class="headerlink" title="基本算法"></a>基本算法</h2><h3 id="Python3-版本"><a href="#Python3-版本" class="headerlink" title="Python3 版本"></a>Python3 版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">def sort(lst):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    对序列所有元素进行随机排序</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    sort_next(lst, 0, len(lst) - 1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def sort_next(lst, l, r):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    快速排序</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if r &lt;= l:</span><br><span class="line">        return</span><br><span class="line">    p = partition(lst, l, r)  #切分</span><br><span class="line">    sort_next(lst, l, p - 1)  #将左半部分 lst[l...p-1] 排序</span><br><span class="line">    sort_next(lst, p + 1, r)  #将右半部分 lst[p+1...r] 排序</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def partition(lst, l, r):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    将序列切分为 lst[l...p-1], lst[p], lst[p+1, r]</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    v = lst[l]</span><br><span class="line">    j = l</span><br><span class="line">    for i in range(l + 1, r + 1):</span><br><span class="line">        if lst[i] &lt; v:</span><br><span class="line">            j += 1</span><br><span class="line">            lst[j], lst[i] = lst[i], lst[j]</span><br><span class="line">    lst[l], lst[j] = lst[j], lst[l]</span><br><span class="line">    return j</span><br></pre></td></tr></table></figure><h3 id="Java-版本"><a href="#Java-版本" class="headerlink" title="Java 版本"></a>Java 版本</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">newSort</span><span class="params">(Comparable[] arr)</span> </span>&#123;</span><br><span class="line">        newSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">newSort</span><span class="params">(Comparable[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> p = partition(arr, l, r); <span class="comment">//切分</span></span><br><span class="line">        newSort(arr, l, p - <span class="number">1</span>); <span class="comment">//将左半部分 arr[l...p-1] 排序</span></span><br><span class="line">        newSort(arr, p + <span class="number">1</span>, r); <span class="comment">//将右半部分 arr[p+1...r] 排序</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将序列切分为 arr[l...p-1], arr[p], arr[p+1, r]</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(Comparable[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        Comparable v = arr[l];</span><br><span class="line">        <span class="keyword">int</span> j = l;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l + <span class="number">1</span>; i &lt;= r; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i].compareTo(v) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                j++;</span><br><span class="line">                swap(arr, i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(arr, l, j);</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//交换数组中两个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Object[] arr, <span class="keyword">int</span> index1, <span class="keyword">int</span> index2)</span> </span>&#123;</span><br><span class="line">        Object temp = arr[index1];</span><br><span class="line">        arr[index1] = arr[index2];</span><br><span class="line">        arr[index2] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="算法改进"><a href="#算法改进" class="headerlink" title="算法改进"></a>算法改进</h2><h3 id="保持序列的随机性"><a href="#保持序列的随机性" class="headerlink" title="保持序列的随机性"></a>保持序列的随机性</h3><p>快速排序的最好情况是每次都正好将序列对半分，但对于一个趋近有序的序列，会出现切分不平衡的情况，使得算法极为低效。此时打乱原有序列的顺序便能预防这种情况。</p><ol><li>Python3: <code>random.shuffle(lst)</code></li><li>Java: <code>StdRandom.shuffle(arr);</code></li></ol><h3 id="双路快速排序"><a href="#双路快速排序" class="headerlink" title="双路快速排序"></a>双路快速排序</h3><p>改进快速排序的第二个方法是使用双路快速排序，其切分部分在选定一个基准后，会从序列左端开始向右扫描直到找到一个大于等于它的元素，再从序列右端开始向左扫描直到找到一个小于等于它的元素，交换这两个元素，如此继续。</p><h4 id="Python3-版本-1"><a href="#Python3-版本-1" class="headerlink" title="Python3 版本"></a>Python3 版本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(lst, l, r)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    将序列切分为 lst[l...p-1], lst[p], lst[p+1, r]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    v = lst[l]</span><br><span class="line">    i, j = l, r + <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= r <span class="keyword">and</span> lst[i] &lt; v:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> j &gt;= l <span class="keyword">and</span> lst[j] &gt; v:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        lst[i], lst[j] = lst[j], lst[i]</span><br><span class="line">    lst[l], lst[j] = lst[j], lst[l]</span><br><span class="line">    <span class="keyword">return</span> j</span><br></pre></td></tr></table></figure><h4 id="Java-版本-1"><a href="#Java-版本-1" class="headerlink" title="Java 版本"></a>Java 版本</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(Comparable[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    Comparable v = arr[l];</span><br><span class="line">    <span class="keyword">int</span> i = l, j = r + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (arr[++i].compareTo(v) &lt; <span class="number">0</span> &amp;&amp; i &lt;= r);</span><br><span class="line">        <span class="keyword">while</span> (arr[--j].compareTo(v) &gt; <span class="number">0</span> &amp;&amp; j &gt;= l);</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= j) <span class="keyword">break</span>;</span><br><span class="line">        swap(arr, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr, l, j);</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三路快速排序"><a href="#三路快速排序" class="headerlink" title="三路快速排序"></a>三路快速排序</h3><p>改进快速排序的第三种方法是使用三路快速排序，其将序列分为切分为三个部分，分别对应小于、等于和大于切分元素的序列元素，再对小于和大于部分进行递归排序。</p><h4 id="Python3-版本-2"><a href="#Python3-版本-2" class="headerlink" title="Python3 版本"></a>Python3 版本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort_next</span><span class="params">(lst, l, r)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> r &lt;= l:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    v = lst[l]</span><br><span class="line"></span><br><span class="line">    lt = l  <span class="comment"># lst[l+1...lt] &lt; v</span></span><br><span class="line">    i = l + <span class="number">1</span>  <span class="comment"># lst[lt+1...i] = v</span></span><br><span class="line">    gt = r + <span class="number">1</span>  <span class="comment"># lst[i+1...h] &gt; v</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> i &lt; gt:</span><br><span class="line">        <span class="keyword">if</span> lst[i] &lt; v:</span><br><span class="line">            lst[lt + <span class="number">1</span>], lst[i] = lst[i], lst[lt + <span class="number">1</span>]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            lt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> lst[i] &gt; v:</span><br><span class="line">            lst[gt - <span class="number">1</span>], lst[i] = lst[i], lst[gt - <span class="number">1</span>]</span><br><span class="line">            gt -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">    lst[l], lst[lt] = lst[lt], lst[l]</span><br><span class="line">    sort_next(lst, l, lt - <span class="number">1</span>)  <span class="comment">#将前半部分 lst[l...lt-1] 排序</span></span><br><span class="line">    sort_next(lst, gt, r)  <span class="comment">#将后半部分 lst[gt...r] 排序</span></span><br></pre></td></tr></table></figure><h4 id="Java-版本-2"><a href="#Java-版本-2" class="headerlink" title="Java 版本"></a>Java 版本</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">newSort</span><span class="params">(Comparable[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> lt = l, i = l + <span class="number">1</span>, gt = r + <span class="number">1</span>;</span><br><span class="line">    Comparable v = arr[l];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; gt) &#123;</span><br><span class="line">        <span class="keyword">int</span> cmp = arr[i].compareTo(v);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) swap(arr, ++lt, i++);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) swap(arr, --gt, i);</span><br><span class="line">        <span class="keyword">else</span> i++;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr, l, lt);</span><br><span class="line">    newSort(arr, l, lt - <span class="number">1</span>); <span class="comment">//将左半部分 arr[l...p-1] 排序</span></span><br><span class="line">    newSort(arr, gt, r); <span class="comment">//将右半部分 arr[p+1...r] 排序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序特点"><a href="#快速排序特点" class="headerlink" title="快速排序特点"></a>快速排序特点</h2><ol><li>长度为 N 的序列排序所需的时间和 NlgN 成正比，平均需要 2NlgN 次比较；</li><li>随机打乱原始序列的顺序能防止快速排序出现最坏的情况。</li></ol><h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h1><ol><li>归并排序</li></ol><ul><li><a href="https://github.com/tyrotalk/Algorithms-in-Action/tree/master/02-Sorting-Advance/Code-Python/merge_sort" target="_blank" rel="noopener">Python</a></li><li><a href="https://github.com/tyrotalk/Algorithms-in-Action/tree/master/02-Sorting-Advance/Code-Java/mergeSort" target="_blank" rel="noopener">Java</a></li></ul><ol><li>快速排序</li></ol><ul><li><a href="https://github.com/tyrotalk/Algorithms-in-Action/tree/master/02-Sorting-Advance/Code-Python/quick_sort" target="_blank" rel="noopener">Python</a></li><li><a href="https://github.com/tyrotalk/Algorithms-in-Action/tree/master/02-Sorting-Advance/Code-Java/quickSort" target="_blank" rel="noopener">Java</a></li></ul>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>隐式和显式Intent</title>
      <link href="/2017/06/04/%E9%9A%90%E5%BC%8F%E5%92%8C%E6%98%BE%E5%BC%8FIntent.html/"/>
      <url>/2017/06/04/%E9%9A%90%E5%BC%8F%E5%92%8C%E6%98%BE%E5%BC%8FIntent.html/</url>
      <content type="html"><![CDATA[<p>Intent 是一个消息传递对象，您可以使用它从其他应用组件请求操作。Intent 可以通过多种方式促进组件之间的通信。<br><a id="more"></a></p><h1 id="基本用例"><a href="#基本用例" class="headerlink" title="基本用例"></a>基本用例</h1><ol><li>启动 Activity</li><li>启动服务</li><li>启动广播</li></ol><h1 id="Intent-类型"><a href="#Intent-类型" class="headerlink" title="Intent 类型"></a>Intent 类型</h1><ol><li>显式 Intent<br>明确知道某个组件或应用处理相关 Intent 使用显式 Intent。</li><li>隐式 Intent<br>不清楚哪个组件或应用将要处理相关 Intent 使用隐式 Intent。例如在多个浏览器应用中调用其中一个打开链接。</li></ol><h1 id="显式-Intent-示例"><a href="#显式-Intent-示例" class="headerlink" title="显式 Intent 示例"></a>显式 Intent 示例</h1><p>打开指定 Activity:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent i = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, OneActivity.class);</span><br><span class="line">startActivity(i);</span><br></pre></td></tr></table></figure></p><h1 id="隐式-Intent-示例"><a href="#隐式-Intent-示例" class="headerlink" title="隐式 Intent 示例"></a>隐式 Intent 示例</h1><p>调用邮箱应用发送邮件:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_SENDTO);</span><br><span class="line">intent.setData(Uri.parse(<span class="string">"mailto:"</span>));</span><br><span class="line">intent.putExtra(Intent.EXTRA_TEXT, <span class="comment">//text);</span></span><br><span class="line">intent.putExtra(Intent.EXTRA_SUBJECT,<span class="comment">//text);</span></span><br><span class="line"><span class="keyword">if</span> (intent.resolveActivity(getPackageManager()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">    startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h1><ol><li><a href="https://developer.android.com/guide/components/intents-filters.html?hl=zh-cn" target="_blank" rel="noopener">Intent 和 Intent 过滤器</a></li></ol>]]></content>
      
      <categories>
          
          <category> 移动开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法：简单排序算法</title>
      <link href="/2017/05/26/%E7%AE%97%E6%B3%95%EF%BC%9A%E7%AE%80%E5%8D%95%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95.html/"/>
      <url>/2017/05/26/%E7%AE%97%E6%B3%95%EF%BC%9A%E7%AE%80%E5%8D%95%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95.html/</url>
      <content type="html"><![CDATA[<p>简单排序算法有三种：选择排序、插入排序和冒泡排序。都属于 O(n^2) 级别的算法。</p><a id="more"></a><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p>原理：首先，找到数组中最小的元素，将它和数组第一个元素交换位置；其次，在剩下的元素中找到最小的元素，将它与数组第二个元素交换位置。如此反复，直到将整个数组排序。</p><ul><li>对于长度为 n 的数组，选择排序需要大约 (n^2)/2 次比较和 n 次交换。</li><li>对于随机排列的长度为 n 且主键不重复的数组，平均情况下插入排序需要 (n^2)/4 次比较以及 (n^2)/4 次交换。最坏情况下需要 (n^2)/2 次比较和 (n^2)/2 次交换，最好情况下需要 n-1 次比较和0次交换。</li></ul><h2 id="Python3-代码"><a href="#Python3-代码" class="headerlink" title="Python3 代码"></a>Python3 代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="string">"""由小到大排序"""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr) - <span class="number">1</span>):</span><br><span class="line">        min_index = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(arr)):</span><br><span class="line">            <span class="keyword">if</span> arr[min_index] &gt; arr[j]:</span><br><span class="line">                min_index = j</span><br><span class="line">        <span class="keyword">if</span> min_index != i:</span><br><span class="line">            arr[min_index], arr[i] = arr[i], arr[min_index]</span><br></pre></td></tr></table></figure><h2 id="Java-代码"><a href="#Java-代码" class="headerlink" title="Java 代码"></a>Java 代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">newSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> minIndex = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[minIndex] &gt; arr[j])</span><br><span class="line">                minIndex = j;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(arr, i, minIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//交换数组中两个数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> index1, <span class="keyword">int</span> index2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[index1];</span><br><span class="line">    arr[index1] = arr[index2];</span><br><span class="line">    arr[index2] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用模版（泛型）"><a href="#使用模版（泛型）" class="headerlink" title="使用模版（泛型）"></a>使用模版（泛型）</h2><p>上面静态语言 Java 的代码只能对整型数组进行排序，我们用泛型来使代码能对任意类型数组排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectionSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">newSort</span><span class="params">(Comparable[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> minIndex = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j].compareTo(arr[minIndex]) &lt; <span class="number">0</span>)</span><br><span class="line">                    minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(arr, i, minIndex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//交换数组中两个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Object[] arr, <span class="keyword">int</span> index1, <span class="keyword">int</span> index2)</span> </span>&#123;</span><br><span class="line">        Object temp = arr[index1];</span><br><span class="line">        arr[index1] = arr[index2];</span><br><span class="line">        arr[index2] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//测试 Integer</span></span><br><span class="line">        Integer[] a = &#123;<span class="number">10</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        SelectionSort.newSort(a);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试 Double</span></span><br><span class="line">        Double[] b = &#123;<span class="number">4.4</span>, <span class="number">3.3</span>, <span class="number">2.2</span>, <span class="number">1.1</span>&#125;;</span><br><span class="line">        SelectionSort.newSort(b);</span><br><span class="line">        System.out.println(Arrays.toString(b));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试 String</span></span><br><span class="line">        String[] c = &#123;<span class="string">"D"</span>, <span class="string">"C"</span>, <span class="string">"B"</span>, <span class="string">"A"</span>&#125;;</span><br><span class="line">        SelectionSort.newSort(c);</span><br><span class="line">        System.out.println(Arrays.toString(c));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试自定义类 People</span></span><br><span class="line">        People[] people = <span class="keyword">new</span> People[<span class="number">4</span>];</span><br><span class="line">        people[<span class="number">0</span>] = <span class="keyword">new</span> People(<span class="string">"A"</span>, <span class="number">23</span>);</span><br><span class="line">        people[<span class="number">1</span>] = <span class="keyword">new</span> People(<span class="string">"D"</span>, <span class="number">22</span>);</span><br><span class="line">        people[<span class="number">2</span>] = <span class="keyword">new</span> People(<span class="string">"C"</span>, <span class="number">26</span>);</span><br><span class="line">        people[<span class="number">3</span>] = <span class="keyword">new</span> People(<span class="string">"B"</span>, <span class="number">22</span>);</span><br><span class="line">        SelectionSort.newSort(people);</span><br><span class="line">        System.out.println(Arrays.toString(people));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义 <code>People</code> 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">People</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(People that)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.age &lt; that.age) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.age &gt; that.age) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name.compareTo(that.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"People "</span> + <span class="keyword">this</span>.name + <span class="string">" "</span> + <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="随机生成数组"><a href="#随机生成数组" class="headerlink" title="随机生成数组"></a>随机生成数组</h2><h3 id="Python3-代码-1"><a href="#Python3-代码-1" class="headerlink" title="Python3 代码"></a>Python3 代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">随机生成数值型数组</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_array</span><span class="params">(n, min_range, max_range)</span>:</span></span><br><span class="line">    <span class="string">"""生成 n 个元素的整型（浮点型）数组，每个元素取值范围为 [minRange, maxRange]"""</span></span><br><span class="line">    <span class="comment"># 使用断言检查 minRange 是否不大于 maxRange</span></span><br><span class="line">    <span class="keyword">assert</span> min_range &lt;= max_range</span><br><span class="line">    arr = [random.randint(min_range, max_range) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><h3 id="Java-代码-1"><a href="#Java-代码-1" class="headerlink" title="Java 代码"></a>Java 代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortTestHelper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SortTestHelper</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成 n 个元素的整型数组，每个元素取值范围为 [minRange, maxRange]</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer[] generateRandomArray(<span class="keyword">int</span> n, <span class="keyword">int</span> minRange, <span class="keyword">int</span> maxRange) &#123;</span><br><span class="line">        assert minRange &lt;= maxRange; #使用断言检查 minRange 是否不大于 maxRange</span><br><span class="line">        Integer[] integers = <span class="keyword">new</span> Integer[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            integers[i] = (<span class="keyword">int</span>)(Math.random() * (maxRange + <span class="number">1</span> - minRange) + minRange);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> integers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试算法的性能"><a href="#测试算法的性能" class="headerlink" title="测试算法的性能"></a>测试算法的性能</h2><p>检查算法是否运算正确及其所用时间</p><h3 id="Python3-代码-2"><a href="#Python3-代码-2" class="headerlink" title="Python3 代码"></a>Python3 代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selection_sort <span class="keyword">import</span> sort</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_sorted</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="string">"""判断数组排序后是否有序"""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr) - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> arr[i] &gt; arr[i + <span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_sort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="string">"""测试排序算法运行的正确性及所用时间"""</span></span><br><span class="line">    begin_time = time.time()</span><br><span class="line">    sort(arr)</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    <span class="keyword">assert</span> is_sorted(arr)  <span class="comment"># 使用断言检查排序算法运行成功</span></span><br><span class="line">    print(<span class="string">"排序结果: "</span> + str(arr))</span><br><span class="line">    print(<span class="string">"排序算法所用时间: "</span> + str(end_time - begin_time) + <span class="string">'s'</span>)</span><br></pre></td></tr></table></figure><h3 id="Java-代码-2"><a href="#Java-代码-2" class="headerlink" title="Java 代码"></a>Java 代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断数组排序后是否有序</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSorted</span><span class="params">(Comparable[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i].compareTo(arr[i+<span class="number">1</span>]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 Java 反射机制测试排序算法运行的正确性及所用时间</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSort</span><span class="params">(Comparable[] arr, String sortClassName)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获得排序类</span></span><br><span class="line">        Class c = Class.forName(sortClassName);</span><br><span class="line">        <span class="comment">// 获得排序方法</span></span><br><span class="line">        Method method = c.getMethod(<span class="string">"newSort"</span>, <span class="keyword">new</span> Class[]&#123;Comparable[].class&#125;);</span><br><span class="line"></span><br><span class="line">        Object[] params = <span class="keyword">new</span> Object[]&#123;arr&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> beginTime = System.nanoTime();</span><br><span class="line">        <span class="comment">// 调用排序方法</span></span><br><span class="line">        method.invoke(<span class="keyword">null</span>, params);</span><br><span class="line">        <span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用断言检查排序算法运行成功</span></span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(arr)</span></span>;</span><br><span class="line">        System.out.print(<span class="string">"排序结果："</span>);</span><br><span class="line">        printArray(arr);</span><br><span class="line">        System.out.println(<span class="string">"排序运算时间："</span> + (endTime - beginTime) + <span class="string">"ns"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><p>原理：通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p><ul><li>插入排序需要的交换操作和数组中倒置的数量相同，需要的比较次数大于等于倒置的数量，小于等于倒置的数量加上数组的大小再减一。</li></ul><h2 id="Python3-代码-3"><a href="#Python3-代码-3" class="headerlink" title="Python3 代码"></a>Python3 代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(arr)</span>:</span></span><br><span class="line"><span class="string">"""由小到大排序"""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(arr)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &lt; arr[j - <span class="number">1</span>]:</span><br><span class="line">                arr[j], arr[j - <span class="number">1</span>] = arr[j - <span class="number">1</span>], arr[j]</span><br></pre></td></tr></table></figure><h2 id="Java-代码-3"><a href="#Java-代码-3" class="headerlink" title="Java 代码"></a>Java 代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">newSort</span><span class="params">(Comparable[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; arr[j].compareTo(arr[j - <span class="number">1</span>]) &lt; <span class="number">0</span>; j--)</span><br><span class="line">            swap(arr, j, j - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换数组中两个数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Object[] arr, <span class="keyword">int</span> index1, <span class="keyword">int</span> index2)</span> </span>&#123;</span><br><span class="line">    Object temp = arr[index1];</span><br><span class="line">    arr[index1] = arr[index2];</span><br><span class="line">    arr[index2] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优化插入排序"><a href="#优化插入排序" class="headerlink" title="优化插入排序"></a>优化插入排序</h2><p>上面的插入排序算法的效率并不如选择排序算法，需要对插入排序算法进行优化。<br>事实上，对部分有序的数组排序时使用（优化后的）插入排序算法更有效。</p><blockquote><p>典型的部分有序的数组：</p><ul><li>数组中每个元素距离它的最终位置都不远；</li><li>一个有序的大数组接一个小数组；</li><li>数组中只有几个元素的位置不正确。</li></ul></blockquote><ul><li>对于随机排序的无重复主键的数组，插入排序和选择排序的运行时间是平方级别的，两者之比应该是一个较小的常数。</li></ul><h3 id="Python3-代码-4"><a href="#Python3-代码-4" class="headerlink" title="Python3 代码"></a>Python3 代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(arr)):</span><br><span class="line">        e = arr[i]</span><br><span class="line">        j = i</span><br><span class="line">        <span class="keyword">while</span> j &gt; <span class="number">0</span> <span class="keyword">and</span> e &lt; arr[j - <span class="number">1</span>]:</span><br><span class="line">            arr[j] = arr[j - <span class="number">1</span>]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        arr[j] = e</span><br></pre></td></tr></table></figure><h3 id="Java-代码-4"><a href="#Java-代码-4" class="headerlink" title="Java 代码"></a>Java 代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">newSort</span><span class="params">(Comparable[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        Comparable e = arr[i];</span><br><span class="line">        <span class="keyword">int</span> j = i;</span><br><span class="line">        <span class="keyword">for</span> (; j &gt; <span class="number">0</span> &amp;&amp; e.compareTo(arr[j - <span class="number">1</span>]) &lt; <span class="number">0</span>; j--)</span><br><span class="line">            arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">        arr[j] = e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>原理：重复地走访要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，即该数列已经排序完成。</p><ul><li>冒泡排序对长度为 n 的数组需要 O(n^2) 的比较次数，且可以原地排序；</li><li>冒泡排序是与插入排序拥有相等的运行时间，但是两种算法在需要的交换次数却很大地不同。</li></ul><h2 id="Python3-代码-5"><a href="#Python3-代码-5" class="headerlink" title="Python3 代码"></a>Python3 代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr) - <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">        flag = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, i):</span><br><span class="line">            <span class="keyword">if</span> arr[j + <span class="number">1</span>] &lt; arr[j]:</span><br><span class="line">                flag = <span class="keyword">False</span></span><br><span class="line">                arr[j + <span class="number">1</span>], arr[j] = arr[j], arr[j + <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="Java-代码-5"><a href="#Java-代码-5" class="headerlink" title="Java 代码"></a>Java 代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">newSort</span><span class="params">(Comparable[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j + <span class="number">1</span>].compareTo(arr[j]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">                swap(arr, j, j + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//交换数组中两个数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Object[] arr, <span class="keyword">int</span> index1, <span class="keyword">int</span> index2)</span> </span>&#123;</span><br><span class="line">    Object temp = arr[index1];</span><br><span class="line">    arr[index1] = arr[index2];</span><br><span class="line">    arr[index2] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><p>也称递减增量排序算法，是插入排序的一种更高效的改进版本。</p><ul><li>希尔排序的思想是使数组中任意间隔为 h 的元素是有序的；</li><li>如果需要解决一个排序问题而又没有系统排序函数可用，可先用希尔排序，然后再考虑是否值得将它替换为更加复杂的排序算法。</li></ul><h2 id="Python3-代码-6"><a href="#Python3-代码-6" class="headerlink" title="Python3 代码"></a>Python3 代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    n = len(arr)</span><br><span class="line">    gap = n // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> gap &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(gap, n):</span><br><span class="line">            temp = arr[i]</span><br><span class="line">            j = i</span><br><span class="line">            <span class="keyword">while</span> j &gt;= gap <span class="keyword">and</span> temp &lt; arr[j - gap]:</span><br><span class="line">                arr[j] = arr[j - gap]</span><br><span class="line">                j -= gap</span><br><span class="line">            arr[j] = temp</span><br><span class="line">        gap //= <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="Java-代码-6"><a href="#Java-代码-6" class="headerlink" title="Java 代码"></a>Java 代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">newSort</span><span class="params">(Comparable[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = arr.length;</span><br><span class="line">    <span class="keyword">int</span> gap = length / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = gap; i &lt; length; i++) &#123;</span><br><span class="line">            Comparable temp = arr[i];</span><br><span class="line">            <span class="keyword">int</span> j = i;</span><br><span class="line">            <span class="keyword">for</span> (;j &gt;= gap &amp;&amp; temp.compareTo(arr[j - gap]) &lt; <span class="number">0</span>; j -= gap)</span><br><span class="line">                arr[j] = arr[j - gap];</span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h1><ol><li>选择排序算法<ul><li><a href="https://github.com/tyrotalk/Algorithms-in-Action/tree/master/01-Sorting-Basic/Code-Python/selection_sort" target="_blank" rel="noopener">Python</a></li><li><a href="https://github.com/tyrotalk/Algorithms-in-Action/tree/master/01-Sorting-Basic/Code-Java/src/sortingBasic/selectionSort" target="_blank" rel="noopener">Java</a></li></ul></li><li>插入排序算法<ul><li><a href="https://github.com/tyrotalk/Algorithms-in-Action/tree/master/01-Sorting-Basic/Code-Python/insertion_sort" target="_blank" rel="noopener">Python</a></li><li><a href="https://github.com/tyrotalk/Algorithms-in-Action/tree/master/01-Sorting-Basic/Code-Java/src/sortingBasic/insertionSort" target="_blank" rel="noopener">Java</a></li></ul></li><li>优化后插入排序算法<ul><li><a href="https://github.com/tyrotalk/Algorithms-in-Action/tree/master/01-Sorting-Basic/Code-Python/insertion_sort_advance" target="_blank" rel="noopener">Python</a></li><li><a href="https://github.com/tyrotalk/Algorithms-in-Action/tree/master/01-Sorting-Basic/Code-Java/src/sortingBasic/insertionSortAdvance" target="_blank" rel="noopener">Java</a></li></ul></li><li>冒泡排序算法<ul><li><a href="https://github.com/tyrotalk/Algorithms-in-Action/tree/master/01-Sorting-Basic/Code-Python/bubble_sort" target="_blank" rel="noopener">Python</a></li><li><a href="https://github.com/tyrotalk/Algorithms-in-Action/tree/master/01-Sorting-Basic/Code-Java/src/sortingBasic/bubbleSort" target="_blank" rel="noopener">Java</a></li></ul></li><li>希尔排序<ul><li><a href="https://github.com/tyrotalk/Algorithms-in-Action/tree/master/01-Sorting-Basic/Code-Python/shell_sort" target="_blank" rel="noopener">Python</a></li><li><a href="https://github.com/tyrotalk/Algorithms-in-Action/tree/master/01-Sorting-Basic/Code-Java/src/sortingBasic/shellSort" target="_blank" rel="noopener">Java</a></li></ul></li></ol>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>初识Firebase</title>
      <link href="/2017/05/20/%E5%88%9D%E8%AF%86Firebase.html/"/>
      <url>/2017/05/20/%E5%88%9D%E8%AF%86Firebase.html/</url>
      <content type="html"><![CDATA[<p><a href="http://www.studyjamscn.com/" target="_blank" rel="noopener">Google Study Jams 活动官网</a><br><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识Firebase/firebase.jpg"><br><a id="more"></a></p><h1 id="Firebase-是什么"><a href="#Firebase-是什么" class="headerlink" title="Firebase 是什么"></a>Firebase 是什么</h1><p>Firebase 是一个移动平台，可帮助快速开发优秀的应用，扩大用户群，并赚取更多收益。Firebase 由大量相辅相成的功能组成，可以自行混搭使用这些功能以满足自己的需求。</p><h1 id="Firebase-功能"><a href="#Firebase-功能" class="headerlink" title="Firebase 功能"></a>Firebase 功能</h1><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识Firebase/function.png"><h2 id="Analytics-Firebase-的核心"><a href="#Analytics-Firebase-的核心" class="headerlink" title="Analytics(Firebase 的核心)"></a>Analytics(Firebase 的核心)</h2><ol><li><a href="https://firebase.google.cn/docs/analytics/?hl=zh-cn" target="_blank" rel="noopener">Analytics</a>: 一款免费的应用测量解决方案，该解决方案可以提供关于应用使用量和用户参与度的数据分析。<h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2></li><li><a href="https://firebase.google.cn/docs/cloud-messaging/?hl=zh-cn" target="_blank" rel="noopener">Firebase Cloud Messaging (FCM)(云消息传递)</a>: 一种跨平台消息传递解决方案，您可以使用它免费且可靠地传递消息和通知。</li><li><a href="https://firebase.google.cn/docs/auth/?hl=zh-cn" target="_blank" rel="noopener">Authentication(身份验证)</a>: 提供后端服务、易用 SDK 和现成 UI 库来向应用验证用户的身份。它支持使用密码、深受欢迎的联合用户身份提供商（如 Google、Facebook 和 Twitter）等方法进行身份验证。</li><li><a href="https://firebase.google.cn/docs/database/?hl=zh-cn" target="_blank" rel="noopener">Realtime Database(实时数据库)</a>: 一种云托管数据库。数据库将数据存储为 JSON，并以实时方式与每个连接的客户端同步。 </li><li><a href="https://firebase.google.cn/docs/storage/?hl=zh-cn" target="_blank" rel="noopener">Storage(存储)</a>: 专为需要存储和呈现用户生成的内容（例如照片或视频）的应用开发者构建。</li><li><a href="https://firebase.google.cn/docs/hosting/?hl=zh-cn" target="_blank" rel="noopener">Hosting(托管)</a>: 为网络应用提供快速安全的静态托管。</li><li><a href="https://firebase.google.cn/docs/remote-config/?hl=zh-cn" target="_blank" rel="noopener">Remote Config(远程配置)</a>: 在不发布应用更新的情况下更改您的应用的行为和外观。</li><li><a href="https://firebase.google.cn/docs/test-lab/?hl=zh-cn" target="_blank" rel="noopener">Test Lab for Android(测试实验室)</a>: 在 Google 数据中心内托管的设备上测试您的应用。</li><li><a href="https://firebase.google.cn/docs/crash/?hl=zh-cn" target="_blank" rel="noopener">Crash Reporting(崩溃报告)</a>: 综合性可操作信息，旨在帮助诊断和修复应用中的问题。<h2 id="增长"><a href="#增长" class="headerlink" title="增长"></a>增长</h2></li><li><a href="https://firebase.google.cn/docs/notifications/?hl=zh-cn" target="_blank" rel="noopener">Notifications(通知)</a>: 一种支持为移动应用开发者发送具有针对性的用户通知的免费服务。</li><li><a href="https://firebase.google.cn/docs/app-indexing/?hl=zh-cn" target="_blank" rel="noopener">App Indexing</a>: 将应用纳入 Google 搜索。 如果当用户搜索相关内容时已安装您的应用，则他们可以直接从搜索结果中启动您的应用。 如果用户还未安装应用，则将在搜索结果中显示安装卡片。添加 App Indexing 推广 Google 搜索内的应用结果类型，并提供查询自动填充功能。</li><li><a href="https://firebase.google.cn/docs/dynamic-links/?hl=zh-cn" target="_blank" rel="noopener">Dynamic Links(动态链接)</a>: 能够动态更改其行为以便在不同的平台提供最佳体验的智能网址。</li><li><a href="https://firebase.google.cn/docs/invites/?hl=zh-cn" target="_blank" rel="noopener">Invites(邀请)</a>: 用于发送个性化电子邮件和短信邀请， 载入用户和衡量邀请影响的跨平台解决方案。</li><li><a href="https://firebase.google.cn/docs/adwords/?hl=zh-cn" target="_blank" rel="noopener">AdWords</a>: 通过在线广告赢得潜在客户。<h2 id="获利"><a href="#获利" class="headerlink" title="获利"></a>获利</h2></li><li><a href="https://firebase.google.cn/docs/admob/?hl=zh-cn" target="_blank" rel="noopener">AdMob by Google</a>: 通过移动应用及针对性应用内广告获利的最简单方法。</li></ol><h1 id="Firebase-连接-Android-项目"><a href="#Firebase-连接-Android-项目" class="headerlink" title="Firebase 连接 Android 项目"></a>Firebase 连接 Android 项目</h1><h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><ol><li>一台运行 Android 2.3 (Gingerbread) 或更新版本并运行 Google Play 服务 9.6.1 或更新版本的设备。<img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识Firebase/设备信息.jpeg"> <img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识Firebase/GooglePlayService.jpeg"></li><li>Android SDK包含 Google Play Services 30 或更高版本、Google Repository 26 或更高版本。<img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识Firebase/SDKTools.png"></li><li>Android Studio 1.5 或更高版本。<img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识Firebase/Updates.png"></li></ol><h2 id="将-Firebase-添加至应用"><a href="#将-Firebase-添加至应用" class="headerlink" title="将 Firebase 添加至应用"></a>将 Firebase 添加至应用</h2><ol><li>创建 Android Studio 项目</li><li>在 <a href="https://console.firebase.google.com/?hl=zh-cn" target="_blank" rel="noopener">Firebase 控制台</a>创建项目<img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识Firebase/创建项目.png"><blockquote><p>“国家／地区” 与货币有关。</p></blockquote></li><li><p>将 Firebase 添加到您的 Android 应用</p><ol><li>点击带有 Android 标志的大按钮；<img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识Firebase/关联应用.png"></li><li>注册应用<img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识Firebase/注册应用.png"><blockquote><ul><li>软件包名称可在<strong>应用级 build.gradle 文件</strong>查看<img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识Firebase/applicationID.png"></li><li>查看调试签名证书 SHA1<ul><li><strong>方法一</strong>: 在终端(macOS系统)中使用<code>$ keytool -exportcert -alias androiddebugkey -keystore ~/.android/debug.keystore -list -v -storepass android</code>命令查看调试签名证书 SHA1。</li><li><strong>方法二</strong>: 在 Android Studio 中获取<img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识Firebase/SHA1.png"></li></ul></li></ul></blockquote></li><li>下载配置文件<img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识Firebase/下载配置文件.png"><blockquote><p><strong>注意</strong>: 当你的 Firebase 配置更改后，需要重新下载 google-services.json 文件到你的项目。</p></blockquote></li><li>添加 Firebase SDK<img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识Firebase/添加FirebaseSDK.png"><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识Firebase/gradle.png"></li><li><p>添加 Firebase 可用库<br>在应用级 build.gradle 文件中 dependencies 处 添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  // ...</span><br><span class="line">  compile &apos;com.google.firebase:firebase-core:9.6.1&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>验证 Firebase 是否正确初始化<br>在 Android studio 中运行项目，查看 logcat，看到<strong>FirebaseApp initialization successful</strong>极为成功。</p><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识Firebase/验证.png"></li></ol></li></ol><h1 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h1><ol><li><a href="https://firebase.google.cn/?hl=zh-cn" target="_blank" rel="noopener">Firebase 官网</a></li><li><a href="https://firebase.google.cn/docs/android/setup?hl=zh-cn#available_libraries" target="_blank" rel="noopener">Firebase 可用库</a></li><li><a href="https://codelabs.developers.google.com/codelabs/firebase-android/#0" target="_blank" rel="noopener">官方教程</a></li><li>Android Studio 项目示例: <a href="https://firebase.google.com/docs/samples/#android" target="_blank" rel="noopener">Firebase 官方 FriendlyChat 示例</a></li></ol>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Firebase </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Google Study Jams 面向对象中的小东西</title>
      <link href="/2017/05/15/Google-Study-Jams-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84%E5%B0%8F%E4%B8%9C%E8%A5%BF.html/"/>
      <url>/2017/05/15/Google-Study-Jams-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84%E5%B0%8F%E4%B8%9C%E8%A5%BF.html/</url>
      <content type="html"><![CDATA[<h1 id="添加复选框"><a href="#添加复选框" class="headerlink" title="添加复选框"></a>添加复选框</h1><p>添加布局文件:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">CheckBox</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:id</span>=<span class="string">"@+id/_checkbox"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:text</span>=<span class="string">"checkbox"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>判断 CheckBox 是否选中(Java 代码):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CheckBox mCheckBox = (CheckBox) findViewById(R.id._checkbox);</span><br><span class="line"><span class="keyword">boolean</span> hasCheckBox = mCheckBox.isChecked();</span><br></pre></td></tr></table></figure></p><h1 id="添加画面滚动"><a href="#添加画面滚动" class="headerlink" title="添加画面滚动"></a>添加画面滚动</h1><p>更改布局文件，使用:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ScrollView</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line">&lt;/ScrollView&gt;</span><br></pre></td></tr></table></figure></p><h1 id="添加-EditText-文本框"><a href="#添加-EditText-文本框" class="headerlink" title="添加 EditText 文本框"></a>添加 EditText 文本框</h1><p>添加布局文件:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:id</span>=<span class="string">"@+id/editText_view"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:hint</span>=<span class="string">"editText"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:inputType</span>=<span class="string">"textMultiLine"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>获取文本(java 代码):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EditText mEditText = (EditText) findViewById(R.id.editText_view);</span><br><span class="line">String text = mEditText.getText().toString();</span><br></pre></td></tr></table></figure></p><h1 id="使用-Intent-发送电子邮件"><a href="#使用-Intent-发送电子邮件" class="headerlink" title="使用 Intent 发送电子邮件"></a>使用 Intent 发送电子邮件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_SENDTO);</span><br><span class="line">intent.setData(Uri.parse(<span class="string">"mailto:"</span>)); <span class="comment">// only email apps should handle this</span></span><br><span class="line">intent.putExtra(Intent.EXTRA_TEXT, text); <span class="comment">// 邮件内容</span></span><br><span class="line">intent.putExtra(Intent.EXTRA_SUBJECT, subject); <span class="comment">// 邮件主题</span></span><br><span class="line"><span class="keyword">if</span> (intent.resolveActivity(getPackageManager()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="本地化"><a href="#本地化" class="headerlink" title="本地化"></a>本地化</h1><ol><li>根据应用的语言使用环境显示不同的语言，可在 <em>string.xml</em> 中打开 <strong>Open editor</strong> 配置;</li><li>当翻译的文本中有一部分不需要翻译时可以添加如 <code>&lt;xliff:g id=&quot;name&quot; example=&quot;Jack&quot;&gt;%%&lt;/xliff:g&gt;</code> 的文本。<blockquote><p>id: 不需要翻译文本的 id<br>example: 示例<br>%s: 字符串类型</p></blockquote></li></ol><h1 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h1><p><a href="https://s3.cn-north-1.amazonaws.com.cn/static-documents/nd803/Common+Android+Views+Cheat+Sheet.pdf" target="_blank" rel="noopener">常见 Android 视图备忘单链接</a><br><a href="http://developer.android.youdaxue.com/guide/components/intents-common.html?utm_source=udacity&amp;utm_medium=course&amp;utm_campaign=android_basics" target="_blank" rel="noopener">常见 Intent 指南</a></p>]]></content>
      
      <categories>
          
          <category> 移动开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>创建新的Activity</title>
      <link href="/2017/05/07/%E5%88%9B%E5%BB%BA%E6%96%B0%E7%9A%84Activity.html/"/>
      <url>/2017/05/07/%E5%88%9B%E5%BB%BA%E6%96%B0%E7%9A%84Activity.html/</url>
      <content type="html"><![CDATA[<h1 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h1><p>定义 <em>activity_main.xml</em> 、<em>activity_one.cml</em> 和与之对应的 <em>MainActivity.class</em> 、<em>OneActivity.class</em> 文件。<br>   <img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/创建新的Activity/定义.png"></p><a id="more"></a><h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><ol><li><p>在 <em>MainActivity.class</em> 定义一个 <strong>openOneList 方法</strong>，用于在 <em>activity_main.cml</em> 中打开 <em>activity_one.xml</em>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openOneList</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        Intent i = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, OneActivity.class);</span><br><span class="line">        startActivity(i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>在 <em>activity_main.xml</em> 中添加一个 Button:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"打开另一个Activity"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:onClick</span>=<span class="string">"openOneList"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>点击这个按钮会由 <strong>onClick</strong> 启动 <strong>openOneList 方法</strong>。</p></li><li><p>在 <em>activity_one.xml</em> 添加一个 TextView 用于表示 打开成功:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"这是另一个Activity"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"32sp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@android:color/holo_orange_light"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 <em>AndroidManifest.xml</em> 文件的 <em>application</em> 中添加 <code>&lt;activity android:name=&quot;.OneActivity&quot;/&gt;</code>。</p></li><li>演示   <img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/创建新的Activity/anotherActivity.gif"></li></ol><h1 id="使用事件监听器"><a href="#使用事件监听器" class="headerlink" title="使用事件监听器"></a>使用事件监听器</h1><ol><li><p>同样在 <em>activity_main.xml</em> 中添加一个 Button，并加上id:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/button_view"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"打开另一个Activity"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 <em>MainActivity.class</em> 连接 Button 视图:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Button button = (Button)findViewById(R.id.button_view);</span><br></pre></td></tr></table></figure></li><li><p>在 <em>MainActivity.class</em> 中创建事件监听器，重写 onClick 方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                Intent i = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, OneActivity.class);</span><br><span class="line">                startActivity(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> 移动开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android Studio 导入项目慢解决方法</title>
      <link href="/2017/05/01/Android-Studio-%E5%AF%BC%E5%85%A5%E9%A1%B9%E7%9B%AE%E6%85%A2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html/"/>
      <url>/2017/05/01/Android-Studio-%E5%AF%BC%E5%85%A5%E9%A1%B9%E7%9B%AE%E6%85%A2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html/</url>
      <content type="html"><![CDATA[<p>很多时候我们在 Android Studio 中导入项目时会很慢，一直处在 <strong>Building ‘#project’ Gradle project info</strong> 的状态。<br><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/Android-Studio-导入项目慢解决方法/info.png"><br><a id="more"></a></p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>导入很慢是因为 Android Studio 在下载适配的的 Gradle 文件，由于一些众所周知的原因，在国内下载非常慢。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><ol><li>随意打开一个已有的项目，找到 <strong>gradle-wrapper.properties</strong> 文件（在 <em>/gradle/wrappergradle-wrapper.properties</em> 中）；</li><li>将 <strong>distributionUrl</strong> 整行复制；<img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/Android-Studio-导入项目慢解决方法/gradle-wrapper.png"></li><li>在文件系统中打开要导入项目的 <strong>gradle-wrapper.properties</strong> 文件，将 <strong>distributionUrl</strong> 整行粘贴覆盖；<img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/Android-Studio-导入项目慢解决方法/distributionUrl.png"></li><li>继续在文件系统中打开要导入项目的 <strong>项目级 build.gradle</strong> 文件（／build.gradle），更改 <strong>Gradle</strong> 插件版本号（版本匹配关系可在<a href="https://developer.android.com/studio/releases/gradle-plugin.html" target="_blank" rel="noopener">官方文档</a>中查看）；<img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/Android-Studio-导入项目慢解决方法/build.gradle.png"></li><li>再次在 Android studio 中导入项目就行了。</li></ol>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Android Studio </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 基础：函数</title>
      <link href="/2017/04/26/Python-%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%87%BD%E6%95%B0.html/"/>
      <url>/2017/04/26/Python-%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%87%BD%E6%95%B0.html/</url>
      <content type="html"><![CDATA[<p>函数是带名字的代码块，用于完成具体的工作。要执行函数定义的特定任务，可调用该函数。</p><a id="more"></a><h1 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无参</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> &lt;函数名&gt;<span class="params">()</span>:</span></span><br><span class="line">    &lt;函数体&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有参</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> &lt;函数名&gt;<span class="params">(&lt;形参/实参&gt;)</span>:</span></span><br><span class="line">    &lt;函数体&gt;</span><br></pre></td></tr></table></figure><h1 id="传递实参"><a href="#传递实参" class="headerlink" title="传递实参"></a>传递实参</h1><p>函数定义中可能包含多个形参，所以函数调用中也可能包含多个实参。</p><h2 id="位置实参"><a href="#位置实参" class="headerlink" title="位置实参"></a>位置实参</h2><p>调用函数时，将函数调用中的每个实参顺序与函数定义中的形参顺序一一对应。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">language</span><span class="params">(name, type)</span>:</span></span><br><span class="line">        print(name + <span class="string">": "</span> + type)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>language(<span class="string">'Ted'</span>, <span class="string">'Python'</span>)</span><br><span class="line">Ted: Python</span><br></pre></td></tr></table></figure></p><h2 id="关键字实参"><a href="#关键字实参" class="headerlink" title="关键字实参"></a>关键字实参</h2><p>关键字实参是传递给函数的名称—值对。在函数调用中直接讲实参和形参名关联起来。关键字实参无需考虑函数调用中的实参顺序。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">language</span><span class="params">(name, type)</span>:</span></span><br><span class="line">        print(name + <span class="string">": "</span> + type)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>language(name=<span class="string">'Ted'</span>, type=<span class="string">'Python'</span>)</span><br><span class="line">Ted: Python</span><br></pre></td></tr></table></figure></p><h2 id="形参默认值"><a href="#形参默认值" class="headerlink" title="形参默认值"></a>形参默认值</h2><p>编写函数时，可以给每个形参指定默认值。在调用函数中如果给形参提供了实参，将使用提供的实参值；否则，将使用形参的默认值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">language</span><span class="params">(name, type=<span class="string">'Python'</span>)</span>:</span></span><br><span class="line">        print(name + <span class="string">": "</span> + type)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>language(<span class="string">'Ted'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>language(name=<span class="string">'Ted'</span>)</span><br><span class="line">Ted: Python</span><br><span class="line">Ted: Python</span><br></pre></td></tr></table></figure></p><h1 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h1><p>函数可以处理一些数据，并用 <code>return()</code> 语句返回一个或一组值。返回的值被称为返回值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">language</span><span class="params">(name, type)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">": "</span> + type</span><br></pre></td></tr></table></figure></p><blockquote><p>如果没有return语句，函数执行完毕后也会返回结果，只是结果为 <code>None</code>。<br><code>return None</code> 可以简写为 <code>return</code>。</p></blockquote><h1 id="传递任意数量的实参"><a href="#传递任意数量的实参" class="headerlink" title="传递任意数量的实参"></a>传递任意数量的实参</h1><p>有时函数需要任意数量的实参，可在函数定义中的形参名前加星号。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">language</span><span class="params">(*type)</span>:</span></span><br><span class="line">        print(type)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>language(<span class="string">'Python'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>language(<span class="string">'Python'</span>, <span class="string">'Java'</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">'Python'</span>,)</span><br><span class="line">(<span class="string">'Python'</span>, <span class="string">'Java'</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>形参名 <code>*type</code> 中的星号让 Python 创建一个名为 <code>type</code> 的空元组，并将收到的所有值都封装到这个元组中。</p></blockquote><h2 id="传递不同类型的实参"><a href="#传递不同类型的实参" class="headerlink" title="传递不同类型的实参"></a>传递不同类型的实参</h2><p>如果要让函数接受不同类型的实参，必须在函数定义中将接纳任意数量实参的形参放在最后。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">language</span><span class="params">(name, *type)</span>:</span></span><br><span class="line">        print(&#123;name: type&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>language(<span class="string">'Ted'</span>, <span class="string">'Python'</span>, <span class="string">'Java'</span>)</span><br><span class="line">&#123;<span class="string">'Ted'</span>: (<span class="string">'Python'</span>, <span class="string">'Java'</span>)&#125;</span><br></pre></td></tr></table></figure></p><h2 id="使用任意数量的关键字实参"><a href="#使用任意数量的关键字实参" class="headerlink" title="使用任意数量的关键字实参"></a>使用任意数量的关键字实参</h2><p>有时候，需要接受任意数量的实参，但预先不知道传递给函数的会是什么样的信息。可将函数编写成能够接受任意数量的 键-值 对。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">language</span><span class="params">(name, **type)</span>:</span></span><br><span class="line">        dict = &#123;&#125;</span><br><span class="line">        dict[<span class="string">'name'</span>] = name</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> type.items():</span><br><span class="line">            dict[key] = value</span><br><span class="line">        print(dict)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>language(<span class="string">'Ted'</span>, one=<span class="string">'Python'</span>, two=<span class="string">'Java'</span>)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'Ted'</span>, <span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>形参名 <code>**type</code> 中的两个星号让 Python 创建一个名为 <code>type</code> 的空字典，并将收到的所有名称—值对都封装到这个字典中。</p></blockquote><h1 id="将函数存储在模块中"><a href="#将函数存储在模块中" class="headerlink" title="将函数存储在模块中"></a>将函数存储在模块中</h1><p>可将定义的函数放在一个独立文件（模块）中，使用 <code>import</code> 语句导入到需要使用的程序文件中。<br>导入模块的方法有：</p><ol><li>导入整个模块</li><li>导入特定的函数</li><li>使用 as 给函数指定别名</li><li>使用 as 给模块指定别名</li><li>导入模块中的所有函数</li></ol><h2 id="导入整个模块"><a href="#导入整个模块" class="headerlink" title="导入整个模块"></a>导入整个模块</h2><p>创建 <code>language.py</code> 模块文件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_language</span><span class="params">(name, *type)</span>:</span></span><br><span class="line">    print(&#123;name: type&#125;)</span><br></pre></td></tr></table></figure></p><p>创建 <code>languages.py</code> 文件，在其中使用 <code>make_language()</code> 函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> language</span><br><span class="line">language.make_language(<span class="string">'Ted'</span>, <span class="string">'Python'</span>, <span class="string">'Java'</span>)</span><br></pre></td></tr></table></figure></p><h2 id="导入特定的函数"><a href="#导入特定的函数" class="headerlink" title="导入特定的函数"></a>导入特定的函数</h2><p>语法：<br><code>from module_name import function_name</code><br>或导入任意数量的函数：<br><code>from module_name import function_name_1, function_name_2</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line"><span class="keyword">from</span> language <span class="keyword">import</span> make_language</span><br><span class="line"></span><br><span class="line">make_language(<span class="string">'Ted'</span>, <span class="string">'Python'</span>, <span class="string">'Java'</span>)</span><br></pre></td></tr></table></figure></p><h2 id="使用-as-给函数指定别名"><a href="#使用-as-给函数指定别名" class="headerlink" title="使用 as 给函数指定别名"></a>使用 <code>as</code> 给函数指定别名</h2><p>语法：<br><code>from module_name import function_name as fn</code></p><blockquote><p>将导入的函数名 <code>function_name</code> 重命名为 <code>fn</code>。</p></blockquote><h2 id="使用-as-给模块指定别名"><a href="#使用-as-给模块指定别名" class="headerlink" title="使用 as 给模块指定别名"></a>使用 as 给模块指定别名</h2><p>语法：<br><code>import module_name as mn</code></p><blockquote><p>将导入的模块名 <code>module_name</code> 重命名为 <code>mn</code>，函数名不变。</p></blockquote><h2 id="导入模块中的所有函数"><a href="#导入模块中的所有函数" class="headerlink" title="导入模块中的所有函数"></a>导入模块中的所有函数</h2><p>语法：<br><code>from module_name import *</code></p><h1 id="函数编写规范"><a href="#函数编写规范" class="headerlink" title="函数编写规范"></a>函数编写规范</h1><ol><li>给函数指定描述性名称，且只在其中使用小写字母和下划线。</li><li>每个函数都应包含简要地阐述其功能的注释，该注释应紧跟在函数定义后面，并采用文档字符串格式。</li><li>给形参指定默认值时，等号两边不要有空格。函数调用中的关键字实参，等号两边也不要有空格</li><li>建议代码行的长度不要超过79字符，这样只要编辑器窗口适中，就能看到整行代码。</li><li>如果程序或模块包含多个函数，可使用两个空行将相邻的函数分开。</li><li>所有的import语句都应放在文件开头，在文件开头使用了注释来描述整个程序时例外。</li></ol>]]></content>
      
      <categories>
          
          <category> Python 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>篮球计分器实践</title>
      <link href="/2017/04/21/%E7%AF%AE%E7%90%83%E8%AE%A1%E5%88%86%E5%99%A8%E5%AE%9E%E8%B7%B5.html/"/>
      <url>/2017/04/21/%E7%AF%AE%E7%90%83%E8%AE%A1%E5%88%86%E5%99%A8%E5%AE%9E%E8%B7%B5.html/</url>
      <content type="html"><![CDATA[<p><a href="http://www.studyjamscn.com/" target="_blank" rel="noopener">Google Study Jams 活动官网</a><br><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/篮球计分器实践/developers.png"><br><a id="more"></a></p><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>根据两个球队所得分数（1、2、3分）累计各队总分并展示，比赛结束后分数清零。</p><h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><p>这里使用 <strong>RelativeLayout</strong>，包含有：</p><ol><li>ImageView(背景图片）</li><li><p>LinearLayout(A队、B队)</p><ul><li><p>LinearLayout(A队)</p><blockquote><p>TextView(队名)<br>TextView(分数)<br>Button(+1分)<br>Button(+2分)<br>Button(+3分)</p></blockquote></li><li><p>LinearLayout(A队)</p><blockquote><p>TextView(队名)<br>TextView(分数)<br>Button(+1分)<br>Button(+2分)<br>Button(+3分)</p></blockquote></li></ul></li><li><p>button(重置按钮)</p></li></ol><h1 id="UI优化"><a href="#UI优化" class="headerlink" title="UI优化"></a>UI优化</h1><p>操作栏和按钮颜色在styles.xml中统一设置。<br><strong>colorPrimary</strong>将更改操作栏的颜色。<strong>colorButtonNormal</strong>将更改按钮的颜色。</p><blockquote><p>注意：<strong>colorButtonNormal</strong>只能在搭载 API 22 及以上版本的手机上起到作用。如果手机版本更低，这些按钮将不会变成设置的颜色。</p></blockquote><h1 id="功能实现-代码"><a href="#功能实现-代码" class="headerlink" title="功能实现(代码)"></a>功能实现(代码)</h1><ol><li><p>activity_main.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">"com.example.android.courtcounter.MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:scaleType</span>=<span class="string">"centerCrop"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">"@drawable/basketball"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentStart</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentTop</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:fontFamily</span>=<span class="string">"sans-serif-bold"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:padding</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"Team A"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">"#616161"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">"20sp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/team_a_score"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:fontFamily</span>=<span class="string">"sans-serif-light"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:padding</span>=<span class="string">"4dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">"#ff0000"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">"112sp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginLeft</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginRight</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:onClick</span>=<span class="string">"addThreeForTeamA"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"+3 分"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginLeft</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginRight</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:onClick</span>=<span class="string">"addTwoForTeamA"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"+2 分"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginLeft</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginRight</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:onClick</span>=<span class="string">"addOneForTeamA"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"+1 分"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"1dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">"@android:color/darker_gray"</span>&gt;</span><span class="tag">&lt;/<span class="name">View</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:fontFamily</span>=<span class="string">"sans-serif-bold"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:padding</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"Team B"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">"#616161"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">"20sp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/team_b_score"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:fontFamily</span>=<span class="string">"sans-serif-light"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:padding</span>=<span class="string">"4dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">"#0000ff"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">"112sp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginLeft</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginRight</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:onClick</span>=<span class="string">"addThreeForTeamB"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"+3 分"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginLeft</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginRight</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:onClick</span>=<span class="string">"addTwoForTeamB"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"+2 分"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginLeft</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginRight</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:onClick</span>=<span class="string">"addOneForTeamB"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"+1 分"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"32dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:onClick</span>=<span class="string">"resetScoreForTeamAandB"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"重置"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>MainActivity.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.android.courtcounter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> android.content.DialogInterface;</span><br><span class="line"><span class="keyword">import</span> android.app.AlertDialog;</span><br><span class="line"><span class="keyword">import</span> android.app.AlertDialog.Builder;</span><br><span class="line"><span class="keyword">import</span> android.content.DialogInterface.OnClickListener;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Tracks score for Team A</span></span><br><span class="line">    <span class="keyword">int</span> scoreTeamA = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// Tracks score for Team B</span></span><br><span class="line">    <span class="keyword">int</span> scoreTeamB = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * increase the score for Team A by one point</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOneForTeamA</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        scoreTeamA += <span class="number">1</span>;</span><br><span class="line">        displayForTeamA(scoreTeamA);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * increase the score for Team A by two point</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTwoForTeamA</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        scoreTeamA += <span class="number">2</span>;</span><br><span class="line">        displayForTeamA(scoreTeamA);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * increase the score for Team A by three point</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addThreeForTeamA</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        scoreTeamA += <span class="number">3</span>;</span><br><span class="line">        displayForTeamA(scoreTeamA);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Displays the given score for Team A.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayForTeamA</span><span class="params">(<span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">        TextView scoreView = (TextView) findViewById(R.id.team_a_score);</span><br><span class="line">        scoreView.setText(String.valueOf(score));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * increase the score for Team B by one point</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOneForTeamB</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        scoreTeamB += <span class="number">1</span>;</span><br><span class="line">        displayForTeamB(scoreTeamB);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * increase the score for Team B by two point</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTwoForTeamB</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        scoreTeamB += <span class="number">2</span>;</span><br><span class="line">        displayForTeamB(scoreTeamB);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * increase the score for Team B by three point</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addThreeForTeamB</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        scoreTeamB += <span class="number">3</span>;</span><br><span class="line">        displayForTeamB(scoreTeamB);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Displays the given score for Team B.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayForTeamB</span><span class="params">(<span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">        TextView scoreView = (TextView) findViewById(R.id.team_b_score);</span><br><span class="line">        scoreView.setText(String.valueOf(score));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * reset the score for Team A both and Team B</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resetScoreForTeamAandB</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        AlertDialog.Builder builder = <span class="keyword">new</span> Builder(<span class="keyword">this</span>);</span><br><span class="line">        builder.setTitle(<span class="string">"重置"</span>);<span class="comment">//设置对话框的标题</span></span><br><span class="line">        builder.setMessage(<span class="string">"你确定要重置所有分数吗？"</span>);<span class="comment">//设置对话框的内容</span></span><br><span class="line">        builder.setPositiveButton(<span class="string">"确定"</span>, <span class="keyword">new</span> OnClickListener() &#123;  <span class="comment">//这个是设置确定按钮</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface arg0, <span class="keyword">int</span> arg1)</span> </span>&#123;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"重置成功"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                scoreTeamA = <span class="number">0</span>;</span><br><span class="line">                displayForTeamA(scoreTeamA);</span><br><span class="line">                scoreTeamB = <span class="number">0</span>;</span><br><span class="line">                displayForTeamB(scoreTeamB);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        builder.setNegativeButton(<span class="string">"取消"</span>, <span class="keyword">new</span> OnClickListener() &#123;  <span class="comment">//取消按钮</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface arg0, <span class="keyword">int</span> arg1)</span> </span>&#123;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"重置取消"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        AlertDialog b = builder.create();</span><br><span class="line">        b.show(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>styles.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Base application theme. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>#FFA000<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>#FFC107<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorButtonNormal"</span>&gt;</span>#FFC107<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="运行展示"><a href="#运行展示" class="headerlink" title="运行展示"></a>运行展示</h1><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/篮球计分器实践/展示01.png"> <img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/篮球计分器实践/展示02.png"> <img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/篮球计分器实践/展示03.png"><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>屏幕横屏显示时显示如下图：<br><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/篮球计分器实践/问题.png"></p><h2 id="解决方法一"><a href="#解决方法一" class="headerlink" title="解决方法一"></a>解决方法一</h2><p>限定屏幕方向为竖屏:<br>在 AndroidManifest.xml 中添加 android:screenOrientation=”portrait”; portrait 为竖屏。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"com.example.android.courtcounter"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">".MainActivity"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:screenOrientation</span>=<span class="string">"portrait"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="解决方法二"><a href="#解决方法二" class="headerlink" title="解决方法二"></a>解决方法二</h2><p>使用<strong>ScrollView</strong>加滚动条。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ScrollView</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fillViewport</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- everything you already have --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p><strong>注意</strong>:这种方法下横竖屏切换时原有数据会被初始化，这是因为Android Activity 有生命周期，后面我会写一篇文章介绍Activity生命周期。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 移动开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>认识ViewGroup</title>
      <link href="/2017/04/17/%E8%AE%A4%E8%AF%86ViewGroup.html/"/>
      <url>/2017/04/17/%E8%AE%A4%E8%AF%86ViewGroup.html/</url>
      <content type="html"><![CDATA[<p><a href="http://www.studyjamscn.com/" target="_blank" rel="noopener">Google Study Jams 活动官网</a><br><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/认识ViewGroup/developers.png"><br><a id="more"></a></p><h1 id="认识ViewGroup"><a href="#认识ViewGroup" class="headerlink" title="认识ViewGroup"></a>认识ViewGroup</h1><hr><p><strong>ViewGroup</strong> 是大视图，其中可包含小视图。小视图称为 ViewGroup 的子视图，可以是 TextView 或ImageView。ViewGroup 称为其子视图的父视图。<strong>ViewGroup</strong> 本身可能是透明的，仅用于包含及放置其子视图。但其子视图几乎始终可见。</p><h1 id="锚定视图"><a href="#锚定视图" class="headerlink" title="锚定视图"></a>锚定视图</h1><hr><p><strong>锚定</strong>——将视图锚定到屏幕的四条边是最容易的方法。当屏幕方向改变时，视图可以整齐的锚定于屏幕边缘。<br>使用RelativeLayout，可以很容易实现<strong>锚定视图</strong>。<br><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/认识ViewGroup/Anchored.jpg"> <img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/认识ViewGroup/Anchored-horizontal.jpg"><br>将 A、B、C 固定后，在横屏和竖屏下相对位置不变。</p><h1 id="线性布局-LinearLayout"><a href="#线性布局-LinearLayout" class="headerlink" title="线性布局(LinearLayout)"></a>线性布局(LinearLayout)</h1><hr><p><strong>LinearLayout</strong> 用于使所有子视图在单个方向（垂直或水平）保持对齐。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:orientation</span>=<span class="string">"vertical"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:text</span>=<span class="string">"some content"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:text</span>=<span class="string">"some content"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:text</span>=<span class="string">"some content"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/认识ViewGroup/LinearLayout.png"><h2 id="属性"><a href="#属性" class="headerlink" title="属性:"></a>属性:</h2><ol><li><code>android:orientation=&quot;vertical&quot;</code>: 垂直分布；<br><code>android:orientation=&quot;horizontal&quot;</code>: 水平分布。</li><li><code>android:layout_gravity</code>: 表示该组件在父控件中的位置;<br><code>android:gravity</code>: 表示该组件的子组件在自身中的位置。<blockquote><p>对于<strong>layout_gravity</strong>:</p><ul><li>属性可选值:<br>top, bottom, left, right, center, center_vertical, center_horizontal, fill, fill_vertical, fill_horizontal, clip_vertical, clip_horizontal, start, end；一个属性可以包含多个值，用 ‘|’ 分开即可；</li><li>当<code>android:orientation=&quot;vertical&quot;</code>时，只有水平方向的设置(left,right,center_horizontal)生效，垂直方向的设置无效；</li><li>当<code>android:orientation=&quot;horizontal&quot;</code>时，只有垂直方向的设置(top,bottom,center_vertical)生效，水平方向的设置无效；</li><li><strong>layout_gravity</strong> 对 <strong>RelativeLayout(相对布局)</strong> 无效。</li></ul></blockquote></li></ol><h2 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h2><p>垂直时:<code>layout_height:0dp</code><br>水平时:<code>layout_width:0dp</code><br>根据<strong>layout_weight</strong>的值所占比例分配子视图的高度或宽度。<br>权重layout_weight在不设置情况下默认为0。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@android:color/holo_blue_dark"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"some content"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@android:color/holo_orange_dark"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"some content"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/认识ViewGroup/weight.png"><h1 id="相对布局-RelativeLayout"><a href="#相对布局-RelativeLayout" class="headerlink" title="相对布局(RelativeLayout)"></a>相对布局(RelativeLayout)</h1><hr><p><strong>RelativeLayout</strong> 是一种常见的 ViewGroup，允许我们相对于其自身的边缘放置其子项； 还允许我们相对于彼此之间的关系来安排子项。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_alignParentTop</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:text</span>=<span class="string">"upper left"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_alignParentTop</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:text</span>=<span class="string">"upper right"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:text</span>=<span class="string">"lower left"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/认识ViewGroup/RelativeLayout.png"><blockquote><p><strong>RelativeLayout</strong> 视图会发生重叠，视图标签顺序决定视图在屏幕上放置的顺序。</p></blockquote><h1 id="布局优化-使用padding、margin"><a href="#布局优化-使用padding、margin" class="headerlink" title="布局优化(使用padding、margin)"></a>布局优化(使用padding、margin)</h1><hr><ol><li><strong>android:padding</strong> 设置内边距；</li><li><strong>android:layout_margin</strong> 让视图的边留出一部分空白，使两个视图相互不接触，</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><hr><ol><li><a href="https://s3.cn-north-1.amazonaws.com.cn/static-documents/nd803/Android+for+All+%EF%BC%8D+Vocabulary+Glossary.pdf" target="_blank" rel="noopener">Android 词汇术语表</a></li><li><a href="https://developer.android.com/guide/topics/ui/layout/linear.html?hl=zh-cn" target="_blank" rel="noopener">Android 开发者文档: 线性布局</a></li><li><a href="https://developer.android.com/reference/android/widget/LinearLayout.LayoutParams.html#attr_android:layout_gravity" target="_blank" rel="noopener">Layout_gravity | Android Developers</a></li></ol>]]></content>
      
      <categories>
          
          <category> 移动开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 基础：字典</title>
      <link href="/2017/04/11/Python-%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%AD%97%E5%85%B8.html/"/>
      <url>/2017/04/11/Python-%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%AD%97%E5%85%B8.html/</url>
      <content type="html"><![CDATA[<p>在 Python 中，字典是一系列<strong>键 — 值（key - value）</strong>对。每个键都与一个值相关联，你可以使用键来访问与之相关联的值。可将任何 Python 对象用作字典中的值。</p><a id="more"></a><blockquote><p><strong>全文采用 Python3 版本</strong></p></blockquote><h1 id="字典的特点"><a href="#字典的特点" class="headerlink" title="字典的特点"></a>字典的特点</h1><ol><li>查找速度快；</li><li>存储的 <strong>key - value</strong> 对是没有顺序的；</li><li>作为 <strong>key</strong> 的元素必须不可变。</li></ol><h1 id="更改字典的键-—-值对"><a href="#更改字典的键-—-值对" class="headerlink" title="更改字典的键 — 值对"></a>更改字典的<strong>键 — 值</strong>对</h1><ol><li><p>添加<strong>键 — 值</strong>对<br> 添加<strong>键 — 值</strong>对，可依次指定字典名、用方括号括起的键和相关联的值。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>language = &#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(language)</span><br><span class="line">&#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>language[<span class="string">'three'</span>] = <span class="string">'JavaScript'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(language)</span><br><span class="line">&#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>, <span class="string">'three'</span>: <span class="string">'JavaScript'</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改字典的值<br> 修改字典中的值，可依次指定字典名、用方括号括起的键以及与该键相关联的新值。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>language = &#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>, <span class="string">'three'</span>: <span class="string">'JavaScript'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(language)</span><br><span class="line">&#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>, <span class="string">'three'</span>: <span class="string">'JavaScript'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>language[<span class="string">'three'</span>] = <span class="string">'C++'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(language)</span><br><span class="line">&#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>, <span class="string">'three'</span>: <span class="string">'C++'</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除<strong>键 — 值</strong>对<br> 可使用 <code>del</code> 语句彻底删除<strong>键 — 值</strong>对</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>language = &#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>, <span class="string">'three'</span>: <span class="string">'JavaScript'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(language)</span><br><span class="line">&#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>, <span class="string">'three'</span>: <span class="string">'JavaScript'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> language[<span class="string">'three'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(language)</span><br><span class="line">&#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h1><ol><li><p>遍历所有<strong>键 — 值</strong>对<br> 可使用 <code>for</code> 循环遍历字典。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>language = &#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>, <span class="string">'three'</span>: <span class="string">'JavaScript'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(language)</span><br><span class="line">&#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>, <span class="string">'three'</span>: <span class="string">'JavaScript'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> key, value <span class="keyword">in</span> language.items():</span><br><span class="line">        print(key + <span class="string">": "</span> + value)</span><br><span class="line">one: Python</span><br><span class="line">two: Java</span><br><span class="line">three: JavaScript</span><br></pre></td></tr></table></figure><blockquote><p><code>items()</code> 方法返回一个键—值对列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; &gt;&gt;&gt; key_value = []</span><br><span class="line">&gt; &gt;&gt;&gt; <span class="keyword">for</span> d <span class="keyword">in</span> language:</span><br><span class="line">&gt;         key_value.append(d)</span><br><span class="line">&gt; &gt;&gt;&gt; print(key_value)</span><br><span class="line">&gt; [(<span class="string">'one'</span>, <span class="string">'Python'</span>), (<span class="string">'two'</span>, <span class="string">'Java'</span>), (<span class="string">'three'</span>, <span class="string">'JavaScript'</span>)]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>遍历字典中的键或值<br> 可使用 <code>key()</code> 方法遍历字典中的键。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>language = &#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>, <span class="string">'three'</span>: <span class="string">'JavaScript'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(language)</span><br><span class="line">&#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>, <span class="string">'three'</span>: <span class="string">'JavaScript'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> dict_key <span class="keyword">in</span> language.key():</span><br><span class="line">        print(dict_key)</span><br><span class="line">one</span><br><span class="line">two</span><br><span class="line">three</span><br></pre></td></tr></table></figure><blockquote><p><code>.key()</code> 可省略</p></blockquote><p> 可使用 <code>values()</code> 方法遍历字典中的值</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>language = &#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>, <span class="string">'three'</span>: <span class="string">'JavaScript'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(language)</span><br><span class="line">&#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>, <span class="string">'three'</span>: <span class="string">'JavaScript'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> dict_value <span class="keyword">in</span> language.values():</span><br><span class="line">        print(dict_value)</span><br><span class="line">Python</span><br><span class="line">Java</span><br><span class="line">JavaScript</span><br></pre></td></tr></table></figure></li><li><p>按顺序遍历遍历字典中的键或值<br> 要以特定的顺序返回元素，可在for循环中使用 <code>sorted()</code> 函数进行排序。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>language = &#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>, <span class="string">'three'</span>: <span class="string">'JavaScript'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(language)</span><br><span class="line">&#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>, <span class="string">'three'</span>: <span class="string">'JavaScript'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> dict_key <span class="keyword">in</span> sorted(language.key()):</span><br><span class="line">        print(dict_key)</span><br><span class="line">one</span><br><span class="line">three</span><br><span class="line">two</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> dict_value <span class="keyword">in</span> sorted(language.values()):</span><br><span class="line">        print(dict_value)</span><br><span class="line">Java</span><br><span class="line">JavaScript</span><br><span class="line">Python</span><br></pre></td></tr></table></figure></li><li><p>set（集合）<br> 集合类似于列表，但每个元素都必须是独一无二的。可用来去除重复项。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>language = &#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>, <span class="string">'three'</span>: <span class="string">'Python'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(language)</span><br><span class="line">&#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>, <span class="string">'three'</span>: <span class="string">'Python'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> dict_value <span class="keyword">in</span> set(language.values()):</span><br><span class="line">        print(dict_value)</span><br><span class="line">Java</span><br><span class="line">Python</span><br></pre></td></tr></table></figure></li></ol><h1 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h1><p>将一系列字典存储在列表中，或将列表作为值存储在字典中，称为嵌套。</p><ol><li><p>列表中存储字典</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>language_1 = &#123;<span class="string">'name'</span>: <span class="string">'Ted'</span>, <span class="string">'favourite_language'</span>: <span class="string">'Python'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>language_2 = &#123;<span class="string">'name'</span>: <span class="string">'Tom'</span>, <span class="string">'favourite_language'</span>: <span class="string">'Java'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>language = [language_1, language_2]</span><br></pre></td></tr></table></figure></li><li><p>字典中存储列表</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>language = &#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: [<span class="string">'Java'</span>, <span class="string">'JavaScript'</span>]&#125;</span><br></pre></td></tr></table></figure></li><li><p>字典中存储字典</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>language = &#123;</span><br><span class="line">        language_1: &#123;<span class="string">'one'</span>: <span class="string">'Python'</span>&#125;,</span><br><span class="line">        language_2: &#123;<span class="string">'two'</span>: <span class="string">'Java'</span>&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> Python 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>初识View</title>
      <link href="/2017/04/08/%E5%88%9D%E8%AF%86View.html/"/>
      <url>/2017/04/08/%E5%88%9D%E8%AF%86View.html/</url>
      <content type="html"><![CDATA[<p>开始学习 Android，发现了 Google 官方的 <a href="http://www.studyjamscn.com/" target="_blank" rel="noopener">Study Jams</a> 活动，就参加了。<br><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识View/developers.png"></p><a id="more"></a><h1 id="Layout（布局）"><a href="#Layout（布局）" class="headerlink" title="Layout（布局）"></a>Layout（布局）</h1><p>应用的<strong>布局</strong>指屏幕上显示的设计或布置。<br>该<strong>用户界面</strong>由<strong>视图</strong>矩形区域构成。大视图可以包含小视图，并且始终有一个包含所有其他视图的最大视图。<br><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识View/layout.png"></p><h1 id="User-Interface（用户界面）"><a href="#User-Interface（用户界面）" class="headerlink" title="User Interface（用户界面）"></a>User Interface（用户界面）</h1><p>应用的<strong>用户界面</strong>是我们在 Android 设备屏幕上所看到的内容</p><h1 id="View（视图）"><a href="#View（视图）" class="headerlink" title="View（视图）"></a>View（视图）</h1><p><strong>视图</strong>是屏幕上可见的矩形区域。<br>常见视图有：<strong>TextView</strong>, <strong>ImageView</strong>, <strong>Button</strong>。</p><blockquote><p>提到 View 就不得不提到 <strong>XML</strong>。<br><strong>XML</strong> 代表“可扩展标记语言”，用于编写以层次结构或家族树形式组织的信息，是描述 Android 应用的屏幕布局的理想语言。<br>代码示例<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:text</span>=<span class="string">"Hello"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:src</span>=<span class="string">"@drawable/mountain"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>其中 wrap_content —— 围绕其内容压缩视图；match_parent ——扩展视图以占用父视图的全部宽度/高度。  </p></blockquote><ol><li><p><strong>TextView</strong>——显示文本<br>Xml 代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:background</span>=<span class="string">"@color/colorAccent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:text</span>=<span class="string">"这是一个 TextView"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:textSize</span>=<span class="string">"36sp"</span> /&gt;</span></span><br></pre></td></tr></table></figure><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识View/TextView.png"><p>TextView 属性可查看开发者文档： <a href="https://developer.android.com/reference/android/widget/TextView.html" target="_blank" rel="noopener">TextView | Android Developers</a>  </p></li><li><p><strong>ImageView</strong>——显示图片<br>xml 代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:src</span>=<span class="string">"@drawable/sky"</span> /&gt;</span></span><br></pre></td></tr></table></figure> <img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识View/ImageView.png"><p> <code>android:src=“@drawable/sky</code> 中 @drawable/sky 为图片地址。<br> ImageView 属性可查看开发者文档： <a href="https://developer.android.com/reference/android/widget/ImageView.html" target="_blank" rel="noopener">ImageView | Android Developers</a>  </p></li></ol>]]></content>
      
      <categories>
          
          <category> 移动开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 基础：元组和切片</title>
      <link href="/2017/04/02/Python-%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%85%83%E7%BB%84%E5%92%8C%E5%88%87%E7%89%87.html/"/>
      <url>/2017/04/02/Python-%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%85%83%E7%BB%84%E5%92%8C%E5%88%87%E7%89%87.html/</url>
      <content type="html"><![CDATA[<p>元组——另一种有序、不可变的列表。<br>切片——处理列表的部分元素。</p><a id="more"></a><blockquote><p><strong>全文采用 Python3 版本</strong></p></blockquote><h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><h2 id="定义元组"><a href="#定义元组" class="headerlink" title="定义元组"></a>定义元组</h2><p>元组使用<code>()</code>代替列表的<code>[]</code>来标识。</p><ol><li><p>定义元组后，可以像访问列表元素一样使用索引来访问其元素。</p></li><li><p>元组没有<code>append()</code>方法，也没有<code>insert()</code>和<code>pop()</code>方法。</p><h2 id="创建单元素元组"><a href="#创建单元素元组" class="headerlink" title="创建单元素元组"></a>创建单元素元组</h2></li><li><p>空元组直接用<code>()</code>表示</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = ()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(t)</span><br><span class="line">()</span><br></pre></td></tr></table></figure></li><li><p>单元素元组要多加一个<code>,</code>号</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(t)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p> <code>()</code>既可以表示元组，又可以作为括号表示运算时的优先级，所以 <code>(1)</code>被Python解释器计算出结果 <em>1</em>。<br> 正确方式：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(t)</span><br><span class="line">(<span class="number">1</span>,)</span><br></pre></td></tr></table></figure></li></ol><h2 id="“可变”的元组"><a href="#“可变”的元组" class="headerlink" title="“可变”的元组"></a>“可变”的元组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="string">'a'</span>, <span class="string">'b'</span>, [<span class="string">'A'</span>, <span class="string">'B'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = t[<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list[<span class="number">1</span>] = <span class="string">'C'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(t)</span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>, [<span class="string">'A'</span>, <span class="string">'C'</span>])</span><br></pre></td></tr></table></figure><p>在这里，<em>B</em> 变为了 <em>C</em>，但元组本身并没有变。因为元组不变是指<strong>指向不变</strong>，虽然 list 中的元素改变了，但元组中 <em>t[2]</em> 仍然指向了这个 <em>list</em> 。</p><h2 id="修改元组变量"><a href="#修改元组变量" class="headerlink" title="修改元组变量"></a>修改元组变量</h2><p>虽然元组是不可变的，但给元组变量赋值是合法的。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(t)</span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(t)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure></p><h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h1><h2 id="创建切片"><a href="#创建切片" class="headerlink" title="创建切片"></a>创建切片</h2><p>要创建切片，可指定要使用的第一个元素和最后一个元素的索引。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'four'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(numbers[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line">[<span class="string">'two'</span>, <span class="string">'three'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(numbers[:<span class="number">3</span>])</span><br><span class="line">[<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(numbers[<span class="number">1</span>:])</span><br><span class="line">[<span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'four'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(numbers[<span class="number">-2</span>:])</span><br><span class="line">[<span class="string">'three'</span>, <span class="string">'four'</span>]</span><br></pre></td></tr></table></figure></p><p><strong>把列表换成元组，切片操作完全相同，只是切片的结果也是元组。</strong></p>]]></content>
      
      <categories>
          
          <category> Python 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 基础：列表</title>
      <link href="/2017/03/25/Python-%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%88%97%E8%A1%A8.html/"/>
      <url>/2017/03/25/Python-%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%88%97%E8%A1%A8.html/</url>
      <content type="html"><![CDATA[<p>列表由一系列按特定顺序排列的元素组成。在Python中，用方括号<code>[]</code>来表示列表，并用逗号来分隔其中的元素。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法格式</span></span><br><span class="line">&lt;list&gt; = [&lt;Expression&gt;, &lt;Expression&gt;, ...]</span><br></pre></td></tr></table></figure></p><a id="more"></a><blockquote><p>全文采用 Python3 版本</p></blockquote><h1 id="修改、添加、删除元素及列表合并"><a href="#修改、添加、删除元素及列表合并" class="headerlink" title="修改、添加、删除元素及列表合并"></a>修改、添加、删除元素及列表合并</h1><ol><li><p>修改列表元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过修改元素值改变现有列表的值</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="string">'H'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p[<span class="number">0</span>] = <span class="string">'Y'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p)</span><br><span class="line">[<span class="string">'Y'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>别名使用:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="string">'H'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q = p <span class="comment"># p 和 q 都指向对象: ['H', 'e', 'l', 'l', 'o']</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p[<span class="number">0</span>] = <span class="string">'Y'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p)</span><br><span class="line">[<span class="string">'Y'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(q)</span><br><span class="line">[<span class="string">'Y'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br><span class="line"><span class="comment"># p[0] = 'Y' 使对象改变，则 q 也改变</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>列表中添加元素</p><ol><li><p><code>append()</code>方法在列表末尾添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.append(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>insert()</code>方法在列表中添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.insert(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p)</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure></li></ol></li><li><p>删除列表元素</p><ol><li><p>使用方法<code>pop()</code> 返回列表末尾删除的值，原列表会改变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q = p.pop()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(q)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p)</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure></li><li><p>使用<code>del</code>语句删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> p[<span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>remove()</code>方法根据值删除元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.remove(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p)</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><blockquote><p><code>remove()</code>只删除第一个指定的值。如果要删除的值可能在列表中出现多次，需要使用循环来判断是否删除了所有这样的值。</p></blockquote></li></ol></li><li><p>用<code>+</code>进行列表合并</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print([<span class="number">1</span>, <span class="number">2</span>] + [<span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure></li></ol><h1 id="排列列表"><a href="#排列列表" class="headerlink" title="排列列表"></a>排列列表</h1><ol><li><p><code>sort()</code>方法对列表永久性排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="string">'d'</span>, <span class="string">'a'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'d'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(n)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><p>直接调用<code>sort()</code>方法按字母顺序、数字由小到大排列。向<code>sort()</code>方法传递参数<code>reverse=True</code>可按相反顺序排列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="string">'d'</span>, <span class="string">'a'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.sort(reverse=<span class="keyword">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p)</span><br><span class="line">[<span class="string">'o'</span>, <span class="string">'l'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n.sort(reverse=<span class="keyword">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(n)</span><br><span class="line">[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>sorted()</code>函数对列表临时排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="string">'d'</span>, <span class="string">'a'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(sorted(p))</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'d'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p)</span><br><span class="line">[<span class="string">'d'</span>, <span class="string">'a'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br></pre></td></tr></table></figure><p>向<code>sort()</code>函数传递参数<code>reverse=True</code>可按相反顺序排列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="string">'d'</span>, <span class="string">'a'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(sorted(p,reverse=<span class="keyword">True</span>))</span><br><span class="line">[<span class="string">'o'</span>, <span class="string">'l'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>reverve()</code>方法反转列表元素的排列顺序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="string">'d'</span>, <span class="string">'a'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.reverse()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p)</span><br><span class="line">[<span class="string">'o'</span>, <span class="string">'l'</span>, <span class="string">'a'</span>, <span class="string">'d'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n.reverse()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(n)</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure></li><li><p>列表长度<br><code>len()</code>函数确定列表的长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(len(l))</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="遍历列表"><a href="#遍历列表" class="headerlink" title="遍历列表"></a>遍历列表</h1><ol><li><p>用<code>for</code>循环遍历列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="keyword">for</span> &lt;name&gt; <span class="keyword">in</span> &lt;list&gt;:</span><br><span class="line">    &lt;Block&gt;</span><br></pre></td></tr></table></figure><p>使用for循环时，对于用于存储列表中每个值的临时变量，可指定任何名称。然而，选择描述单个列表元素的有意义的名称则更容易理解。<br>例如，对于小猫列表、小狗列表和一般性列表，像下面这样编写for循环的第一行代码更合适：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> cat <span class="keyword">in</span> cats:</span><br><span class="line"><span class="keyword">for</span> dog <span class="keyword">in</span> dogs:</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> list_of_items:</span><br></pre></td></tr></table></figure></li><li><p>索引<code>index()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line">&lt;list&gt;.index(&lt;value&gt;) <span class="comment"># 返回 value 在 list 中的索引</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p.index(<span class="number">2</span>))</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pirnt(p.index(<span class="number">3</span>))</span><br><span class="line"><span class="number">3</span> <span class="keyword">in</span> <span class="keyword">not</span> <span class="keyword">in</span> list</span><br></pre></td></tr></table></figure></li><li><p><code>in</code>操作符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line">&lt;value&gt; <span class="keyword">in</span> &lt;list)&gt; <span class="comment"># list 中有 value 返回 True，否则返回 False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="number">0</span> <span class="keyword">in</span> p)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="number">3</span> <span class="keyword">in</span> p)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><p> <code>not in</code>操作符与<code>in</code>相反</p></li></ol><h1 id="创建数值列表"><a href="#创建数值列表" class="headerlink" title="创建数值列表"></a>创建数值列表</h1><ol><li><p><code>range()</code>函数使用<br><code>range()</code>函数可以生成一系列数字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">        print(num)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></li><li><p><code>list()</code>函数将<code>range()</code>结果转换成列表<br>将<code>range()</code>作为<code>list()</code>的输入参数，可输出一个数字列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(list(range(<span class="number">1</span>, <span class="number">4</span>)))</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></li><li><p>简单计算数字列表<br>有几个处理数字列表的函数：找出最大值、最小值和求和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>digits = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>min(digits)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>max(digits)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum(digits)</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure></li><li><p>列表解析<br>列表解析将for循环和创建新元素的代码合并成一行，并自动附加新元素，以此来生成列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>squares = [value**<span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(squares)</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> Python 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 基础：基本运算符</title>
      <link href="/2017/03/17/Python-%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6.html/"/>
      <url>/2017/03/17/Python-%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6.html/</url>
      <content type="html"><![CDATA[<p>运算符的功能是完成某件事，由如<code>+</code>，<code>-</code>，<code>**</code>这样的符号或者其他特定的关键字表示。<br><a id="more"></a></p><blockquote><p><strong>全文采用 Python3 版本</strong></p></blockquote><h1 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h1><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>加</td></tr><tr><td>-</td><td>减</td></tr><tr><td>*</td><td>乘</td></tr><tr><td>/</td><td>除</td></tr><tr><td>%</td><td>取余</td></tr><tr><td>**</td><td>幂</td></tr><tr><td>//</td><td>取整除，返回商的整除部分</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>+<span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span><span class="number">-1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>*<span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span>/<span class="number">3</span></span><br><span class="line"><span class="number">1.3333333333333333</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span>%<span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span>**<span class="number">3</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span>//<span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>Python2.x 版本中，整数除以整数仍然得到整数。要得到小数，需其中一个数改为浮点数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span>/<span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span>/<span class="number">3.0</span></span><br><span class="line"><span class="number">1.3333333333333333</span></span><br></pre></td></tr></table></figure></p></blockquote><h1 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h1><p>比较运算符返回布尔值。</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>==</td><td>等于</td></tr><tr><td>!=</td><td>不等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b = <span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == b</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a != b</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &gt; b</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &lt; b</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &gt;= b</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &lt;= b</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><blockquote><p>Python2.x 版本中还有一个不等于比较运算符：<code>&lt;&gt;</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b = <span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &lt;&gt;b </span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p></blockquote><h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><p>逻辑运算符返回布尔值。</p><table><thead><tr><th>运算符</th><th>逻辑表达式</th><th>描述</th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>与：如果 x 为 False，返回 False，否则返回 y 的计算值</td></tr><tr><td>or</td><td>x or y</td><td>或：如果 x 为 True，返回 True，否则返回 y 的计算值</td></tr><tr><td>not</td><td>not x</td><td>非：如果 x 为 False，返回 True</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b = <span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">and</span> b</span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">or</span> b</span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> a</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><h1 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h1><p>成员运算符返回布尔值。</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>in</td><td>如果在指定的序列中找到值返回 True，否则返回 False</td></tr><tr><td>not in</td><td>如果在指定的序列中没有找到值返回 True，否则返回 False</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">in</span> list</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">not</span> <span class="keyword">in</span> list</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><h1 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h1><p>身份运算符用于比较两个对象的存储单元，返回布尔值。</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>is</td><td>判断两个标识符是不是引用自一个对象，是返回 True</td></tr><tr><td>is not</td><td>判断两个标识符是不是引用自不同对象，是返回True</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> <span class="keyword">not</span> b</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 基础: 字符串</title>
      <link href="/2017/03/13/Python-%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%AD%97%E7%AC%A6%E4%B8%B2.html/"/>
      <url>/2017/03/13/Python-%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%AD%97%E7%AC%A6%E4%B8%B2.html/</url>
      <content type="html"><![CDATA[<p>字符串是 Python 中最常用的数据类型。可以使用引号(‘或”)来创建字符串。<br>Python 中字符串是不可变的，一旦声明，不能改变。<br><a id="more"></a></p><blockquote><p><strong>全文采用 Python3 版本</strong></p></blockquote><ol><li><p>使用<code>title()</code>、<code>upper()</code>、<code>lower()</code> 方法修改字符串的大小写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># title() 将字符串首字符变为大写</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'sTring'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.title())</span><br><span class="line">STring</span><br><span class="line"></span><br><span class="line"><span class="comment"># upper() 将字符串改为全部大写</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.upper())</span><br><span class="line">STRING</span><br><span class="line"></span><br><span class="line"><span class="comment"># lower() 将字符串改为全部小写</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.lower())</span><br><span class="line">string</span><br></pre></td></tr></table></figure></li><li><p>合并（拼接）字符串<br>Python 使用 <code>+</code> 符号合并字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Hello, '</span> + <span class="string">'Python!'</span>)</span><br><span class="line">Hello, Python!</span><br></pre></td></tr></table></figure></li><li><p>用制表符<code>\t</code>或换行符<code>\n</code>添加空白</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'\tPython'</span>)</span><br><span class="line">Python</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Languages:\nPython\nJava'</span>)</span><br><span class="line">Languages:</span><br><span class="line">Python</span><br><span class="line">Java</span><br></pre></td></tr></table></figure></li><li><p>用<code>strip()</code>、<code>lstrip()</code>、<code>rstrip()</code>删除空白<br>这种删除只是暂时的，原变量不变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">' python '</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除首尾两端的空白</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.strip()</span><br><span class="line"><span class="string">'python'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除开头的空白</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.lstrip()</span><br><span class="line"><span class="string">'python '</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除末尾的空白</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">' string'</span>.rstrip())</span><br><span class="line"><span class="string">' string'</span></span><br></pre></td></tr></table></figure></li><li><p>正确使用单引号和双引号<br>在用单引号括起的字符串中，如果包含撇号，就将导致错误。<br>正确地使用单引号和双引号: 撇号位于两个双引号之间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确使用单、双引号举例:</span></span><br><span class="line">message = <span class="string">"One of Python's strengths is its diverse community."</span></span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure></li><li><p>Python3 和 Python2 的 print 函数区别</p><blockquote><p>Python 2 的 print 声明被 Python3 的 print() 函数取代</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python2 print 是一个声明，可用 () 构建元组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'a'</span>, <span class="string">'b'</span>)</span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>)</span><br></pre></td></tr></table></figure></blockquote></li><li><p>字符串 * 整数n = n 个 字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'$'</span> * <span class="number">3</span>)</span><br><span class="line">$$$</span><br></pre></td></tr></table></figure></li><li><p>索引字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 索引起始为 0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="string">'Udacity'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name[<span class="number">0</span>])</span><br><span class="line">U</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name[<span class="number">-1</span>]) <span class="comment"># 复数表示从后往前的索引</span></span><br><span class="line">y</span><br></pre></td></tr></table></figure></li><li><p>有范围的索引字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">word = <span class="string">'assume'</span></span><br><span class="line">print(word[m:n]) <span class="comment"># 输出索引 m 到 n-1 的所有字符串</span></span><br><span class="line">print(word[m:]) <span class="comment"># 输出从索引 m 开始及之后的所有字符串</span></span><br><span class="line">print(word[:n]) <span class="comment"># 输出索引 0 到 n-1 的所有字符串</span></span><br><span class="line">print(word[:]) <span class="comment"># 输出完整字符串</span></span><br></pre></td></tr></table></figure></li><li><p>用<code>find()</code>在字符串中查找字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pythagoras = <span class="string">'When all else is lost the future still remains.'</span></span><br><span class="line">print(pythagoras.find(<span class="string">'future'</span>)) <span class="comment"># 输出: 27 (即 'f' 的索引)</span></span><br><span class="line">print(pythagoras.find(<span class="string">'You'</span>)) <span class="comment"># 输出: -1 (未查到该字符串)</span></span><br><span class="line"></span><br><span class="line">print(pythagoras.find(<span class="string">''</span>)) <span class="comment"># 输出: 0</span></span><br></pre></td></tr></table></figure></li><li><p>数字查找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从索引 n (含) 之后查找</span></span><br><span class="line"><span class="comment"># 语法格式</span></span><br><span class="line">&lt;string&gt;.find(&lt;string&gt;, n)</span><br></pre></td></tr></table></figure></li><li><p>多重赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法格式</span></span><br><span class="line"></span><br><span class="line">&lt;name1&gt;, &lt;name2&gt;, ... = &lt;expression1&gt;, &lt;expression2&gt;, ..</span><br><span class="line"></span><br><span class="line"><span class="comment"># a 赋值 3, b 赋值 4</span></span><br><span class="line">a, b = <span class="number">3</span>, <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意: t 与 s 交换值</span></span><br><span class="line">s, t = t, s <span class="comment"># 赋值符合右边的值已经先确定</span></span><br></pre></td></tr></table></figure></li><li><p><code>str()</code> 函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># str(&lt;number&gt;): 将整数转换为字符串</span></span><br><span class="line">s = str(<span class="number">8</span>) <span class="comment"># s 为字符串: '8'</span></span><br></pre></td></tr></table></figure></li><li><p>长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># len(&lt;string&gt;): 字符串的长度</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'string'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(len(s))</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p>相反排列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'string'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s[::<span class="number">-1</span>])</span><br><span class="line">gnirts</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> Python 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
