<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>I&#39;M TWU</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tech.imtt.me/"/>
  <updated>2018-08-08T13:49:25.736Z</updated>
  <id>https://tech.imtt.me/</id>
  
  <author>
    <name>TuTeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Bean 管理</title>
    <link href="https://tech.imtt.me/2018/06/08/Spring-Bean-%E7%AE%A1%E7%90%86.html/"/>
    <id>https://tech.imtt.me/2018/06/08/Spring-Bean-管理.html/</id>
    <published>2018-06-08T08:12:29.000Z</published>
    <updated>2018-08-08T13:49:25.736Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在 Spring 中通过配置文件描述 Bean 和 Bean 之间的依赖关系，利用 Java 语言的反射功能实例化 Bean 并建立 Bean 之间的依赖关系。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="https://tech.imtt.me/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://tech.imtt.me/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 事务处理</title>
    <link href="https://tech.imtt.me/2018/06/05/MySQL-%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86.html/"/>
    <id>https://tech.imtt.me/2018/06/05/MySQL-事务处理.html/</id>
    <published>2018-06-05T10:16:00.000Z</published>
    <updated>2018-08-07T11:26:48.689Z</updated>
    
    <summary type="html">
    
      &lt;p&gt; 事务一般特指数据库事务（Database Transaction），是指作为一个程序执行单元执行的一系列操作，要么完全执行，要么完全不执行。 &lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://tech.imtt.me/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="https://tech.imtt.me/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Flask 中使用 WTForms 进行表单验证</title>
    <link href="https://tech.imtt.me/2018/05/27/Flask-%E4%B8%AD%E4%BD%BF%E7%94%A8-WTForms-%E8%BF%9B%E8%A1%8C%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81.html/"/>
    <id>https://tech.imtt.me/2018/05/27/Flask-中使用-WTForms-进行表单验证.html/</id>
    <published>2018-05-27T02:43:58.000Z</published>
    <updated>2018-06-07T04:16:06.829Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;很多时候需要对浏览器提交的表单数据进行限制或验证，在 Flask 中使用 &lt;a href=&quot;https://wtforms.readthedocs.io/en/stable/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WTForms&lt;/a&gt; 拓展模块是一个很好的选择。&lt;/p&gt;
&lt;p&gt;只需通过 pip 安装：&lt;code&gt;pip install WTForms&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Flask" scheme="https://tech.imtt.me/categories/Flask/"/>
    
    
      <category term="Python" scheme="https://tech.imtt.me/tags/Python/"/>
    
      <category term="Flask" scheme="https://tech.imtt.me/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>Flask 使用 request 获取请求参数</title>
    <link href="https://tech.imtt.me/2018/05/24/Flask-%E4%BD%BF%E7%94%A8-request-%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0.html/"/>
    <id>https://tech.imtt.me/2018/05/24/Flask-使用-request-获取请求参数.html/</id>
    <published>2018-05-24T02:14:59.000Z</published>
    <updated>2018-06-04T02:57:18.682Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Flask 从客户端收到请求时，要让视图函数能获取参数，有两种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将其作为参数传入视图函数，&lt;/li&gt;
&lt;li&gt;使用上下文全局变量 request。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Flask" scheme="https://tech.imtt.me/categories/Flask/"/>
    
    
      <category term="Python" scheme="https://tech.imtt.me/tags/Python/"/>
    
      <category term="Flask" scheme="https://tech.imtt.me/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>Flask 使用 BluePrint 注册视图函数</title>
    <link href="https://tech.imtt.me/2018/05/17/Flask-%E4%BD%BF%E7%94%A8-BluePrint-%E6%B3%A8%E5%86%8C%E8%A7%86%E5%9B%BE%E5%87%BD%E6%95%B0.html/"/>
    <id>https://tech.imtt.me/2018/05/17/Flask-使用-BluePrint-注册视图函数.html/</id>
    <published>2018-05-17T11:13:43.000Z</published>
    <updated>2018-06-04T02:57:13.687Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Flask 中的 Blueprint（蓝图）是什么？&lt;a href=&quot;http://flask.pocoo.org/docs/1.0/blueprints/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;的解释是「Flask uses a concept of &lt;em&gt;blueprints&lt;/em&gt; for making application components and supporting common patterns within an application or across applications. Blueprints can greatly simplify how large applications work and provide a central means for Flask extensions to register operations on applications. 」。但是，具体到代码中是怎样的呢？&lt;/p&gt;
    
    </summary>
    
      <category term="Flask" scheme="https://tech.imtt.me/categories/Flask/"/>
    
    
      <category term="Python" scheme="https://tech.imtt.me/tags/Python/"/>
    
      <category term="Flask" scheme="https://tech.imtt.me/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>JSP 内置对象</title>
    <link href="https://tech.imtt.me/2018/05/10/JSP-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1.html/"/>
    <id>https://tech.imtt.me/2018/05/10/JSP-内置对象.html/</id>
    <published>2018-05-10T01:14:00.000Z</published>
    <updated>2018-07-18T11:18:18.863Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;JSP 内置对象（又称隐含对象）共有9个，不需要预先声明就可以在脚本代码和表达式中使用。&lt;/p&gt;
    
    </summary>
    
      <category term="Java Web" scheme="https://tech.imtt.me/categories/Java-Web/"/>
    
    
      <category term="JSP" scheme="https://tech.imtt.me/tags/JSP/"/>
    
      <category term="Java" scheme="https://tech.imtt.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Flask 中的唯一 URL 原则</title>
    <link href="https://tech.imtt.me/2018/05/05/Flask-%E4%B8%AD%E7%9A%84%E5%94%AF%E4%B8%80-URL-%E5%8E%9F%E5%88%99.html/"/>
    <id>https://tech.imtt.me/2018/05/05/Flask-中的唯一-URL-原则.html/</id>
    <published>2018-05-05T11:05:43.000Z</published>
    <updated>2018-06-04T02:57:25.947Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;保证 URL 的唯一性，有助于避免搜索引擎索引同一个页面两次。&lt;/p&gt;
    
    </summary>
    
      <category term="Flask" scheme="https://tech.imtt.me/categories/Flask/"/>
    
    
      <category term="Python" scheme="https://tech.imtt.me/tags/Python/"/>
    
      <category term="Flask" scheme="https://tech.imtt.me/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 中的 B-Tree 索引和 Hash 索引</title>
    <link href="https://tech.imtt.me/2018/04/26/MySQL-%E4%B8%AD%E7%9A%84-B-Tree-%E7%B4%A2%E5%BC%95%E5%92%8C-Hash-%E7%B4%A2%E5%BC%95.html/"/>
    <id>https://tech.imtt.me/2018/04/26/MySQL-中的-B-Tree-索引和-Hash-索引.html/</id>
    <published>2018-04-26T02:07:24.000Z</published>
    <updated>2018-05-26T02:46:03.334Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;数据库学习笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;索引告诉了存储引擎如何快速找到需要存储的数据。&lt;/p&gt;
&lt;p&gt;MySQL 支持的常用索引为：B-Tree 索引和 Hash 索引。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://tech.imtt.me/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="https://tech.imtt.me/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 数据库分库分表</title>
    <link href="https://tech.imtt.me/2018/04/03/MySQL-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8.html/"/>
    <id>https://tech.imtt.me/2018/04/03/MySQL-数据库分库分表.html/</id>
    <published>2018-04-03T02:21:06.000Z</published>
    <updated>2018-05-24T12:58:31.987Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学习了分库分表，记一下笔记。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当数据库中的数据越来越多、数据库压力越来越大、数据库性能下降的时候，需要对单一主数据库服务器进行拆分来分担数据库压力。&lt;/p&gt;
&lt;p&gt;拆分的方式有三种：分库、分表和分片。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://tech.imtt.me/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="https://tech.imtt.me/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Python Socket 编程</title>
    <link href="https://tech.imtt.me/2018/03/16/Python-Socket-%E7%BC%96%E7%A8%8B.html/"/>
    <id>https://tech.imtt.me/2018/03/16/Python-Socket-编程.html/</id>
    <published>2018-03-16T02:00:27.000Z</published>
    <updated>2018-05-16T03:54:38.221Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;开放式系统互联（OSI）模型由下往上分为物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。TCP/IP 协议为五层，其中应用层处理 OSI 的会话层、表示层和应用层。而 Socket 是对 TCP/IP 协议的封装、是一个调用接口（API）。&lt;/p&gt;
    
    </summary>
    
      <category term="网络编程" scheme="https://tech.imtt.me/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="https://tech.imtt.me/tags/Python/"/>
    
      <category term="Socket" scheme="https://tech.imtt.me/tags/Socket/"/>
    
      <category term="TCP" scheme="https://tech.imtt.me/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>Django 内置模型字段类型</title>
    <link href="https://tech.imtt.me/2018/02/20/Django-%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9E%8B%E5%AD%97%E6%AE%B5%E7%B1%BB%E5%9E%8B.html/"/>
    <id>https://tech.imtt.me/2018/02/20/Django-内置模型字段类型.html/</id>
    <published>2018-02-20T11:42:35.000Z</published>
    <updated>2018-05-06T02:19:36.453Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Django 模型是使用 Python 代码对数据库中数据的描述，是数据的结构，等效于 SQL 中的 CREATE TABLE 语句。&lt;/p&gt;
&lt;p&gt;定义模型时，使用一个 Python 类（&lt;code&gt;django.db.models.Model&lt;/code&gt; 的子类）表示一个模型，模型中的一个属性对应数据库中表的列，属性名对应列的名称，字段类型（如 &lt;code&gt;CharField&lt;/code&gt; ）对应数据库列的类型（如 &lt;code&gt;varchar&lt;/code&gt;）。&lt;/p&gt;
    
    </summary>
    
      <category term="Django" scheme="https://tech.imtt.me/categories/Django/"/>
    
    
      <category term="Django" scheme="https://tech.imtt.me/tags/Django/"/>
    
      <category term="Python" scheme="https://tech.imtt.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Django 注册和登陆功能实现</title>
    <link href="https://tech.imtt.me/2018/02/05/Django-%E6%B3%A8%E5%86%8C%E5%92%8C%E7%99%BB%E9%99%86%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0.html/"/>
    <id>https://tech.imtt.me/2018/02/05/Django-注册和登陆功能实现.html/</id>
    <published>2018-02-05T06:05:51.000Z</published>
    <updated>2018-05-06T02:19:52.341Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Django 提供了用户身份验证机制，可实现注册和登录功能。&lt;/p&gt;
    
    </summary>
    
      <category term="Django" scheme="https://tech.imtt.me/categories/Django/"/>
    
    
      <category term="Django" scheme="https://tech.imtt.me/tags/Django/"/>
    
      <category term="Python" scheme="https://tech.imtt.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Django 配置 Mysql 数据库</title>
    <link href="https://tech.imtt.me/2018/01/26/Django-%E9%85%8D%E7%BD%AE-Mysql-%E6%95%B0%E6%8D%AE%E5%BA%93.html/"/>
    <id>https://tech.imtt.me/2018/01/26/Django-配置-Mysql-数据库.html/</id>
    <published>2018-01-26T08:48:41.000Z</published>
    <updated>2018-05-23T02:22:33.143Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Django 内置 SQLite 作为默认数据库，可以更改为其它数据库，如：postgresql、mysql、oracle。这里使用 mysql。&lt;/p&gt;
    
    </summary>
    
      <category term="Django" scheme="https://tech.imtt.me/categories/Django/"/>
    
    
      <category term="Django" scheme="https://tech.imtt.me/tags/Django/"/>
    
      <category term="Python" scheme="https://tech.imtt.me/tags/Python/"/>
    
      <category term="MySQL" scheme="https://tech.imtt.me/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>使用 reuqests 爬取豆瓣数据书籍 URL</title>
    <link href="https://tech.imtt.me/2017/11/20/%E4%BD%BF%E7%94%A8-reuqests-%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E6%95%B0%E6%8D%AE%E4%B9%A6%E7%B1%8D-URL.html/"/>
    <id>https://tech.imtt.me/2017/11/20/使用-reuqests-爬取豆瓣数据书籍-URL.html/</id>
    <published>2017-11-20T05:23:01.000Z</published>
    <updated>2018-05-06T02:22:06.577Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;使用 requests 库爬取豆瓣读书中所有书籍的 URL，并将其存储到 Mysql 中。&lt;br&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://tech.imtt.me/tags/Python/"/>
    
      <category term="爬虫" scheme="https://tech.imtt.me/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="requests" scheme="https://tech.imtt.me/tags/requests/"/>
    
  </entry>
  
  <entry>
    <title>Mongdb 简介及 Python 连接</title>
    <link href="https://tech.imtt.me/2017/11/04/Mongdb-%E7%AE%80%E4%BB%8B%E5%8F%8A-Python-%E8%BF%9E%E6%8E%A5.html/"/>
    <id>https://tech.imtt.me/2017/11/04/Mongdb-简介及-Python-连接.html/</id>
    <published>2017-11-04T01:19:56.000Z</published>
    <updated>2018-05-06T02:48:00.109Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://tech.imtt.me/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Python" scheme="https://tech.imtt.me/tags/Python/"/>
    
      <category term="Mongodb" scheme="https://tech.imtt.me/tags/Mongodb/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 简介及 Python 连接数据库</title>
    <link href="https://tech.imtt.me/2017/10/20/MySQL-%E7%AE%80%E4%BB%8B%E5%8F%8A-Python-%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93.html/"/>
    <id>https://tech.imtt.me/2017/10/20/MySQL-简介及-Python-连接数据库.html/</id>
    <published>2017-10-20T01:36:34.000Z</published>
    <updated>2018-08-07T11:27:02.955Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;MySQL 是一种 DBMS，即它是一种数据库软件。&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://tech.imtt.me/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Python" scheme="https://tech.imtt.me/tags/Python/"/>
    
      <category term="MySQL" scheme="https://tech.imtt.me/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Python 数据结构：二叉搜索树</title>
    <link href="https://tech.imtt.me/2017/10/02/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%91.html/"/>
    <id>https://tech.imtt.me/2017/10/02/Python-数据结构：树.html/</id>
    <published>2017-10-02T00:17:28.000Z</published>
    <updated>2018-05-03T11:43:06.468Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;树是一种抽象数据类型，用来模拟具有树状结构性质的数据集合。&lt;/p&gt;
&lt;img alt=&quot;图片说明&quot; class=&quot;class1 class2&quot; src=&quot;http://ot2o5t4xh.bkt.clouddn.com/static/images/Python-数据结构：树/tree.png&quot;&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://tech.imtt.me/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python" scheme="https://tech.imtt.me/tags/Python/"/>
    
      <category term="数据结构" scheme="https://tech.imtt.me/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="树" scheme="https://tech.imtt.me/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>SQL 学习笔记</title>
    <link href="https://tech.imtt.me/2017/09/23/SQL-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html/"/>
    <id>https://tech.imtt.me/2017/09/23/SQL-学习笔记.html/</id>
    <published>2017-09-23T05:18:58.000Z</published>
    <updated>2018-04-22T03:00:00.672Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.ituring.com.cn/book/1880&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SQL基础教程（第2版）&lt;/a&gt;学习笔记。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://tech.imtt.me/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="SQL" scheme="https://tech.imtt.me/tags/SQL/"/>
    
      <category term="数据库" scheme="https://tech.imtt.me/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>初识 Requests 库</title>
    <link href="https://tech.imtt.me/2017/09/16/%E5%88%9D%E8%AF%86-Requests-%E5%BA%93.html/"/>
    <id>https://tech.imtt.me/2017/09/16/初识-Requests-库.html/</id>
    <published>2017-09-16T07:06:21.000Z</published>
    <updated>2018-04-18T10:19:29.992Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Requests 库是一个处理复杂 HTTP 请求、cookie、header 等内容的 Python 第三方库。&lt;/p&gt;
    
    </summary>
    
      <category term="Python 库" scheme="https://tech.imtt.me/categories/Python-%E5%BA%93/"/>
    
    
      <category term="python 库" scheme="https://tech.imtt.me/tags/python-%E5%BA%93/"/>
    
      <category term="爬虫" scheme="https://tech.imtt.me/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Requests" scheme="https://tech.imtt.me/tags/Requests/"/>
    
  </entry>
  
  <entry>
    <title>Python 数据结构：列表</title>
    <link href="https://tech.imtt.me/2017/09/10/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E5%88%97%E8%A1%A8.html/"/>
    <id>https://tech.imtt.me/2017/09/10/Python-数据结构：列表.html/</id>
    <published>2017-09-10T01:15:15.000Z</published>
    <updated>2018-04-18T09:25:55.643Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;列表支持对线性集合的任何位置的项进行操作。对列表的操作主要有三类：基于索引的操作、基于内容的操作、基于位置的操作。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://tech.imtt.me/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python" scheme="https://tech.imtt.me/tags/Python/"/>
    
      <category term="数据结构" scheme="https://tech.imtt.me/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="列表" scheme="https://tech.imtt.me/tags/%E5%88%97%E8%A1%A8/"/>
    
  </entry>
  
</feed>
