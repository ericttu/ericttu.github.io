<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Spring 事务处理</title>
      <link href="/2018/07/01/Spring-%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86.html/"/>
      <url>/2018/07/01/Spring-%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86.html/</url>
      <content type="html"><![CDATA[<p>Spring 支持编程式事务处理和声明式事务处理。</p><a id="more"></a><h1 id="编程式事务处理"><a href="#编程式事务处理" class="headerlink" title="编程式事务处理"></a>编程式事务处理</h1><h2 id="基于底层-API"><a href="#基于底层-API" class="headerlink" title="基于底层 API"></a>基于底层 API</h2><p>在 Spring 事务管理中提供了非常完善的 API，最核心的三个接口主要是 <code>PlatformTransactionManager</code>、<code>TransactionDefinition</code> 和 <code>TransactionStatus</code>。</p><h3 id="关键-API"><a href="#关键-API" class="headerlink" title="关键 API"></a>关键 API</h3><p><code>TransactionDefinition</code> 用于描述控制事务具体行为的事务属性，包括隔离级别、超时时间、是否为只读事务和事务传播规则等，可以通过 XML 配置或注解描述提供；<code>PlatformTransactionManager</code> 根据 <code>TransactionDefinition</code> 提供的事务属性配置信息创建事务；并用 <code>TransactionStatus</code> 描述这个激活事务的状态。</p><h4 id="TransactionDefinition"><a href="#TransactionDefinition" class="headerlink" title="TransactionDefinition"></a>TransactionDefinition</h4><p><code>TransactionDefinition</code> 定义了 Spring 兼容的事务属性，以此来对事务管理控制的若干方面进行配置。如</p><ol><li><p>事务隔离级别</p><blockquote><ol><li><code>ISOLATION_DEFAULT</code> （使用数据库默认）</li><li><code>ISOLATION_READ_UNCOMMITTED</code></li><li><code>ISOLATION_READ_COMMITTED</code></li><li><code>ISOLATION_REPEATABLE_READ</code></li><li><code>ISOLATION_SERIALIZABLE</code></li></ol></blockquote></li><li><p>超时时间：<code>TIMEOUT_DEFAULT</code>（默认30秒）</p></li><li><p>事务传播行为</p><blockquote><ol><li><code>PROPAGATION_REQUIRED</code>（默认）：加入当前事务，如果当前没有事务，就新建一个事务；</li><li><code>PROPAGATION_SUPPORTS</code>：支持当前事务，如果当前没有事务，就以非事务方式执行；</li><li><code>PROPAGATION_MANDATORY</code>：支持当前事务，如果当前没有事务，就抛出异常。</li><li><code>PROPAGATION_REQUIRES_NEW</code>：新建事务，如果当前存在事务，把当前事务挂起；</li><li><code>PROPAGATION_NOT_SUPPORTED</code>：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起；</li><li><code>PROPAGATION_NEVER</code>：以非事务方式执行，如果当前存在事务，则抛出异常；</li><li><code>PROPAGATION_NESTED</code>：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，就新建一个事务。</li></ol></blockquote></li><li><p>只读状态</p></li></ol><h4 id="TransactionStatus"><a href="#TransactionStatus" class="headerlink" title="TransactionStatus"></a>TransactionStatus</h4><p><code>TransactionStatus</code> 代表了一个事务的具体运行状态。该接口继承自 <code>SavepointManager</code>，提供了如下几个方法：</p><ol><li><code>boolean hasSavepoint()</code>：判断当前事务是否在内部创建了一个保存点；</li><li><code>boolean isNewTransaction()</code>：判断当前事务是否是一个新的事务；</li><li><code>boolean isCompleted</code>：判断当前事务是否已经结束；</li><li><code>boolean isRollbackOnly()</code>：判断当前事务是否已被标识为 rollback-only；</li><li><code>void setRollbackOnly()</code>：将当前事务设置为 rollback-only。</li></ol><h4 id="PlatformTransactionManager"><a href="#PlatformTransactionManager" class="headerlink" title="PlatformTransactionManager"></a>PlatformTransactionManager</h4><p>开始事务后，事务只能提交或回滚，这些操作被归类到 <code>PlatformTransactionManager</code> 接口，该接口只定义三个方法：</p><ol><li><code>TransactionStatus getTransactionManager(TransactionDefinition definition)</code>：返回一个已存在的事务或创建一个新的事务；</li><li><code>commit(TransactionStatus status)</code>：提交事务，如果事务被标记为 rollback-only，则执行一个事务回滚操作；</li><li><code>rollback(TransactionStatus status)</code>：事务回滚。</li></ol><h4 id="事务管理实现类"><a href="#事务管理实现类" class="headerlink" title="事务管理实现类"></a>事务管理实现类</h4><p>Spring 为不同的持久化框架提供了事务管理实现类，如 <code>DataSourceTransactionManager</code>、<code>JpaTransactionManager</code> 和 <code>HibernateTransactionManager</code> 等，根据实际需要进行选择。</p><h3 id="实例准备"><a href="#实例准备" class="headerlink" title="实例准备"></a>实例准备</h3><p>在 maven 中引入相关依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.3.15.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.46<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于项目持久层，使用 Spring  JDBC Template，所以在配置文件 <code>spring-dao.xml</code> 内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/shiwu?useUnicode=true&amp;amp;characterEncoding=utf-8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.imtt.dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>说明：实体类 Order 和 Product 分别表示订单和商品，持久层（com.imtt.dao 包下）里的接口及其实现包含了对订单数据表和商品数据表的各种操作。</p></blockquote><h3 id="事务模拟"><a href="#事务模拟" class="headerlink" title="事务模拟"></a>事务模拟</h3><p>首先使用事务管理器的实例 <code>transactionManager</code> 调用 <code>getTransaction()</code> 方法开启一个事务，方法的参数是一个事务定义的实例 <code>transactionDefinition</code>，且返回一个事务状态的对象 <code>transactionStatus</code>。接着就可以进行持久化操作了。</p><p>事务结束后就调用事务管理器的 <code>commit()</code> 方法，且参数前面拿到的事务状态的对象；如果出现了异常就调用事务管理器的 <code>rollback()</code> 方法，参数仍为事务状态的对象。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.service.impl1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//持久化相关导入包</span></span><br><span class="line"><span class="keyword">import</span> com.imtt.dao.OrderDao;</span><br><span class="line"><span class="keyword">import</span> com.imtt.dao.ProductDao;</span><br><span class="line"><span class="keyword">import</span> com.imtt.entity.Order;</span><br><span class="line"><span class="keyword">import</span> com.imtt.entity.Product;</span><br><span class="line"><span class="keyword">import</span> com.imtt.service.OrderService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.TransactionDefinition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.TransactionStatus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderDao orderDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductDao productDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PlatformTransactionManager transactionManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TransactionDefinition transactionDefinition;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOrder</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        order.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        order.setStatus(<span class="string">"待付款"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启事务</span></span><br><span class="line">        TransactionStatus transactionStatus = transactionManager.getTransaction(transactionDefinition);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//持久化相关操作</span></span><br><span class="line">            orderDao.insert(order);</span><br><span class="line">            Product product = productDao.select(order.getProductsId());</span><br><span class="line">            product.setStock(product.getStock() - order.getNumber());</span><br><span class="line">            productDao.update(product);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//事务提交</span></span><br><span class="line">            transactionManager.commit(transactionStatus);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//事务回滚</span></span><br><span class="line">            transactionManager.rollback(transactionStatus);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring 配置文件 <code>spring-service1.xml</code>，主要包括事务事务管理器及状态的注入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-dao.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.imtt.service.impl1"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionDefinition"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.support.DefaultTransactionDefinition"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"propagationBehaviorName"</span> <span class="attr">value</span>=<span class="string">"PROPAGATION_REQUIRED"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="基于-TransactionTemplate"><a href="#基于-TransactionTemplate" class="headerlink" title="基于 TransactionTemplate"></a>基于 TransactionTemplate</h2><p>使用基于底层 API 的方式每次都想调用事务管理器开启一个事务就显得太麻烦，这时就可以使用 <code>TransactionTemplate</code> 来简化操作。</p><p><code>TransactionTemplate</code> 继承了 <code>DefaultTransactionDefinition</code>，里面有一个 <code>execute</code> 方法（<code>public &lt;T&gt; T execute(TransactionCallback&lt;T&gt; action) throws TransactionException</code>），其参数是一个表示回调函数的接口。在这个方法中包含了开启事务和提交事务的代码。</p><p>新的处理方法示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TransactionTemplate transactionTemplate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOrder</span><span class="params">(<span class="keyword">final</span> Order order)</span> </span>&#123;</span><br><span class="line">    order.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">    order.setStatus(<span class="string">"待付款"</span>);</span><br><span class="line"></span><br><span class="line">    transactionTemplate.execute(<span class="keyword">new</span> TransactionCallback() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">doInTransaction</span><span class="params">(TransactionStatus status)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//持久化相关操作</span></span><br><span class="line">                orderDao.insert(order);</span><br><span class="line">                Product product = productDao.select(order.getProductsId());</span><br><span class="line">                product.setStock(product.getStock() - order.getNumber());</span><br><span class="line">                productDao.update(product);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                status.setRollbackOnly();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>生成一个 <code>TransactionTemplate</code> 的实例，调用 <code>execute</code> 方法，方法里不需要显示的进行开启事务和提交事务的操作。方法的参数使用一个 <code>TransactionCallback</code> 的匿名内部类，其 <code>doInTransaction(TransactionStatus status)</code> 方法参数为一个事务状态的对象，在方法里进行我们自己的持久化操作，如果出现异常，通过事务状态的 <code>setRollbackOnly()</code> 方法将事务设置只能回滚状态。</p><p>当然在 Spring 配置中进行配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.support.TransactionTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">ref</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="声明式事务处理"><a href="#声明式事务处理" class="headerlink" title="声明式事务处理"></a>声明式事务处理</h1><p>Spring 的声明式事务处理是是建立在 AOP 的基础之上的，本质是对方法前后进行拦截，然后在目标方法开始之前创建或者加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。</p><blockquote><p>建议在开发中使用声明式事务，是因为这样可以使得业务代码纯粹干净，方便后期的代码维护。</p><p>且以基于 <code>&lt;tx&gt;</code> 命名空间 和 基于 <code>@Transactional</code> 这两种方式最常用。</p></blockquote><h2 id="基于-TransactionInterceptor"><a href="#基于-TransactionInterceptor" class="headerlink" title="基于 TransactionInterceptor"></a>基于 TransactionInterceptor</h2><p>基于声明式的事务处理其业务代码很简洁，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.service.impl3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imtt.dao.OrderDao;</span><br><span class="line"><span class="keyword">import</span> com.imtt.dao.ProductDao;</span><br><span class="line"><span class="keyword">import</span> com.imtt.entity.Order;</span><br><span class="line"><span class="keyword">import</span> com.imtt.entity.Product;</span><br><span class="line"><span class="keyword">import</span> com.imtt.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.TransactionStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.support.TransactionCallback;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.support.TransactionTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImp3</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderDao orderDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductDao productDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOrder</span><span class="params">(<span class="keyword">final</span> Order order)</span> </span>&#123;</span><br><span class="line">        order.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        order.setStatus(<span class="string">"待付款"</span>);</span><br><span class="line"></span><br><span class="line">        orderDao.insert(order);</span><br><span class="line">        Product product = productDao.select(order.getProductsId());</span><br><span class="line">        product.setStock(product.getStock() - order.getNumber());</span><br><span class="line">        productDao.update(product);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要在配置文件中配置拦截器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-dao.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.imtt.service.impl3"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"orderServiceTarget"</span> <span class="attr">class</span>=<span class="string">"com.imtt.service.impl3.OrderServiceImp3"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--拦截器设置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionInterceptor"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.interceptor.TransactionInterceptor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">ref</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionAttributes"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"get*"</span>&gt;</span>PROPAGATION_REQUIRED, readOnly<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"orderService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.ProxyFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"target"</span> <span class="attr">ref</span>=<span class="string">"orderServiceTarget"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interceptorNames"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">idref</span> <span class="attr">bean</span>=<span class="string">"transactionInterceptor"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在拦截器配置（<code>id=&quot;transactionInterceptor&quot;</code>）中配置了事务处理管理器及事务属性（<code>name=&quot;transactionAttributes&quot;</code>），如上面代码中配置了 <code>get</code> 开头的方法名（<code>&lt;prop key=&quot;get*&quot;&gt;PROPAGATION_REQUIRED, readOnly&lt;/prop&gt;</code>）以<code>PROPAGATION_REQUIRED</code>、只读（<code>readOnly</code>）的方法。</p><h2 id="基于-TransactionProxyFactoryBean"><a href="#基于-TransactionProxyFactoryBean" class="headerlink" title="基于 TransactionProxyFactoryBean"></a>基于 TransactionProxyFactoryBean</h2><p>上面基于 <code>TransactionInterceptor</code> 方式的配置文件内容实在是太长了，Spring 可以通过 <code>TransactionProxyFactoryBean</code> 进行简化：把拦截器配置和增强以后的配置（<code>id=&quot;orderService&quot;</code>）结合起来。</p><p>配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-dao.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.imtt.service.impl3"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"orderServiceTarget"</span> <span class="attr">class</span>=<span class="string">"com.imtt.service.impl3.OrderServiceImp3"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--拦截器设置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"orderService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.interceptor.TransactionProxyFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">ref</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionAttributes"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"get*"</span>&gt;</span>PROPAGATION_REQUIRED, readOnly<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"fin*"</span>&gt;</span>PROPAGATION_REQUIRED, readOnly<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"set*"</span>&gt;</span>PROPAGATION_REQUIRED<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"target"</span> <span class="attr">ref</span>=<span class="string">"orderServiceTarget"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="基于-lt-tx-命名空间"><a href="#基于-lt-tx-命名空间" class="headerlink" title="基于 &lt;tx> 命名空间"></a>基于 &lt;tx> 命名空间</h2><p>和前面一样所有方式都需要配置事务管理器（<code>id=&quot;transactionManager&quot;</code>），接着配置通知：</p><ul><li><code>&lt;tx:advice&gt;</code>：配置通知的内容是什么；</li><li><code>&lt;aop:config&gt;</code>：配置什么地方需要通知（<code>&lt;aop:pointcut&gt;</code>），并且如通知内容关联起来（<code>&lt;aop:advisor&gt;</code>）。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-dao.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.imtt.service.impl3"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.imtt.service.impl3.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="基于-Transactional-注解"><a href="#基于-Transactional-注解" class="headerlink" title="基于 @Transactional 注解"></a>基于 @Transactional 注解</h2><p>配置文件中需要 <code>&lt;tx:annotation-driven</code> 来注解事务并制定事务管理器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-dao.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.imtt.service.impl6"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在业务代码中的方法添加 <code>@Transactional</code> 注解，也可以在注解中添加其它信息如事务传播行为（<code>@Transactional(propagation = Propagation.REQUIRED)</code>）。</p>]]></content>
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> 事务处理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JDBC 事务处理</title>
      <link href="/2018/06/26/JDBC-%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86.html/"/>
      <url>/2018/06/26/JDBC-%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86.html/</url>
      <content type="html"><![CDATA[<p>JDBC 的事务处理是基于 <code>Connection</code> 接口的，通过 <code>Connection</code> 对象进行事务管理。</p><a id="more"></a><p>JDBC 默认事务处理行为是自动提交。有三个相关方法：</p><ul><li><code>setAutoCommit</code>：设置自动提交；</li><li><code>commit</code>：提交事务；</li><li><code>rollback</code>：回滚事务。</li></ul><h1 id="示例准备"><a href="#示例准备" class="headerlink" title="示例准备"></a>示例准备</h1><p>在 maven 中引入相关依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.46<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试代码，包含了使用 JDBC 进行连接数据库：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String driver = <span class="string">"com.mysql.jdbc.Driver"</span>;</span><br><span class="line">    <span class="keyword">private</span> String url = <span class="string">"jdbc:mysql://localhost:3306/shiwu?useUnicode=true&amp;characterEncoding=utf8"</span>;</span><br><span class="line">    <span class="keyword">private</span> String user = <span class="string">"root"</span>;</span><br><span class="line">    <span class="keyword">private</span> String password = <span class="string">"root"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">            <span class="comment">//内容</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">//内容</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="事务处理实现"><a href="#事务处理实现" class="headerlink" title="事务处理实现"></a>事务处理实现</h1><p>因为 JDBC 默认事务处理行为是自动提交，所以先要使用 <code>Connection#setAutoCommit(false)</code>  方关闭自动提交机制。</p><ol><li><p>接着进行一系列逻辑处理，如果没有异常产生，使用 <code></code>Connection#commit()<code>方法提交事务。代码如下，位于</code>try` 代码块中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">stmt = conn.createStatement();</span><br><span class="line">stmt.execute(<span class="string">"&lt;SQL 语句&gt;"</span>);</span><br><span class="line">stmt.execute(<span class="string">"&lt;SQL 语句&gt;"</span>);</span><br><span class="line">conn.commit();</span><br></pre></td></tr></table></figure></li><li><p>如果产生了异常，使用 <code></code>Connection#rollback()<code>方法回滚事务，代码如下，位于</code>catch` 代码块中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    conn.rollback();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">    e1.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h1><p>JDBC 提供了对事物隔离级别的设置，其表示的隔离级别如下：</p><ul><li><p><code>TRANSACTION_NONE</code>：不支持事务；</p></li><li><p><code>TRANSACTION_READ_UNCOMMITTED</code> ：读未提交；</p></li><li><p><code>TRANSACTION_READ_COMMITTED</code>：读已提交；</p></li><li><p><code>TRANSACTION_REPEATABLE_READ</code>：可重复读；</p></li><li><p><code>TRANSACTION_SERIALIZABLE</code>：串行化。</p><blockquote><p>当开启 JDBC 的事务处理后，默认的隔离级别为 <code>TRANSACTION_REPEATABLE_READ</code>。</p></blockquote></li></ul><p>查询与设置隔离级别的方法：</p><ul><li><code>Connection#getTransactionIsolation</code>：查询当前隔离级别；</li><li><code>Connection#setTransactionIsolation</code>：设置隔离级别。</li></ul>]]></content>
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
            <tag> Java </tag>
            
            <tag> 事务处理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JDBC Template</title>
      <link href="/2018/06/24/JDBC-Template.html/"/>
      <url>/2018/06/24/JDBC-Template.html/</url>
      <content type="html"><![CDATA[<p>Spring 在 JDBC API 之上提供了 JDBC Template 组件简化了持久化操作。</p><a id="more"></a><h1 id="示例准备"><a href="#示例准备" class="headerlink" title="示例准备"></a>示例准备</h1><p>在 maven 中引入依赖，包括 Mysql 驱动、Spring 相关组件（core、beans、context、aop）和 JDBC Template 相关组件（jdbc、tx）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.3.15.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.46<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着 Spring 配置 <code>spring.xml</code>，包括数据库源和 JDBC Template：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/selection_course?useUnicode=true&amp;amp;characterEncoding=utf-8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.imtt.sjt"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>单元测试基本代码，包含了一个代码块，用于生成  JDBC Template 的实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Text</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    &#123;</span><br><span class="line">        ApplicationContext context =</span><br><span class="line">                <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring.xml"</span>);</span><br><span class="line">        jdbcTemplate = (JdbcTemplate) context.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JDBC-Template-基本使用"><a href="#JDBC-Template-基本使用" class="headerlink" title="JDBC Template 基本使用"></a>JDBC Template 基本使用</h1><p> JDBC Template 基本使用包括：</p><ul><li><code>execute</code> 方法：可以执行任何 SQL，但通常用来执行 DDL 语句；</li><li><code>update</code> 与 <code>batchUpdate</code> 方法：对数据进行增删改操作；</li><li><code>query</code> 与 <code>queryXXX</code> 方法；对数据库进行查询操作；</li><li><code>call</code> 方法：调用存储过程。</li></ul><h2 id="execute-方法"><a href="#execute-方法" class="headerlink" title="execute 方法"></a>execute 方法</h2><p>在测试代码中添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExecute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    jdbcTemplate.execute(<span class="string">"create table user1(id int, name varchar(20))"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>execute</code> 方法中添加 sql 就行了。</p><h2 id="update-与-batchUpdate-方法"><a href="#update-与-batchUpdate-方法" class="headerlink" title="update 与 batchUpdate 方法"></a>update 与 batchUpdate 方法</h2><h3 id="update-方法"><a href="#update-方法" class="headerlink" title="update 方法"></a>update 方法</h3><p><code>update</code> 方法使用单条 sql 语句对数据进行增删改操作：</p><ul><li><code>int update(String sql, Object[] args)</code></li><li><code>int update(String sql, Object... args)</code></li></ul><p>args 表示 sql 语句中需要的数据，返回值表示影响的行数。</p><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String sql = <span class="string">"insert into student(name, sex) values (?, ?)"</span>;</span><br><span class="line">    jdbcTemplate.update(sql, <span class="keyword">new</span> Object[]&#123;<span class="string">"张飞"</span>, <span class="string">"男"</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="batchUpdate-方法"><a href="#batchUpdate-方法" class="headerlink" title="batchUpdate 方法"></a>batchUpdate 方法</h3><p><code>batchUpdate</code> 方法是批量增删改操作。</p><ul><li><code>int[] batchUpdate(String[] sql)</code></li><li><code>int[] batchUpdate(String sql, List&lt;Object[]&gt; args)</code></li></ul><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBatchUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String sql = <span class="string">"insert into selection(student, course) values(?, ?)"</span>;</span><br><span class="line">    List&lt;Object[]&gt; list = <span class="keyword">new</span> ArrayList&lt;Object[]&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> Object[]&#123;<span class="number">2</span>, <span class="number">1001</span>&#125;);</span><br><span class="line">    list.add(<span class="keyword">new</span> Object[]&#123;<span class="number">2</span>, <span class="number">1002</span>&#125;);</span><br><span class="line"></span><br><span class="line">    jdbcTemplate.batchUpdate(sql, list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="query-与-queryXXX-方法"><a href="#query-与-queryXXX-方法" class="headerlink" title="query 与 queryXXX 方法"></a>query 与 queryXXX 方法</h2><h3 id="查询简单数据项"><a href="#查询简单数据项" class="headerlink" title="查询简单数据项"></a>查询简单数据项</h3><ol><li>获取一个<ul><li><code>T queryForObject(String sql, Class&lt;T&gt; type)</code></li><li><code>T queryForObject(String sql, Object[] args, Class&lt;T&gt; type)</code></li><li><code>T queryForObject(String sql, Class&lt;T&gt; type,Object... arg)</code></li></ul></li><li>获取多个<ul><li><code>List&lt;T&gt; queryForList(String sql , Class&lt;T&gt; type)</code></li><li><code>List&lt;T&gt; queryForList(String sql , Object[] args , Class&lt;T&gt; type)</code></li><li><code>List&lt;T&gt; queryForList(String sql , Class&lt;T&gt; type,Object... arg)</code></li></ul></li></ol><p><code>Class&lt;T&gt; type</code> 表示查询的结果是什么类型。</p><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuerySimple1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String sql = <span class="string">"select count(*) from student"</span>;</span><br><span class="line">    <span class="keyword">int</span> count = jdbcTemplate.queryForObject(sql, Integer.class);</span><br><span class="line">    System.out.println(<span class="string">"count:"</span> + count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuerySimple2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String sql = <span class="string">"select name from student where sex = ?"</span>;</span><br><span class="line">    List&lt;String&gt; names = jdbcTemplate.queryForList(sql, String.class, <span class="string">"女"</span>);</span><br><span class="line">    System.out.println(names);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询复杂对象"><a href="#查询复杂对象" class="headerlink" title="查询复杂对象"></a>查询复杂对象</h3><h4 id="封装为Map"><a href="#封装为Map" class="headerlink" title="封装为Map"></a>封装为Map</h4><p>如果查询结果的每条结果返回多个值即查询复杂对象，结果会被封装成 Map。</p><ol><li><p>获取一个</p><ul><li><code>Map queryForMap(String sql)</code></li><li><code>Map queryForMap(String sql , Object[] args)</code></li><li><code>Map queryForMap(String sql , Object... arg)</code></li></ul></li><li><p>获取多个</p><ul><li><code>List&lt;Map&lt;String,Object&gt;&gt; queryForList(String sql)</code></li><li><code>List&lt;Map&lt;String,Object&gt;&gt; queryForList(String sql , Object[] args)</code></li><li><code>List&lt;Map&lt;String,Object&gt;&gt; queryForList(String sql , Object... arg)</code></li></ul></li></ol><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String sql = <span class="string">"select * from student where id = ?"</span>;</span><br><span class="line">    Map&lt;String, Object&gt; stu = jdbcTemplate.queryForMap(sql, <span class="number">2</span>);</span><br><span class="line">    System.out.println(stu);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryMap2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String sql = <span class="string">"select * from student"</span>;</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; stus = jdbcTemplate.queryForList(sql);</span><br><span class="line">    System.out.println(stus);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="封装为实体对象（使用-RowMapper-接口）"><a href="#封装为实体对象（使用-RowMapper-接口）" class="headerlink" title="封装为实体对象（使用 RowMapper 接口）"></a>封装为实体对象（使用 RowMapper 接口）</h4><p>如果要将查询的结果封装成实体对象，就要借助于 <code>RowMapper</code> 接口的 <code>mapRow</code> 方法。</p><ol><li>获取一个<ul><li><code>T queryForObject(String sql,RowMapper&lt;T&gt; mapper)</code></li><li><code>T queryForObject(String sql,Object[] args,RowMapper&lt;T&gt; mapper)</code></li><li><code>T queryForObject(String sql,RowMapper&lt;T&gt; mapper,Object... arg)</code></li></ul></li><li>获取多个<ul><li><code>List&lt;T&gt; query(String sql,RowMapper&lt;T&gt; mapper)</code></li><li><code>List&lt;T&gt; query(String sql,Object[] args,RowMapper&lt;T&gt; mapper)</code></li><li><code>List&lt;T&gt; query(String sql,RowMapper&lt;T&gt; mapper,Object... arg)</code></li></ul></li></ol><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryEntity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String sql = <span class="string">"select * from student where id = ?"</span>;</span><br><span class="line">    Student student = jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> StudentRowMapper(), <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryEntity2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String sql = <span class="string">"select * from student"</span>;</span><br><span class="line">    List&lt;Student&gt; students = jdbcTemplate.query(sql, <span class="keyword">new</span> StudentRowMapper());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentRowMapper</span> <span class="keyword">implements</span> <span class="title">RowMapper</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">mapRow</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.setId(resultSet.getInt(<span class="string">"id"</span>));</span><br><span class="line">        stu.setName(resultSet.getString(<span class="string">"name"</span>));</span><br><span class="line">        stu.setSex(resultSet.getString(<span class="string">"sex"</span>));</span><br><span class="line">        stu.setBorn(resultSet.getDate(<span class="string">"born"</span>));</span><br><span class="line">        <span class="keyword">return</span> stu;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Student 为一个实体类。</p></blockquote>]]></content>
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>基于 AspectJ 的 AOP 开发</title>
      <link href="/2018/06/20/%E5%9F%BA%E4%BA%8E-AspectJ-%E7%9A%84-AOP-%E5%BC%80%E5%8F%91.html/"/>
      <url>/2018/06/20/%E5%9F%BA%E4%BA%8E-AspectJ-%E7%9A%84-AOP-%E5%BC%80%E5%8F%91.html/</url>
      <content type="html"><![CDATA[<p>AspectJ 是一个基于 Java 语言的 AOP 框架。Spring 2.0 以后新增了对 AspectJ 切点表达式支持，并且建议使用 AspectJ 方式来开发 AOP。</p><a id="more"></a><p>AspectJ 开发 AOP 有两种方式：注解方式和 XML 方式。</p><h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><p>• 使用AspectJ 需要导入Spring AOP和 AspectJ相关jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.3.15.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h1><h2 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h2><p>使用注解方式需要开启 AspectJ 自动代理（<code>&lt;aop:aspectj-autoproxy/&gt;</code>）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h2><p>@AspectJ 提供不同的通知类型：</p><ul><li>@Before 前置通知，相当于BeforeAdvice；</li><li>@AfterReturning 后置通知，相当于AfterReturningAdvice；</li><li>@Around 环绕通知，相当于MethodInterceptor；</li><li>@AfterThrowing 异常抛出通知，相当于ThrowAdvice；</li><li>@After 最终final通知，不管是否异常，该通知都会执行；</li><li>@DeclareParents 引介通知，相当于IntroductionInterceptor。</li></ul><h2 id="定义切点"><a href="#定义切点" class="headerlink" title="定义切点"></a>定义切点</h2><p>对于如何定义切点，在 AspectJ 中可以通过通知中的 value 属性来定义。属性值使用 execution 函数来定义切点的方法切入 。语法:</p><blockquote><p>​    execution(&lt;访问修饰符&gt;?&lt;返回类型&gt;&lt;方法名&gt;(&lt;参数&gt;)&lt;异常&gt;)  </p></blockquote><p>问号表示可以有也可以没有。</p><p>例如：</p><ul><li>匹配所有类 public方法：<code>execution(public * *(..))</code>；</li><li>匹配指定包下所有类方法：<code>execution(* com.imooc.dao.*(..))</code>，不包含子包；</li><li><code>execution(* com.imooc.dao..*(..))</code>, <code>..*</code>表示包、子孙包下所有类；</li><li>匹配指定类所有方法：<code>execution(* com.imooc.service.UserService.*(..))</code>；</li><li>匹配实现特定接口所有类方法：<code>execution(* com.imooc.dao.GenericDAO+.*(..))</code>；</li><li>匹配所有save开头的方法：<code>execution(* save*(..))</code>。</li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>定义一个 ProductDao 类，里面包含了五个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.aspectJ.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"保存商品"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"修改商品"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除商品"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询一个商品"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询所有商品"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置文件中配置 Bean：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"productDao"</span> <span class="attr">class</span>=<span class="string">"com.imtt.aspectJ.demo1.ProductDao"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>定义一个切面类，并在类名前加上 <code>@Aspect</code> 注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.aspectJ.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspectAnn</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>在配置文件中配置 Bean：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.imtt.aspectJ.demo1.MyAspectAnn"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>单元测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.aspectJ.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDemo1</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"productDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> ProductDao productDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        productDao.delete();</span><br><span class="line">        productDao.find();</span><br><span class="line">        productDao.save();</span><br><span class="line">        productDao.update();</span><br><span class="line">        productDao.findOne();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前置通知"><a href="#前置通知" class="headerlink" title="前置通知"></a>前置通知</h3><p>在切面类中添加一个用于前置通知的方法，使用注解 <code>@Before</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//import org.aspectj.lang.JoinPoint;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span>(value = <span class="string">"execution(* com.imtt.aspectJ.demo1.ProductDao.save(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"前置通知"</span> + joinPoint);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法中可以不传入 JoinPoint 对象，这里指示来说明一下  JoinPoint 对象 可以用来获得切点信息，即 execution 函数中的具体值。</p><h3 id="后置通知"><a href="#后置通知" class="headerlink" title="后置通知"></a>后置通知</h3><p>在切面类中添加一个用于后置通知的方法，使用注解 <code>@AfterReturning</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterReturning</span>(value = <span class="string">"execution(* com.imtt.aspectJ.demo1.ProductDao.update(..))"</span>, returning = <span class="string">"result"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object result)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"后置通知"</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过 <code>returning</code> 属性来定义方法返回值。</p><h3 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h3><p>在切面类中添加一个用于环绕通知的方法，使用注解 <code>@Around</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//import org.aspectj.lang.ProceedingJoinPoint;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Around</span>(value = <span class="string">"execution(* com.imtt.aspectJ.demo1.ProductDao.delete(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">round</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"环绕前通知"</span>);</span><br><span class="line">    Object o = joinPoint.proceed(); <span class="comment">//执行目标方法</span></span><br><span class="line">    System.out.println(<span class="string">"环绕后通知"</span>);</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有两点需要说明地方：</p><ul><li>参数为 <code>ProceedingJoinPoint</code> 对象可以调用 <code>peoceed()</code> 方法来执行目标方法；如果不调用这个方法，那么目标方法就被拦截了。</li><li>经 <code>@Around</code> 注解的这个方法的返回值就是目标代理方法执行返回值。</li></ul><h3 id="异常抛出通知"><a href="#异常抛出通知" class="headerlink" title="异常抛出通知"></a>异常抛出通知</h3><p>在切面类中添加一个用于异常抛出通知的方法，使用注解 <code>@AfterThrowing</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing</span>(value = <span class="string">"execution(* com.imtt.aspectJ.demo1.ProductDao.findOne(..))"</span>, throwing = <span class="string">"e"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"异常抛出通知"</span> + e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果目标发生了异常，才会使用到这个异常抛出通知。可以通过 <code>throwing</code> 属性来获取异常信息。</p><h3 id="最终通知"><a href="#最终通知" class="headerlink" title="最终通知"></a>最终通知</h3><p>在切面类中添加一个用于最终通知的方法，使用注解 <code>@After</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@After</span>(value = <span class="string">"execution(* com.imtt.aspectJ.demo1.ProductDao.find(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"最终通知"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无论是否出现异常,最终通知总是会被执行的。</p><h3 id="切点命名"><a href="#切点命名" class="headerlink" title="切点命名"></a>切点命名</h3><p>如果有多个通知作用在了一个方法上并且时不时要修改当前方法使用什么通知，上面的这些注解方式将会导致大量修改。可以通过 <code>@Pointcut</code> 为切点命名来简化操作。</p><ul><li>对于重复的切点，可以使用 <code>@Pointcut</code> 进行定义；</li><li>切点方法：private void 无参数方法，方法名为切点名；</li><li>当通知多个切点时，可以使用 <code>||</code> 进行连接。</li></ul><p>举个例子，在切面类中添加一个切点方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut</span>(value = <span class="string">"execution(* com.imtt.aspectJ.demo1.ProductDao.save(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">myPointCut1</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>前置通知的注解可以修改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before</span>(value = <span class="string">"myPointCut1()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"前置通知"</span> + joinPoint);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="XML-方式"><a href="#XML-方式" class="headerlink" title="XML 方式"></a>XML 方式</h1><h2 id="准备-1"><a href="#准备-1" class="headerlink" title="准备"></a>准备</h2><p>新建一个配置文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span> xsi:schemaLocation=<span class="string">"</span></span><br><span class="line"><span class="string">       http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>定义一个接口类 CustomerDao 及其实现类 CustomerDaoImpl：</p><blockquote><p>AspectJ 开发 AOP 方式与是否需要实现接口无关。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.aspectJ.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findOne</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.aspectJ.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span> <span class="keyword">implements</span> <span class="title">CustomerDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"客户保存"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"客户修改"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"客户删除"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"客户查询多个"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"客户查询一个"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置文件中配置 Bean：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerDao"</span> <span class="attr">class</span>=<span class="string">"com.imtt.aspectJ.demo2.CustomerDaoImpl"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>定义一个切面类 MyAspectXml，包含与五种通知相关的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.aspectJ.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspectXml</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"xml前置通知"</span> + joinPoint);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"xml后置通知"</span> + obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">round</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"xml环绕前通知"</span>);</span><br><span class="line">        Object o = joinPoint.proceed(); <span class="comment">//执行目标方法</span></span><br><span class="line">        System.out.println(<span class="string">"xml环绕后通知"</span>);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"异常抛出通知"</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"最终通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置文件中配置 Bean：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myAspectXml"</span> <span class="attr">class</span>=<span class="string">"com.imtt.aspectJ.demo2.MyAspectXml"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>单元测试代码与前面的一样。</p><h2 id="AOP配置"><a href="#AOP配置" class="headerlink" title="AOP配置"></a>AOP配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;aop:config&gt;&lt;/aop:config&gt;</code> 有三种配置：aspect、advisor 和 pointcut。</p><p>aspect 可以配置多个切面多个通知，advisor 是一个切面对应一个切入点，pointcut 配置多个切入点。</p><h3 id="配置切入点："><a href="#配置切入点：" class="headerlink" title="配置切入点："></a>配置切入点：</h3><p>在 <code>&lt;aop:config&gt;&lt;/aop:config&gt;</code> 使用 <code>pointcut</code> 来配置切面：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointCut1"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.imtt.aspectJ.demo2.CustomerDao.save(..))"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointCut2"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.imtt.aspectJ.demo2.CustomerDao.update(..))"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointCut3"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.imtt.aspectJ.demo2.CustomerDao.delete(..))"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointCut4"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.imtt.aspectJ.demo2.CustomerDao.findOne(..))"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointCut5"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.imtt.aspectJ.demo2.CustomerDao.find(..))"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置切面"><a href="#配置切面" class="headerlink" title="配置切面"></a>配置切面</h3><p>在 <code>&lt;aop:config&gt;&lt;/aop:config&gt;</code> 使用 <code>aspect</code> 来配置切面：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myAspectXml"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--前置通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointCut1"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--后置通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterReturning"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointCut2"</span> <span class="attr">returning</span>=<span class="string">"obj"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--环绕通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"round"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointCut3"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--异常抛出通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"afterThrowing"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointCut4"</span> <span class="attr">throwing</span>=<span class="string">"e"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--最终通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"after"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointCut5"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置了五种切面，通过 <code>pointcut-ref</code> 属性对应切入点。</p>]]></content>
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> AOP </tag>
            
            <tag> AspectJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring 传统 AOP</title>
      <link href="/2018/06/17/Spring-%E4%BC%A0%E7%BB%9F-AOP.html/"/>
      <url>/2018/06/17/Spring-%E4%BC%A0%E7%BB%9F-AOP.html/</url>
      <content type="html"><![CDATA[<p>Spring AOP 使用纯 Java 实现，不需要专门的编译过程和类加载器，在运行期通过代理方式向目标类织入增强代码 。</p><a id="more"></a><h1 id="Spring-AOP-通知类型"><a href="#Spring-AOP-通知类型" class="headerlink" title="Spring AOP 通知类型"></a>Spring AOP 通知类型</h1><p>Spring 按照通知 Advice 在目标类方法的连接点位置，可以分为5类：</p><ul><li>前置通知 <code>org.springframework.aop.MethodBeforeAdvice</code> ：在目标方法执行前实施增强；</li><li>后置通知 <code>org.springframework.aop.AfterReturningAdvice</code> ：在目标方法执行后实施增强；</li><li>环绕通知 <code>org.aopalliance.intercept.MethodInterceptor</code> ：在目标方法执行前后实施增强；</li><li>异常抛出通知 <code>org.springframework.aop.ThrowsAdvice</code> ：在方法抛出异常后实施增强；</li><li>引介通知 <code>org.springframework.aop.IntroductionInterceptor</code>： 在目标类中添加一些新的方法和属性。</li></ul><h1 id="Spring-AOP-切面类型"><a href="#Spring-AOP-切面类型" class="headerlink" title="Spring AOP 切面类型"></a>Spring AOP 切面类型</h1><ul><li>Advisor : 代表一般切面，Advice 本身就是一个切面，对目标类所有方法进行拦截；</li><li>PointcutAdvisor : 代表具有切点的切面，可以指定拦截目标类哪些方法；</li><li>IntroductionAdvisor : 代表引介切面，针对引介通知而使用切面。</li></ul><h1 id="一般切面"><a href="#一般切面" class="headerlink" title="一般切面"></a>一般切面</h1><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>除了 Spring 的四个基础包，还要 AOP 联盟的包和 spring-aop，Junit 和 spring-test 用于进行单元测试：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.3.15.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h2><p>定义一个接口及其实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.aop.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.aop.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title">StudentDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"学生保存"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"学生修改"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"学生删除"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"学生查询"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Bean 配置文件 <code>applicationContext.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"studentDao"</span> <span class="attr">class</span>=<span class="string">"com.imtt.aop.demo1.StudentDaoImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="增强实现（以前置通知为例）"><a href="#增强实现（以前置通知为例）" class="headerlink" title="增强实现（以前置通知为例）"></a>增强实现（以前置通知为例）</h2><p>对 <code>MethodBeforeAdvice</code> 接口进行实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.aop.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.MethodBeforeAdvice;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeforeAdvice</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] objects, Object o)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置增强/通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现 <code>before</code> 方法，这个方法里的内容就是前置通知里会做的事。将这个类在配置文件中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--前置通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myBeforeAdvice"</span> <span class="attr">class</span>=<span class="string">"com.imtt.aop.demo1.MyBeforeAdvice"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>Spring 使用 <code>ProxyFactoryBean</code> 来配置 AOP 代理对象，常用可配置属性如下：</p><ul><li><p><code>target</code> : 代理的目标对象；</p></li><li><p><code>proxyInterfaces</code> : 代理要实现的接口，如果多个接口可以使用此格式赋值 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;list&gt;</span><br><span class="line">&lt;value&gt;&lt;/value&gt;</span><br><span class="line">... </span><br><span class="line">&lt;/list&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>proxyTargetClass</code> : 是否对类代理而不是接口，设置为 true 时，使用 CGLib 代理；</p></li><li><p><code>interceptorNames</code> : 需要织入目标的 Advice；</p></li><li><p><code>singleton</code> : 返回代理是否为单实例，默认为单例；</p></li><li><p><code>optimize</code> : 当设置为 true 时，强制使用 CGLib。</p></li></ul><p>知道了如何配置格式，对示例来进行配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"studentDaoProxy"</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.ProxyFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置目标类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"target"</span> <span class="attr">ref</span>=<span class="string">"studentDao"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--实现的接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"proxyInterfaces"</span> <span class="attr">value</span>=<span class="string">"com.imtt.aop.demo1.StudentDao"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--拦截的名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interceptorNames"</span> <span class="attr">value</span>=<span class="string">"myBeforeAdvice"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用Cglib代理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"optimize"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>单元测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.aop.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDemo1</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"studentDaoProxy"</span>)</span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        studentDao.find();</span><br><span class="line">        studentDao.save();</span><br><span class="line">        studentDao.delete();</span><br><span class="line">        studentDao.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式的增强的缺点是对每个方法都进行了增强，即每个方法前面都打印了“前置增强/通知”这段话。</p><h1 id="PointcutAdvisor-切点切面"><a href="#PointcutAdvisor-切点切面" class="headerlink" title="PointcutAdvisor 切点切面"></a>PointcutAdvisor 切点切面</h1><p>像上面使用普通 Advice 作为切面，将对目标类所有方法进行拦截，不够灵活。实际常采用带有切点的切面。常用 PointcutAdvisor 实现类有两类：</p><ul><li><code>DefaultPointcutAdvisor</code> 最常用的切面类型，可以通过任意Pointcut和Advice 组合定义切面；</li><li><code>JdkRegexpMethodPointcut</code>： 构造正则表达式切点。</li></ul><p>案例使用第二种。</p><h2 id="案例代码-1"><a href="#案例代码-1" class="headerlink" title="案例代码"></a>案例代码</h2><p>先定义一个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.aop.Demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"客户保存"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"客户修改"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"客户删除"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"客户查询"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着在配置文件中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerDao"</span> <span class="attr">class</span>=<span class="string">"com.imtt.aop.Demo2.CustomerDao"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="增强实现（以环绕通知为例）"><a href="#增强实现（以环绕通知为例）" class="headerlink" title="增强实现（以环绕通知为例）"></a>增强实现（以环绕通知为例）</h2><p>对 <code>MethodIntercepto</code> 接口进行实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.aop.Demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInvocation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAroundAdvice</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation methodInvocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"环绕前增强"</span>);</span><br><span class="line">        Object object = methodInvocation.proceed();</span><br><span class="line">        System.out.println(<span class="string">"环绕后增强"</span>);</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现的 <code>invoke</code> 方法中 <code>methodInvocation.proceed()</code> 使用来执行目标方法的，再其前后就可以定义我们的增强内容。将这个类在配置文件中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myAroundAdvice"</span> <span class="attr">class</span>=<span class="string">"com.imtt.aop.Demo2.MyAroundAdvice"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>接着使用 <code>ProxyFactoryBean</code> 来产生代理对象：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerDaoProxy"</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.ProxyFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"target"</span> <span class="attr">ref</span>=<span class="string">"customerDao"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--没有接口要设为true--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"proxyTargetClass"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interceptorNames"</span> <span class="attr">value</span>=<span class="string">"myAdvisor"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只对某一个或某一些方法进行增强还需要配置一个有切入点的切面：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"myAdvisor"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.aop.support.RegexpMethodPointcutAdvisor"</span>&gt;</span><br><span class="line">    &lt;!--pattern中配置正则表达式--&gt;</span><br><span class="line">    &lt;!--&lt;property name=<span class="string">"pattern"</span> value=<span class="string">".*"</span>/&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;property name=<span class="string">"pattern"</span> value=<span class="string">".*save.*"</span>/&gt;--&gt;</span><br><span class="line">    &lt;property name=<span class="string">"patterns"</span> value=<span class="string">".*save.*, .*delete.*"</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">"advice"</span> ref=<span class="string">"myAroundAdvice"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>使用了属性 <code>pattern</code> 或 <code>patterns</code> 设置一个方法或多个正则表达式来限制增强。</p><h1 id="自动代理"><a href="#自动代理" class="headerlink" title="自动代理"></a>自动代理</h1><p>上面的一般切面，每个代理都是通过 ProxyFactoryBean 织入切面代理，但是非常多的 Bean 每个都配置 ProxyFactoryBean 开发维护量巨大，可以使用自动创建代理的方式。</p><ul><li><code>BeanNameAutoProxyCreator</code>：根据 Bean 名称创建代理；</li><li><code>DefaultAdvisorAutoProxyCreator</code>：根据 Advisor 本身包含信息创建代理；</li><li><code>AnnotationAwareAspectJAutoProxyCreator</code>：基于 Bean 中的 AspectJ 注解进行自动代理。</li></ul><h2 id="基于-Bean-名称的自动代理"><a href="#基于-Bean-名称的自动代理" class="headerlink" title="基于 Bean 名称的自动代理"></a>基于 Bean 名称的自动代理</h2><p>案例要求：对所有以 DAO 结尾 Bean 所有方法使用代理。</p><p>配置文件内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"studentDao"</span> <span class="attr">class</span>=<span class="string">"com.imtt.aop.demo1.StudentDaoImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerDao"</span> <span class="attr">class</span>=<span class="string">"com.imtt.aop.demo2.CustomerDao"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置增强--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myBeforeAdvisor"</span> <span class="attr">class</span>=<span class="string">"com.imtt.aop.demo1.MyBeforeAdvice"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 基于Bean名称的自动代理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"beanNames"</span> <span class="attr">value</span>=<span class="string">"*Dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interceptorNames"</span> <span class="attr">value</span>=<span class="string">"myBeforeAdvisor"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在使用过程中只需对目标属性注入，如 <code>@Resource(name = &quot;studentDao&quot;)</code> 就能对所有方法增强。</p><h2 id="基于切面信息的自动代理"><a href="#基于切面信息的自动代理" class="headerlink" title="基于切面信息的自动代理"></a>基于切面信息的自动代理</h2><p>配置文件内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerDao"</span> <span class="attr">class</span>=<span class="string">"com.imtt.aop.demo2.CustomerDao"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置增强--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myAroundAdvisor"</span> <span class="attr">class</span>=<span class="string">"com.imtt.aop.demo2.MyAroundAdvice"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myAdvisor"</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.support.RegexpMethodPointcutAdvisor"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pattern"</span> <span class="attr">value</span>=<span class="string">"com\.imtt\.aop\.demo2\.CustomerDao\.save"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"advice"</span> <span class="attr">ref</span>=<span class="string">"myAroundAdvisor"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>在切面配置中使用了正则，限制了只对 CustomerDao 实现类的 save 方法进行了环绕增强。</p>]]></content>
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JDK 动态代理和 CGLIB 动态代理</title>
      <link href="/2018/06/14/JDK-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%92%8C-CGLIB-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.html/"/>
      <url>/2018/06/14/JDK-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%92%8C-CGLIB-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.html/</url>
      <content type="html"><![CDATA[<p>AOP（Aspect Oriented Programing）即面向切面编程，采取横向抽取机制，取代了传统纵向继承体系重复性代码，应用在性能监视、事务管理、安全检查、缓存。</p><a id="more"></a><h1 id="AOP-术语"><a href="#AOP-术语" class="headerlink" title="AOP 术语"></a>AOP 术语</h1><ul><li>Joinpoint（连接点）：指被拦截到的点。Spring 中指的是方法，Spring 只支持方法类型的连接点。</li><li>Pointcut（切入点）：指要对哪些 Joinpoint 进行拦截。</li><li>Advice（通知/增强）：指拦截到 Joinpoint 之后所要做的事情。通知分为前置通知、后置通知、异常通知、最终通知、环绕通知（切面要完成的功能）。</li><li>Introduction（引介）：引介是一种特殊的通知，在不修改类代码的前提下 Introduction 可以在运行期为类动态地添加一些方法或 Field。 </li><li>Target（目标对象）：代理的目标对象。</li><li>Weaving（织入）：指把增强应用到目标对象来创建新的代理对象的过程。Spring 采用动态代理织入，而 AspectJ 采用编译期织入和类装在期织入。</li><li>Proxy（代理）：一个类被AOP织入增强后，就产生一个结果代理类。</li><li>Aspect（切面）：是切入点和通知（引介）的结合。</li></ul><h1 id="AOP-底层实现"><a href="#AOP-底层实现" class="headerlink" title="AOP 底层实现"></a>AOP 底层实现</h1><h2 id="JDK-动态代理"><a href="#JDK-动态代理" class="headerlink" title="JDK 动态代理"></a>JDK 动态代理</h2><p>JDK 动态代理适用于使用接口类的业务。</p><p>定义一个接口 UserDao 及其实现类 UserDaoImpl，其中包含了 <code>save</code> 、<code>upgrade</code> 、<code>find</code> 和 <code>delete</code> 四个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.aop.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.aop.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"保存用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"修改用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个用来实现 JDK 动态代理的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.aop.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJdkProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyJdkProxy</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao =  userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">createProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(userDao.getClass().getClassLoader(),</span><br><span class="line">                userDao.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>createProxy</code> 方法中使用 <code>Proxy.newProxyInstance()</code> 创建代理，其中有三个参数：</p><blockquote><ol><li>类加载器（Class Loader）；</li><li>需要实现的接口数组；</li><li>InvocationHandler 接口，所有动态代理类的方法调用，都会交由 InvocationHandler 接口实现类里的 <code>invoke()</code> 方法去处理；如果当前类实现了 InvocationHandler 接口可直接传入 <code>this</code>。</li></ol></blockquote><p>接下来实现 <code>invoke()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"save"</span>.equals(method.getName())) &#123;</span><br><span class="line">        System.out.println(<span class="string">"---&gt;权限校验"</span>);</span><br><span class="line">        <span class="keyword">return</span> method.invoke(userDao, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> method.invoke(userDao, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>invoke()</code> 方法有三个参数：</p><blockquote><ol><li>动态代理类的引用，通常情况下不需要它。但可以使用getClass()方法，得到proxy的Class类从而取得实例的类信息，如方法列表，annotation等；</li><li>方法对象的引用，代表被动态代理类调用的方法；</li><li>args 对象数组，代表被调用方法的参数。其中基本类型（int, long）会被装箱成对象类型（Interger, Long）。</li></ol></blockquote><p>上面的方法只对方法名为 <code>save</code> 的方法进行增强，如果不是，原封不动的返回：<code>method.invoke(userDao, args)</code>。</p><p>代码写完了，进行单元测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.aop.demo1;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDemo1</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserDaoImpl userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">        UserDao proxy = (UserDao) <span class="keyword">new</span> MyJdkProxy(userDao).createProxy();</span><br><span class="line">        proxy.save();</span><br><span class="line">        proxy.delete();</span><br><span class="line">        proxy.find();</span><br><span class="line">        proxy.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过代理类 proxy 来调用 save 等四个方法，预期打印结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--&gt;权限校验</span><br><span class="line">保存用户</span><br><span class="line">删除用户</span><br><span class="line">查询用户</span><br><span class="line">修改用户</span><br></pre></td></tr></table></figure><h2 id="CGLIB-代理"><a href="#CGLIB-代理" class="headerlink" title="CGLIB 代理"></a>CGLIB 代理</h2><p>如果不使用接口，JDK 动态代理就不行了，此时可以采用 CGLIB。CGLIB采用非常底层字节码技术，可以为一个类创建子类，解决无接口代理问题。</p><blockquote><p>使用 CGLIB 代理需要引入 CGLIB依赖包，也可以引入 Spring 的包。实际测试过程中引入了 Spring 的 core、beans、context、expression 四个包。</p></blockquote><p>还是使用上面的 UserDao 类稍作修改，不再是一个接口，并且包含了与 UserDaoImpl 类中相同实现的四个方法。</p><p>接着定义一个用来实现 CGLIB 代理的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.aop.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodProxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCglibProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyCglibProxy</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">createProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建核心类</span></span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">//2.设置父类</span></span><br><span class="line">        enhancer.setSuperclass(.getClass());</span><br><span class="line">        <span class="comment">//3.设置回调</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//4.生成代理</span></span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"save"</span>.equals(method.getName())) &#123;</span><br><span class="line">            System.out.println(<span class="string">"--&gt;权限校验"</span>);</span><br><span class="line">            <span class="keyword">return</span> methodProxy.invokeSuper(proxy, args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> methodProxy.invokeSuper(proxy, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>createProxy</code> 方法中使用 CGLIB 的 Enhancer 生成代理对象，设置回调时的参数为一个 MethodInterceptor 接口，这个接口中重要的是要实现 <code>intercept</code> 方法。</p><p>在 <code>intercept</code> 方法中通过调用 <code>MethodProxy.invokeSuper()</code> 方法将调用转发给原始对象。</p><p>最后来进行单元测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">UserDao userDao = <span class="keyword">new</span> UserDao();</span><br><span class="line">UserDao proxy = (UserDao) <span class="keyword">new</span> MyCglibProxy(UserDao).createProxy();</span><br><span class="line">proxy.save();</span><br><span class="line">proxy.find();</span><br><span class="line">proxy.update();</span><br><span class="line">proxy.delete();</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>通过代理 proxy 来调用 save 等四个方法，预期打印结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--&gt;权限校验</span><br><span class="line">保存用户</span><br><span class="line">删除用户</span><br><span class="line">查询用户</span><br><span class="line">修改用户</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 动态代理 </tag>
            
            <tag> CGLIB </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Bean 在应用上下文中的生命周期</title>
      <link href="/2018/06/12/Spring-Bean-%E5%9C%A8%E5%BA%94%E7%94%A8%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%AD%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html/"/>
      <url>/2018/06/12/Spring-Bean-%E5%9C%A8%E5%BA%94%E7%94%A8%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%AD%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html/</url>
      <content type="html"><![CDATA[<p>Spring 中 Bean 的生命周期由多个特定的生命阶段组成，每个阶段都能对 Bean 进行控制。本文中的生命周期为 <strong>ApplicationContext 中 Bean 的生命周期</strong>。</p><a id="more"></a><h1 id="两个生命周期方法"><a href="#两个生命周期方法" class="headerlink" title="两个生命周期方法"></a>两个生命周期方法</h1><p>先来看看两个生命周期的方法。</p><p>Spring 初始化 bean 或销毁 bean 时，有时需要作一些处理工作，因此 spring 可以在创建和拆卸 bean 的时候调用 bean 的两个生命周期方法。 </p><ul><li><code>@PostConstruct</code>：当 bean 被载入到容器时调用方法的注解；</li><li><code>@PreDestroy</code>：当 bean从容器中删除的时候调用方法的注解</li></ul><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.PreDestroy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"bean"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"setupBean..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"say..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teardown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"teardownBean..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XML 方式为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">“bean”</span> <span class="attr">class</span>=<span class="string">“...Bean”</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">init-method</span>=<span class="string">“setup”</span></span></span><br><span class="line"><span class="tag">      <span class="attr">destory-method</span>=<span class="string">“teardown”/</span>&gt;</span></span><br></pre></td></tr></table></figure><p>从容器中删除时的方法只对 scope 为 singleton 时有效。</p><h1 id="完整生命周期"><a href="#完整生命周期" class="headerlink" title="完整生命周期"></a>完整生命周期</h1><p>先列出生命周期过程，示例代码放在后面：</p><ol><li>instantiate bean 对象实例化；</li><li>populate properties 封装属性；</li><li>如果 Bean 实现 BeanNameAware 则执行 <code>setBeanName</code>；</li><li>如果 Bean 实现 BeanFactoryAware 或者 ApplicationContextAware 则设置工厂 <code>setBeanFactory</code> 或者上下文对象 <code>setApplicationContext</code>；</li><li>如果存在类实现 BeanPostProcessor（后处理 Bean），则执行 <code>postProcessBeforeInitialization</code>；</li><li>如果 Bean 实现 InitializingBean 则执行 <code>afterPropertiesSet</code>；</li><li>调用 <code>&lt;bean init-method=&quot;setUp&quot;&gt;</code> 指定初始化方法 <code>setUp</code>；</li><li>如果存在类实现 BeanPostProcessor（处理Bean），则执行 <code>postProcessAfterInitialization</code> </li><li>执行业务处理；</li><li>如果 Bean 实现 DisposableBean 则执行 <code>destroy</code>；</li><li>调用 <code>&lt;bean destroy-method=&quot;tearDown&quot;&gt;</code> 指定销毁方法 <code>tearDown</code>。</li></ol><p>定义一个类 <code>Man</code>，包含了能显示周期过程的一些方法，Bean 管理用 XML 方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.ioc.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanNameAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.DisposableBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">implements</span> <span class="title">BeanNameAware</span>, <span class="title">ApplicationContextAware</span>, <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"2. 设置属性"</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Man</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"1. Man 实例化"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"7. Man 初始化"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"11. Man 销毁"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"3. 设置Bean名称"</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"4. 了解工厂信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"6. 属性设置后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"9. 执行自身业务方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"10. Spring的销毁"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"man"</span> <span class="attr">class</span>=<span class="string">"com.imtt.ioc.demo.Man"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">init-method</span>=<span class="string">"setUp"</span> <span class="attr">destroy-method</span>=<span class="string">"tearDown"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Twu"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第三步和第四步是让当前类了解其在 Spring 中一些信息：</p><ul><li>第三步实现 BeanNameAware 接口，实现 <code>setBeanName</code> 方法设置 Bean 名称；</li><li>第四步实现 ApplicationContextAware 接口，实现 <code>setApplicationContext</code> 方法了解工厂信息；</li></ul><p>第五步和第八步分别在初始化 Bean 实例之前和之后执行：</p><ul><li>实现 BeanPostProcessor 接口，包含了 <code>postProcessBeforeInitialization</code> 方法和 <code>postProcessAfterInitialization</code> 方法。</li></ul><p>定义一个类 <code>MyBeanPostProcessor</code> ，实现了 BeanPostProcessor 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.ioc.demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"5. 初始化前"</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(<span class="keyword">final</span> Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"8. 初始化后"</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.imtt.ioc.demo3.MyBeanPostProcessor"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>第六步实现接口 <code>InitializingBean</code> 的话，要实现方法 <code>afterPropertiesSet</code>，Bean 属性设置后执行；</p><p>第七步执行自己配置的 <code>setUp</code>方法；</p><p>第九步执行类自己本身的方法，如方法 <code>run</code>；</p><p>第十步实现接口 <code>DisposableBean</code> 的后，要实现方法 <code>destroy</code>，执行 Spring 的销毁；</p><p>第十一步执行自己配置的销毁方法 <code>tearDown</code>。</p><p>使用单元测试运行一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Man man = (Man) applicationContext.getBean(<span class="string">"man"</span>);</span><br><span class="line">System.out.println(man);</span><br><span class="line">((ClassPathXmlApplicationContext) applicationContext).close();</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>输出的结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. Man 实例化</span><br><span class="line">2. 设置属性</span><br><span class="line">3. 设置Bean名称man</span><br><span class="line">4. 了解工厂信息</span><br><span class="line">5. 初始化前</span><br><span class="line">6. 属性设置后</span><br><span class="line">7. Man 初始化</span><br><span class="line">8. 初始化后</span><br><span class="line">9. 执行自身业务方法</span><br><span class="line">10. Spring的销毁</span><br><span class="line">11. Man 销毁</span><br></pre></td></tr></table></figure><h1 id="后处理-Bean"><a href="#后处理-Bean" class="headerlink" title="后处理 Bean"></a>后处理 Bean</h1><p>生命周期中有一个重要的类 BeanPostProcessor，是整个类生成过程中要执行的一部分，对类产生代理和方法进行增强，这其实涉及了 AOP 思想。</p><p>定义一个接口 UserDao 及其实现 UserDaoImpl，其中包含了两个方法 <code>save</code> 和 <code>upgrade</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.ioc.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upgrade</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.ioc.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"保存"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upgrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"修改"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Bean 注解：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.imtt.ioc.demo1.UserDaoImpl"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>单元测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">UserDao userDao = (UserDao) applicationContext.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">userDao.save();</span><br><span class="line">userDao.upgrade();</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>接下来专门针对 <code>save</code> 方法进行增强，修改 <code>postProcessAfterInitialization</code> 方法中的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java.lang.reflect.InvocationHandler;</span></span><br><span class="line"><span class="comment">//java.lang.reflect.Method;</span></span><br><span class="line"><span class="comment">//java.lang.reflect.Proxy;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(<span class="keyword">final</span> Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (beanName.equals(<span class="string">"userDao"</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> (Object) Proxy.newProxyInstance(bean.getClass().getClassLoader(), bean.getClass().getInterfaces(), <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"save"</span>.equals(method.getName())) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"---&gt;权限校验"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> method.invoke(bean, args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>意思是如果 Bean 的名称是 “userDao”，且方法名是 “save“ 的话，先打印一条语句 “—&gt;权限校验”。</p><p>单元测试后打印：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---&gt;权限校验</span><br><span class="line">保存</span><br><span class="line">修改</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> 生命周期 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Bean 管理</title>
      <link href="/2018/06/08/Spring-Bean-%E7%AE%A1%E7%90%86.html/"/>
      <url>/2018/06/08/Spring-Bean-%E7%AE%A1%E7%90%86.html/</url>
      <content type="html"><![CDATA[<p>在 Spring 中通过配置文件描述 Bean 和 Bean 之间的依赖关系，利用 Java 语言的反射功能实例化 Bean 并建立 Bean 之间的依赖关系。</p><a id="more"></a><h1 id="Spring-的工厂类"><a href="#Spring-的工厂类" class="headerlink" title="Spring 的工厂类"></a>Spring 的工厂类</h1><p>Bean 工厂（org.springframework.beans.factory.BeanFactory）是 Spring 中最核心的接口，BeanFactory 是类的通用工厂能够创建并管理各种类的对象。ApplicationContext 是在 BeanFactory 基础上派生而来的，提供了更多面向实际应用的功能。</p><p>ApplicationContext 的主要实现类是 ClassPathXmlApplicationContext（默认从类路径中加载配置文件）和 FileSystemXmlApplicationContext（默认从文件系统中装载配置文件），本文使用 ClassPathXmlApplicationContext。</p><h1 id="加载组件"><a href="#加载组件" class="headerlink" title="加载组件"></a>加载组件</h1><p>借助 maven 建立一个工程，在 <code>pom.xml</code> 文件中配置以下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.3.15.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>src/main/resources</code> 目录下添加 log4j 的配置文件 <code>log4j.properties</code>，内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=DEBUG, A1</span><br><span class="line">log4j.appender.A1=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.A1.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.A1.layout.ConversionPattern=%-4r %-5p [%t] %37c %3x - %m%n</span><br></pre></td></tr></table></figure><h1 id="Bean-管理的-XML-方式"><a href="#Bean-管理的-XML-方式" class="headerlink" title="Bean 管理的 XML 方式"></a>Bean 管理的 XML 方式</h1><p> Spring 的 Bean 管理有两种方式：XML 方式和注解方式，先来看看 XML 方式。</p><p>在  <code>src/main/resources</code> 目录下添加 XML 配置文件 <code>applicationContext.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Bean-的实例化"><a href="#Bean-的实例化" class="headerlink" title="Bean 的实例化"></a>Bean 的实例化</h2><p>在 XML 方式中对于 Bean 的实例化有三种方式：类构造器实例化（默认无参数）、静态工厂方法实例化（简单工厂模式）、实例工厂方法实例化（工厂方法模式）。</p><h3 id="类构造器实例化"><a href="#类构造器实例化" class="headerlink" title="类构造器实例化"></a>类构造器实例化</h3><p>首先定义一个类，该类只有一个无参构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.ioc.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bean1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Bean1 实例化"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置文件 <code>applicationContext.xml</code> 中添加 Bean 的配置片段：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean1"</span> <span class="attr">class</span>=<span class="string">"com.imtt.ioc.demo1.Bean1"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>使用 Junit 进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDemo1</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationContext applicationContext =</span><br><span class="line">                <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">        Bean1 bean1 = (Bean1) applicationContext.getBean(<span class="string">"bean1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getBean() 方法获取 Bean 的实例，其中的参数参数就是 <code>applicationContext.xml</code> 中注入的 Bean 的 id。</p><p>单元测试打印输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bean1 实例化</span><br></pre></td></tr></table></figure><h3 id="静态工厂方法实例化"><a href="#静态工厂方法实例化" class="headerlink" title="静态工厂方法实例化"></a>静态工厂方法实例化</h3><p>首先定义一个类 Bean2 以及 Bean2 的静态工厂，这个静态工厂中有一个用于返回 Bean2 实例的静态方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.ioc.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean2</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.ioc.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean2Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bean2 <span class="title">createBean2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Bean2 工厂执行"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Bean2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置文件 <code>applicationContext.xml</code> 中添加 Bean 的配置片段，其中 class 的值是静态工厂类，factory-method 指定返回实例的静态方法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean2"</span> <span class="attr">class</span>=<span class="string">"com.imtt.ioc.demo1.Bean2Factory"</span> <span class="attr">factory-method</span>=<span class="string">"createBean2"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>使用 Junit 进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Bean2 bean2 = (Bean2) applicationContext.getBean(<span class="string">"bean2"</span>);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>单元测试打印输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bean2 工厂执行</span><br></pre></td></tr></table></figure><h3 id="实例工厂方法实例化"><a href="#实例工厂方法实例化" class="headerlink" title="实例工厂方法实例化"></a>实例工厂方法实例化</h3><p>首先定义一个类 Bean3 以及 Bean3 的静态工厂，这个静态工厂中有一个用于返回 Bean3 实例的实例方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.ioc.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean3</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.ioc.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean3Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bean3 <span class="title">createBean3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Bean3 实例工厂执行"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Bean3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置文件 <code>applicationContext.xml</code> 中添加 Bean 的配置片段，先添加一个工厂的注入，再指定一个注入，其中 factory-bean 的值为工厂注入的 id，factory-method 的值为工厂的实例方法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean3Factory"</span> <span class="attr">class</span>=<span class="string">"com.imtt.ioc.demo1.Bean3Factory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean3"</span> <span class="attr">factory-bean</span>=<span class="string">"bean3Factory"</span> <span class="attr">factory-method</span>=<span class="string">"createBean3"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>使用 Junit 进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Bean3 bean3 = (Bean3) applicationContext.getBean(<span class="string">"bean3"</span>);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>单元测试打印输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bean3 实例工厂执行</span><br></pre></td></tr></table></figure><h2 id="Bean-的配置"><a href="#Bean-的配置" class="headerlink" title="Bean 的配置"></a>Bean 的配置</h2><p>前面的 Bean 配置，如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean1"</span> <span class="attr">class</span>=<span class="string">"com.imtt.ioc.demo1.Bean1"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>有两个参数 id（或者 name，有细微差别）和 class，含义如下：</p><ul><li>id 和 name<ul><li>一般情况下，装配一个 Bean 时，通过指定一个 id 属性作为 Bean 的名称；</li><li>id 属性在 IOC 容器中必须是唯一的；</li><li>如果 Bean 的名称中含有特殊字符，就需要使用 name 属性。</li></ul></li><li>class<ul><li>class 用于设置一个类的完全路径名称，主要作用是 IOC 容器生成类的实例。</li></ul></li></ul><h2 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h2><p>对于类成员变量的注入，有以下几种方式。</p><h3 id="构造函数注入"><a href="#构造函数注入" class="headerlink" title="构造函数注入"></a>构造函数注入</h3><p>通过构造方法注入 Bean 的属性值或依赖的对象，保证了 Bean 实例在实例化后就可以使用。</p><ul><li>构造器注入在 <code>&lt;constructor-arg&gt;</code> 元素里声明的属性</li></ul><p>首先定义一个类 User，包含构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.ioc.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置文件 <code>applicationContext.xml</code> 中添加包含构造器的 Bean 配置片段：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.imtt.ioc.demo2.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"Twu"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 Junit 进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">User user = (User) applicationContext.getBean(<span class="string">"user"</span>);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>单元测试打印输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User&#123;username=&apos;Twu&apos;, age=20&#125;</span><br></pre></td></tr></table></figure><h3 id="属性-set-方法注入"><a href="#属性-set-方法注入" class="headerlink" title="属性 set 方法注入"></a>属性 set 方法注入</h3><p>使用set方法注入，在Spring配置文件中，通过 <code>&lt;property&gt;</code> 设置注入的 属性 </p><p>首先定义一个类 Person，包含 getter/setter 方法，以及一个依赖类 Cat：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.ioc.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCat</span><span class="params">(Cat cat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cat = cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", cat="</span> + cat +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.ioc.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Cat&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置文件 <code>applicationContext.xml</code> 中添加 Bean 的配置片段，依赖类使用 ref 参数：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.imtt.ioc.demo2.Person"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"Twu"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"19"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat"</span> <span class="attr">class</span>=<span class="string">"com.imtt.ioc.demo2.Cat"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"ketty"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 Junit 进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Person person = (Person) applicationContext.getBean(<span class="string">"person"</span>);</span><br><span class="line">System.out.println(person);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>单元测试打印输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person&#123;username=&apos;Twu&apos;, age=19, cat=Cat&#123;name=&apos;ketty&apos;&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="p名称空间的属性注入"><a href="#p名称空间的属性注入" class="headerlink" title="p名称空间的属性注入"></a>p名称空间的属性注入</h3><p>使用 p 命名空间，为了简化 XML 文件配置，Spring从2.5开始引入一个新的 p 名称空间，语法：</p><ul><li><code>p: &lt;属性名&gt;=&quot;xxx&quot;</code> ：引入常量值；</li><li><code>p: &lt;属性名&gt;-ref=&quot;xxx&quot;</code> ：引用其它Bean对象；</li></ul><p>以上面的 User 和 Cat 类为例，</p><p>在配置文件 <code>applicationContext.xml</code> 中添加 Bean 的配置片段：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.imtt.ioc.demo2.Person"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:username</span>=<span class="string">"Twu"</span> <span class="attr">p:age</span>=<span class="string">"20"</span> <span class="attr">p:cat-ref</span>=<span class="string">"cat"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat"</span> <span class="attr">class</span>=<span class="string">"com.imtt.ioc.demo2.Cat"</span> <span class="attr">p:name</span>=<span class="string">"ketty"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="SpEL-注入"><a href="#SpEL-注入" class="headerlink" title="SpEL 注入"></a>SpEL 注入</h3><p>SpEL：spring expression language ，spring表达式语言，对依赖注入进行简化 ，语法：</p><ul><li><code># {表达式}</code></li><li><code>&lt;bean id=&quot;&quot; value=&quot;#{表达式}&quot;&gt;</code></li></ul><p>SpEL表达式语言，语法：</p><ul><li><code>#{}</code></li><li><code>#{‘hello’}</code>：使用字符串；</li><li><code>#{topicId}</code>：使用另一个 bean ；</li><li><code>#{topicId.content.toUpperCase()}</code>：使用指定名属性，并使用方法 ；</li><li><code>#{T(java.lang.Math).PI}</code>：使用静态字段或方法。</li></ul><p>首先定义一个类 Product，以及一个依赖类 Category：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.ioc.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String price;</span><br><span class="line">    <span class="keyword">private</span> Category category;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(String price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Category <span class="title">getCategory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> category;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCategory</span><span class="params">(Category category)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.category = category;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Product&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", price='"</span> + price + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", category="</span> + category +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.ioc.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Category</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Category&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置文件 <code>applicationContext.xml</code> 中添加 Bean 的配置片段：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"category"</span> <span class="attr">class</span>=<span class="string">"com.imtt.ioc.demo2.Category"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"#&#123;'服装'&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"product"</span> <span class="attr">class</span>=<span class="string">"com.imtt.ioc.demo2.Product"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"#&#123;'男装'&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">value</span>=<span class="string">"#&#123;199.00&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">value</span>=<span class="string">"#&#123;category&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 Junit 进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Product product = (Product) applicationContext.getBean(<span class="string">"product"</span>);</span><br><span class="line">System.out.println(product);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>单元测试打印输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Product&#123;name=&apos;男装&apos;, price=&apos;64.81298023543616&apos;, category=Category&#123;name=&apos;服装&apos;&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂类型的属性注入"><a href="#复杂类型的属性注入" class="headerlink" title="复杂类型的属性注入"></a>复杂类型的属性注入</h3><p>复杂类型的属性注入包括：</p><ul><li>数组类型的属性注入</li><li>List集合类型的属性注入</li><li>Set集合类型的属性注入</li><li>Map集合类型的属性注入</li><li>Properties类型的属性注入</li></ul><p>定义一个包含多个复杂类型成员的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.ioc.demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] attrs;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; set;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Integer&gt; map;</span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getAttrs() &#123;</span><br><span class="line">        <span class="keyword">return</span> attrs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAttrs</span><span class="params">(String[] attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.attrs = attrs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> set;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSet</span><span class="params">(Set&lt;String&gt; set)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.set = set;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Integer&gt; <span class="title">getMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMap</span><span class="params">(Map&lt;String, Integer&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Properties <span class="title">getProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"CollectBean&#123;"</span> +</span><br><span class="line">                <span class="string">"attrs="</span> + Arrays.toString(attrs) +</span><br><span class="line">                <span class="string">", list="</span> + list +</span><br><span class="line">                <span class="string">", set="</span> + set +</span><br><span class="line">                <span class="string">", map="</span> + map +</span><br><span class="line">                <span class="string">", properties="</span> + properties +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置文件 <code>applicationContext.xml</code> 中添加 Bean 的配置片段，数组、List 和 Set 都适用 list 标签，Map 使用 map 标签，Properties 使用 props 标签：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"collectionBean"</span> <span class="attr">class</span>=<span class="string">"com.imtt.ioc.demo3.CollectBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"attrs"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>111<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>222<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>333<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"set"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>ddd<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>eee<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>fff<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"aaa"</span> <span class="attr">value</span>=<span class="string">"111"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"bbb"</span> <span class="attr">value</span>=<span class="string">"222"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"ccc"</span> <span class="attr">value</span>=<span class="string">"333"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"password"</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 Junit 进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">CollectBean collectBean = (CollectBean) applicationContext.getBean(<span class="string">"collectionBean"</span>);</span><br><span class="line">System.out.println(collectBean);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>单元测试打印输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CollectBean&#123;attrs=[aaa, bbb, ccc], list=[111, 222, 333], set=[ddd, eee, fff], map=&#123;aaa=111, bbb=222, ccc=333&#125;, properties=&#123;password=1234, username=root&#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="Bean-管理的注解方式"><a href="#Bean-管理的注解方式" class="headerlink" title="Bean 管理的注解方式"></a>Bean 管理的注解方式</h1><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>要使用注解方式需要在 pom.xml 中添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在  <code>src/main/resources</code> 目录下添加一个新的 XML 配置文件 <code>applicationContextAnn.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span> <span class="comment">&lt;!-- bean definitions here --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用注解定义-Bean"><a href="#使用注解定义-Bean" class="headerlink" title="使用注解定义 Bean"></a>使用注解定义 Bean</h2><p>Spring2.5 引入使用注解去定义 Bean：</p><ul><li><code>@Component</code> 描述 Spring 框架中 Bean；</li></ul><p>除了<code>@Component</code> 外，Spring 提供了3个功能基本等效的注解：</p><ul><li><code>@Repository</code> 用于对 DAO 实现类进行标注；</li><li><code>@Service</code> 用于对 Service 实现类进行标注；</li><li><code>@Controller</code> 用于对 Controller实现类进行标注。</li></ul><p>定义一个 UserService 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.demo4;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"UserService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Component(“UserService”) 即为注解，括号中的参数就相当于 XML 方式中 Bean 的 id。</p><p>但是要使注解生效，需要进行扫描，在 <code>applicationContextAnn.xml</code> 中开启注解扫描：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.imtt.demo4"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>使用 Junit 进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.demo4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDemo1</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationContext applicationContext =</span><br><span class="line">                <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContextAnn.xml"</span>);</span><br><span class="line"></span><br><span class="line">        UserService userService = (UserService) applicationContext.getBean(<span class="string">"userService"</span>);</span><br><span class="line">        String s = userService.sayHello(<span class="string">"Twu"</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单元测试打印输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello Twu</span><br></pre></td></tr></table></figure><h2 id="属性注入-1"><a href="#属性注入-1" class="headerlink" title="属性注入"></a>属性注入</h2><p>使用@Autowired 进行自动注入</p><ul><li><code>@Autowired</code> 默认按照类型进行注入<ul><li>如果存在两个相同 Bean 类型相同，则按照名称注入；</li><li><code>@Autowired</code> 注入时可以针对成员变量或者 set 方法；</li><li>按照类型注入表示与自定义的参数名无关，不相同也能完成注入；</li><li>通过 <code>@Autowired</code> 的 required 属性，设置一定要找到匹配的 Bean。</li></ul></li><li>使用<code>@Autowired</code> 和 <code>@Qualifier</code> 一起则按名称注入<ul><li>使用 <code>@Qualifier</code> 指定 Bean 名称后，注解 Bean 必须指定相同名称。</li></ul></li></ul><p>Spring 提供对 JSR-250 中定义 @Resource 标准注解的支持 </p><ul><li><code>@Resource</code> 和 <code>@Autowired</code> 注解功能相似，相当于<code>@Autowired</code> 和 <code>@Qualifier</code> 一起。</li></ul><h3 id="普通成员属性"><a href="#普通成员属性" class="headerlink" title="普通成员属性"></a>普通成员属性</h3><p>修改 UserService 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.demo4;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"UserService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"米饭"</span>)</span><br><span class="line">    <span class="keyword">private</span> String something;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"eat:"</span> + something);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Value(&quot;米饭&quot;)</code> 自动为成员变量注入值。</p><p>使用 Junit 进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">UserService userService = (UserService) applicationContext.getBean(<span class="string">"userService"</span>);</span><br><span class="line">userService.eat();</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>单元测试打印输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eat:米饭</span><br></pre></td></tr></table></figure><h3 id="注入-DAO-对象"><a href="#注入-DAO-对象" class="headerlink" title="注入 DAO 对象"></a>注入 DAO 对象</h3><p>新建一个 UserDao 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.demo4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span>(<span class="string">"userDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Dao 保存"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 UserService 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imtt.demo4;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"UserService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">//@Autowired</span></span><br><span class="line">    <span class="comment">//@Qualifier("userDao")</span></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"userDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Service 保存"</span>);</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 Junit 进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">UserService userService = (UserService) applicationContext.getBean(<span class="string">"userService"</span>);</span><br><span class="line">userService.save();</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>单元测试打印输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Service 保存</span><br><span class="line">Dao 保存</span><br></pre></td></tr></table></figure><h1 id="Bean-作用域"><a href="#Bean-作用域" class="headerlink" title="Bean 作用域"></a>Bean 作用域</h1><h2 id="XML-方式"><a href="#XML-方式" class="headerlink" title="XML 方式"></a>XML 方式</h2><p><code>&lt;bean .../&gt;</code> 片段中有一个 <code>scope</code> 参数，表示 Bean 的作用域，有四个可选值：</p><table><thead><tr><th>类别</th><th>说明</th></tr></thead><tbody><tr><td>singleton（默认值）</td><td>在 Spring IOC 容器中仅存在一个 Bean 实例，Bean 以单实例的方式存在。</td></tr><tr><td>prototype</td><td>每次调用 getBean() 时都会返回一个新的实例。</td></tr><tr><td>request</td><td>每次 HTTP 请求都会创建一个新的 Bean，该作用域仅适用于  WebApplicationContext 环境。</td></tr><tr><td>session</td><td>同一个 HTTP Session 共享一个 Bean，不同的 HTTP Session 使用不同的  Bean，该作用域仅适用于 WebApplicationContext 环境。</td></tr></tbody></table><h2 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h2><p>和 XML 方式一样，默认作用范围都是 singleton，可以添加注解进行修改：</p><ul><li><code>@Scope</code> 指定Bean的作用范围。</li></ul>]]></content>
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL 事务处理</title>
      <link href="/2018/06/05/MySQL-%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86.html/"/>
      <url>/2018/06/05/MySQL-%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86.html/</url>
      <content type="html"><![CDATA[<p> 事务一般特指数据库事务（Database Transaction），是指作为一个程序执行单元执行的一系列操作，要么完全执行，要么完全不执行。 </p><a id="more"></a><h1 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h1><p>事务的四个特性也称为 ASCI 特性。  </p><ol><li>原子性（atomicity）：一个事务是为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败。 </li><li>一致性（consistent）：事务将数据库从一种一致性状态转换到另外一种一致性状态，在事务开始之前和事务结束后数据库中数据的完整性没有被破坏。） </li><li>隔离性（isolation）：一个事务的执行，在未提交完成前对于其它事务是不可见的。 </li><li>持久性（durability ）：一旦事务提交，则其所做的修改就会永久保存到数据库中。 </li></ol><h1 id="MySQL-事务处理"><a href="#MySQL-事务处理" class="headerlink" title="MySQL 事务处理"></a>MySQL 事务处理</h1><h2 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h2><ol><li><p>MySQL 中只有使用了 Innodb 数据库引擎的数据库或表才支持事务。 </p><ul><li><code>show engines;</code> –查看服务器支持的引擎</li><li>在配置文件 my.cnf 中添加 <code>default-storage-engine = Innodb</code> 来修改默认引擎。</li></ul></li><li><p>MySQL 默认以自动提交（autocommit）模式运行。</p></li></ol><h2 id="事务处理语句"><a href="#事务处理语句" class="headerlink" title="事务处理语句"></a>事务处理语句</h2><ol><li><code>BEGIN</code> 或 <code>START TRANSACTION</code>：显式地开启一个事务。</li><li><code>COMMIT</code>：提交事务，并使已对数据库进行的所有修改变为永久性的。</li><li><code>ROLLBACK</code>：回滚事务，并撤销正在进行的所有未提交的修改。</li></ol><h1 id="事务并发问题"><a href="#事务并发问题" class="headerlink" title="事务并发问题"></a>事务并发问题</h1><p>两个事务或多个事务同时进行可能出现并发问题，典型三种问题：</p><ol><li>脏读；比如事务 A 对数据做了修改，接着事务 B 读取了修改后的数据，但是接着 A 执行了回滚，撤销了修改。</li><li>不可重复读；比如事务 A 对某个数据进行读取，接着事务 B 对该数据做了修改并进行了提交，但是事务 A 又进行了读取，此时事务 A 读取的两次结果就不一样了。</li><li>幻读；比如事务 A 对全部数据进行相同的修改，事务 B 接着插入了一条数据并进行了提交，但是此时事物 A 查询修改的结果，发现有一条数据不是预期的结果。</li></ol><p>可以对事物进行隔离来解决上面的问题。隔离有四个级别（由低到高、并发性由高到低）：</p><table><thead><tr><th style="text-align:left">事务隔离级别</th><th>含义</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td style="text-align:left">读未提交(read uncommitted)</td><td>两个事务之间互相可见</td><td>是</td><td>是</td><td>是</td></tr><tr><td style="text-align:left">读已提交(read committed)</td><td>一个事务进行时，其它已提交的事物对于该事务是可见的，即可以获取其它事务提交的数据</td><td>否</td><td>是</td><td>是</td></tr><tr><td style="text-align:left">可重复读(repeatable read)</td><td>事务进行时，其它所有事务对其不可见，即多次执行读，得到的结果是一样的</td><td>否</td><td>否</td><td>是</td></tr><tr><td style="text-align:left">串行化(serializable)</td><td>在读取的每一行数据上都加锁，会造成大量的锁超时和锁征用，严格数据一致性且没有并发时可使用</td><td>否</td><td>否</td><td>否</td></tr></tbody></table><p>可重复读（REPEATABLE READ）是 InnoDB 的默认隔离等级。可通过命令进行查询和修改：</p><ul><li><code>select @@tx_isolation</code>：查询默认隔离级别</li><li><code>set session transaction isolation level XXX</code>：设置当前会话隔离级别</li></ul>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Flask 中使用 WTForms 进行表单验证</title>
      <link href="/2018/05/27/Flask-%E4%B8%AD%E4%BD%BF%E7%94%A8-WTForms-%E8%BF%9B%E8%A1%8C%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81.html/"/>
      <url>/2018/05/27/Flask-%E4%B8%AD%E4%BD%BF%E7%94%A8-WTForms-%E8%BF%9B%E8%A1%8C%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81.html/</url>
      <content type="html"><![CDATA[<p>很多时候需要对浏览器提交的表单数据进行限制或验证，在 Flask 中使用 <a href="https://wtforms.readthedocs.io/en/stable/" target="_blank" rel="noopener">WTForms</a> 拓展模块是一个很好的选择。</p><p>只需通过 pip 安装：<code>pip install WTForms</code>。</p><a id="more"></a><h1 id="表单类"><a href="#表单类" class="headerlink" title="表单类"></a>表单类</h1><p>定义一个简单的表单类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> Form, StringField, IntegerField</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> Length, NumberRange, DataRequired</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SearchForm</span><span class="params">(Form)</span>:</span></span><br><span class="line">    q = StringField(validators=[DataRequired(), Length(min=<span class="number">1</span>, max=<span class="number">30</span>)])</span><br><span class="line">    <span class="comment"># q = StringField(validators=[Length(min=1, max=30, message='')])</span></span><br><span class="line">    page = IntegerField(validators=[NumberRange(min=<span class="number">1</span>, max=<span class="number">99</span>)], default=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>字段对象中的 <code>validators</code> 参数可以传入多个验证函数，验证函数中有个参数 <code>message</code> 用于自定义验证失败的错误提示。</p><h1 id="视图函数"><a href="#视图函数" class="headerlink" title="视图函数"></a>视图函数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify, request</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> SearchForm</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/book/search')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""搜索书籍"""</span></span><br><span class="line">    form = SearchForm(request.args)</span><br><span class="line">    <span class="keyword">if</span> form.validate():</span><br><span class="line">        q = form.q.data.strip()</span><br><span class="line">        page = form.page.data</span><br><span class="line">        <span class="comment"># do something, result = ...</span></span><br><span class="line">        <span class="keyword">return</span> jsonify(result)</span><br><span class="line">    <span class="keyword">return</span> jsonify(form.errors)</span><br></pre></td></tr></table></figure><ol><li>视图函数中通过 request 获取参数传入到表单类中，表单类会对传入的表单数据，<code>form.validate()</code> 函数返回是否通过验证。</li><li>通过 <code>form.&lt;NAME&gt;.data</code> 可以获得表单中的单个值。</li><li>如果验证不通过，可以通过 <code>form.errors</code> 获取验证不通过的错误提示。</li></ol>]]></content>
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Flask 使用 request 获取请求参数</title>
      <link href="/2018/05/24/Flask-%E4%BD%BF%E7%94%A8-request-%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0.html/"/>
      <url>/2018/05/24/Flask-%E4%BD%BF%E7%94%A8-request-%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0.html/</url>
      <content type="html"><![CDATA[<p>Flask 从客户端收到请求时，要让视图函数能获取参数，有两种方式：</p><ol><li>将其作为参数传入视图函数，</li><li>使用上下文全局变量 request。</li></ol><a id="more"></a><h1 id="使用参数传递"><a href="#使用参数传递" class="headerlink" title="使用参数传递"></a>使用参数传递</h1><p>存在一个路由如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/search/&lt;q&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(q)</span>:</span></span><br><span class="line"><span class="comment"># do something here.</span></span><br></pre></td></tr></table></figure><p>在浏览器中通过 <code>127.0.0.1:5000/search/123</code> 就可以成功访问。</p><p>这种方式使用起来很方便但是有两个问题：</p><ol><li>导致程序中的每个视图函数都会增加一些参数，太多的参数并不是个好主意；</li><li>如果需要使用 <code>127.0.0.1:5000/search?q=123</code> 这样的 URL，上面的方式是无法成功访问的。</li></ol><h1 id="request-获取参数"><a href="#request-获取参数" class="headerlink" title="request 获取参数"></a>request 获取参数</h1><p>Flask 中使用了 request 来更高效的获取参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Flask <span class="keyword">import</span> request</span><br><span class="line"><span class="meta">@app.route('/search')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">()</span>:</span></span><br><span class="line">    q = request.args[<span class="string">'q'</span>]</span><br><span class="line"><span class="comment"># do something here.</span></span><br></pre></td></tr></table></figure><p>这样就不需要向视图函数传入参数，从 <code>request.args</code> 中获取就行。另外，<code>request.args</code> 返回的一个不可变字典类型 <code>ImmutableMultiDict</code>，可以通过 <code>request.args.to_dict()</code> 的 <code>to_dict()</code> 函数将其转换成可变字典。</p>]]></content>
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Flask 使用 BluePrint 注册视图函数</title>
      <link href="/2018/05/17/Flask-%E4%BD%BF%E7%94%A8-BluePrint-%E6%B3%A8%E5%86%8C%E8%A7%86%E5%9B%BE%E5%87%BD%E6%95%B0.html/"/>
      <url>/2018/05/17/Flask-%E4%BD%BF%E7%94%A8-BluePrint-%E6%B3%A8%E5%86%8C%E8%A7%86%E5%9B%BE%E5%87%BD%E6%95%B0.html/</url>
      <content type="html"><![CDATA[<p>Flask 中的 Blueprint（蓝图）是什么？<a href="http://flask.pocoo.org/docs/1.0/blueprints/" target="_blank" rel="noopener">官方文档</a>的解释是「Flask uses a concept of <em>blueprints</em> for making application components and supporting common patterns within an application or across applications. Blueprints can greatly simplify how large applications work and provide a central means for Flask extensions to register operations on applications. 」。但是，具体到代码中是怎样的呢？</p><a id="more"></a><h1 id="什么时候使用蓝图"><a href="#什么时候使用蓝图" class="headerlink" title="什么时候使用蓝图"></a>什么时候使用蓝图</h1><p>一个简单的 Flask 应用如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Index'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Index'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>在这个应用中只注册了两个路由，但是一个网站会注册很多路由，虽然可以把这些路由都放在同一个模块中，但这种处理方式是非常不好的。如何将这些路由放在多个模块中，先试试下面的方法：</p><p>首先看看模块的结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├── app</span><br><span class="line">│   └── web</span><br><span class="line">│       └── example.py</span><br><span class="line">└── start.py</span><br></pre></td></tr></table></figure><p>主要的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># start.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app.web <span class="keyword">import</span> example</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/web/example.py</span></span><br><span class="line"><span class="keyword">from</span> start <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Index'</span></span><br></pre></td></tr></table></figure><p>当前的应用只注册了一个路由，不过已经将它放到了另外的模块中。但是他能成功访问到 <code>/index</code> URL 吗？结果是不能。</p><p>不能的原因是循环引用导致实例化了两个 app，注册路由的 app 和实际启动的 app 不是同一个。</p><p>那有什么更好的方法吗？Flask 提供了 BluePrint（蓝图）。</p><h1 id="蓝图的使用"><a href="#蓝图的使用" class="headerlink" title="蓝图的使用"></a>蓝图的使用</h1><p>还是使用具体的例子。</p><p>首先看看模块的结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├── app</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   └── web</span><br><span class="line">│       ├── __init__.py</span><br><span class="line">│       └── example.py</span><br><span class="line">└── start.py</span><br></pre></td></tr></table></figure><p>主要的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># start.py</span></span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> create_app</span><br><span class="line"></span><br><span class="line">app = create_app()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/__init__.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span><span class="params">()</span>:</span></span><br><span class="line">    app = Flask(__name__)</span><br><span class="line">    register_blueprint(app)</span><br><span class="line">    <span class="keyword">return</span> app</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register_blueprint</span><span class="params">(app)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> app.web <span class="keyword">import</span> web</span><br><span class="line">    app.register_blueprint(web)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/web/__init__.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line"></span><br><span class="line">web = Blueprint(<span class="string">'web'</span>, __name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app.web <span class="keyword">import</span> book</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/web/example.py</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> web</span><br><span class="line"></span><br><span class="line"><span class="meta">@web.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Index'</span></span><br></pre></td></tr></table></figure><ol><li>通过 <code>from flask import Blueprint</code> 导入，实例化的时候第一个参数为自定义名称，第二个参数为模块名称。然后在 <code>example.py</code> 模块中通过蓝图注册路由并被导入到 <code>app/web/__init__.py</code> 中，注意要先进行实例化 <code>web = Blueprint(&#39;web&#39;, __name__)</code> 再  <code>from app.web import book</code>，顺序不能颠倒。</li><li>为什么是在 <code>app/web/__init__.py</code> 模块中蓝图实例化呢？在 <code>web</code> 包下可能不止 <code>example.py</code> 一个模块，而这些模块又是与网站某个模块相关的，这样一个包下能够使用同一个实例化的蓝图，减少了蓝图的实例化次数。</li><li>最后在 <code>app/__init__.py</code> 模块中使用 <code>register_blueprint()</code> 函数将实例化的蓝图和实例化的 app 关联起来。</li></ol>]]></content>
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JSP 内置对象</title>
      <link href="/2018/05/10/JSP-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1.html/"/>
      <url>/2018/05/10/JSP-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1.html/</url>
      <content type="html"><![CDATA[<p>JSP 内置对象（又称隐含对象）共有9个，不需要预先声明就可以在脚本代码和表达式中使用。</p><a id="more"></a><p>JSP 9个内置对象为： request、out、response、pageContext、page、session、config、exception、application。</p><h1 id="request-对象"><a href="#request-对象" class="headerlink" title="request 对象"></a>request 对象</h1><p>request 对象的类型为 <code>javax.servlet.http.HttpServletRequest</code>，封装了来自客户端的请求。常用方法有：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>String getParameter(String name)</td><td>获取表单提交信息</td></tr><tr><td>Enumeration&lt;String> getParameterNames()</td><td>返回可用参数的枚举</td></tr><tr><td>String[] getParameterValues(String name)</td><td>返回包含参数 name 的所有值的数组。</td></tr><tr><td>Enumeration&lt;String> getAttributeNames()</td><td>返回所有属性名的枚举</td></tr><tr><td>Object getAttribute(String name)</td><td>返回指定属性的属性值</td></tr><tr><td>String getCharacterEncoding()</td><td>返回字节编码方式</td></tr><tr><td>void setCharacterEncoding(String env)</td><td>设置字节编码方式</td></tr><tr><td>String getProtocol()</td><td>获取用户的使用协议</td></tr><tr><td>String getServletPath()</td><td>获取用户提交信息的页面</td></tr><tr><td>String getMethod()</td><td>获取客户提交信息的方式</td></tr><tr><td>String getHeader(String name)</td><td>获取 HTTP 头文件中的参数 name 的值</td></tr><tr><td>String getRemoteAddr()</td><td>获取客户的 IP 地址</td></tr><tr><td>String getRemoteHost()</td><td>获取客户机的名称</td></tr><tr><td>int getServerPort()</td><td>获取服务器端口号</td></tr><tr><td>String getServerName()</td><td>获取服务器的名称</td></tr></tbody></table><h1 id="out-对象"><a href="#out-对象" class="headerlink" title="out 对象"></a>out 对象</h1><p>out 对象类型为<code>javax.servlet.jsp.JspWriter</code>，用来向客户端输出内容。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">out.println(<span class="string">"imtt.com"</span>);</span><br></pre></td></tr></table></figure><p>常用方法有：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>void clear()</td><td>清除缓冲区的内容</td></tr><tr><td>void clearBuffer()</td><td>清除缓冲区的当前内容</td></tr><tr><td>void flush()</td><td>清空流</td></tr><tr><td>int getBufferSize()</td><td>返回缓冲区以字节数的大小，如不设缓冲区返回 0</td></tr><tr><td>int getRemaining()</td><td>返回缓冲区还剩余多少可用</td></tr><tr><td>boolean isAutoFlush()</td><td>返回缓冲区满时，是自动清空还是抛出异常</td></tr><tr><td>void close()</td><td>关闭输出流</td></tr><tr><td>void println()</td><td>打印空行</td></tr></tbody></table><h1 id="response-对象"><a href="#response-对象" class="headerlink" title="response 对象"></a>response 对象</h1><p>response 对象的类型为 <code>javax.servlet.http.HttpServletResponse</code>，封装了对客户端的响应。常用方法有：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>String getCharacterEncoding()</td><td>返回响应用字符编码</td></tr><tr><td>void setCharacterEncoding(String charset)</td><td>对响应设置字符编码</td></tr><tr><td>ServletOutputStream getOutputStream()</td><td>返回响应的一个二进制输出流</td></tr><tr><td>PrintWriter getWriter()</td><td>返回向客户端输出字符的一个对象</td></tr><tr><td>void setContentLength(int len)</td><td>设置响应头长度</td></tr><tr><td>void setContentType(String type)</td><td>设置响应的 MIME 类型</td></tr><tr><td>void sendRedirect(String location)</td><td>重定向</td></tr></tbody></table><h1 id="pageContext-对象"><a href="#pageContext-对象" class="headerlink" title="pageContext 对象"></a>pageContext 对象</h1><p> pageContext 对象的类型为 <code>javax.servlet.jsp.PageContext</code>，提供了对 JSP 页面内所有的对象及名字空间的访问。常用方法有：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>JspWriter getOut()</td><td>返回当前客户端响应被使用的 JspWriter 流(out)</td></tr><tr><td>HttpSession getSession()</td><td>返回当前页中的 HttpSession 对象 (session)</td></tr><tr><td>Object getPage()</td><td>返回当前页的 Object 对象(page)</td></tr><tr><td>ServletRequest getRequest()</td><td>返回当前页的 ServletRequest 对象 (request)</td></tr><tr><td>ServletResponse getResponse()</td><td>返回当前页的 ServletResponse 对 象(response)</td></tr><tr><td>Exception getException()</td><td>返回当前页的 Exception 对象 (exception)</td></tr><tr><td>ServletConfig getServletConfig()</td><td>返回当前页的 ServletConfig 对象 (config)</td></tr><tr><td>ServletContext getServletContext()</td><td>返回当前页的 ServletContext 对象 (application)</td></tr><tr><td>public void setAttribute(String name, Object value)</td><td>在指定范围内设置属性及属性值</td></tr><tr><td>public Object getAttribute(String name)</td><td>取属性的值</td></tr><tr><td>Object getAttribute(String name, int scope)</td><td>在指定范围内取属性的值</td></tr><tr><td>public Object findAttribute(String name)</td><td>寻找一属性，返回属性值或 NULL</td></tr><tr><td>public void removeAttribute(String name)</td><td>删除某属性</td></tr><tr><td>public void removeAttribute(String name,int scope)</td><td>在指定范围删除某属性</td></tr><tr><td>public int getAttributeScope(String name)</td><td>返回某属性的作用范围</td></tr><tr><td>public Enumeration&lt;String> getAttributeNamesInScope(int scope)</td><td>返回指定范围内可用的属性名枚举</td></tr><tr><td>public void release()</td><td>释放 pageContext 所占用的资源</td></tr><tr><td>public void forward(String relativeUrlPath)</td><td>使当前页面重导到另一页面</td></tr><tr><td>public void include(String relativeUrlPath)</td><td>在当前位置包含另一文件</td></tr></tbody></table><h1 id="page-对象"><a href="#page-对象" class="headerlink" title="page 对象"></a>page 对象</h1><p>pageContext 对象的类型为 <code>javax.servlet.jsp.HttpJspPage</code>，指向当前 JSP 页面本身，代表了正在运行的类对象（由 JSP 文件产生）。 </p><h1 id="session-对象"><a href="#session-对象" class="headerlink" title="session 对象"></a>session 对象</h1><p>session 对象的类型为 <code>javax.servlet.http.HttpSession</code>，指客户端与服务器的一次会话。常用方法有：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>long getCreationTime()</td><td>返回 session 创建时间</td></tr><tr><td>String getId()</td><td>返回 session id</td></tr><tr><td>long getLastAccessedTime()</td><td>返回 session 里客户端最近一次请求时间</td></tr><tr><td>int getMaxInactiveInterval()</td><td>返回两次请求间隔多长时间 session 被取消(ms)</td></tr><tr><td>void setMaxInactiveInterval()</td><td>设置两次请求间隔多长时间 session 被取消(ms)</td></tr><tr><td>String[] getValueNames()</td><td>返回一个包含 session 中所有可用属性的数组</td></tr><tr><td>void invalidate()</td><td>取消 session</td></tr><tr><td>boolean isNew(</td><td>返回服务器创建的一个 session 客户端是否已经加入</td></tr><tr><td>void removeAttribute(String name)</td><td>删除 session 中指定的属性</td></tr></tbody></table><h1 id="config-对象"><a href="#config-对象" class="headerlink" title="config 对象"></a>config 对象</h1><p>config 对象的类型为 <code>javax.servlet.ServletConfig</code>，用来在一个 Servlet 初始化时传递信息（如初始化时所要用到的参数）。常用方法有：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>ServletContext getServletContext()</td><td>返回包含服务器相关信息的所有 servletContext 对象</td></tr><tr><td>String getInitParameter(String name)</td><td>获取初始化参数值</td></tr><tr><td>Enumeration&lt;String> getInitParameterNames()</td><td>返回 servlet 初始化所需所有参数的枚举</td></tr></tbody></table><h1 id="exception"><a href="#exception" class="headerlink" title="exception"></a>exception</h1><p>exception 对象的类型为 <code>java.lang.Throwable</code>， 当一个页面在运行过程中发生了异常就产生这个对象。如果一个 JSP 页面要应用此对象，就必须把 isErrorPage 设为 true。常用方法有： </p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>public String getMessage()</td><td>返回描述异常的消息</td></tr><tr><td>public String toString()</td><td>返回关于异常的简短描述消息</td></tr><tr><td>public void printStackTrace()</td><td>显示异常及其栈轨迹</td></tr><tr><td>public Throwable fillInStackTrace()</td><td>重写异常的执行栈轨迹</td></tr></tbody></table><h1 id="application-对象"><a href="#application-对象" class="headerlink" title="application 对象"></a>application 对象</h1><p>application 对象的类型为 <code>javax.servlet.ServletContext</code> ，用于用户间数据共享，可存放全局变量。常用方法有： </p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Object getAttribute(String name)</td><td>返回给定参数的属性值</td></tr><tr><td>Enumeration&lt;String> getAttributeNames()</td><td>返回所有属性名的枚举</td></tr><tr><td>void setAttribute(String name,Object obj)</td><td>设定属性的属性值</td></tr><tr><td>void removeAttribute(String name)</td><td>删除属性及其属性值</td></tr><tr><td>String getServerInfo()</td><td>返回 JSP(Servlet) 引擎名及其版本号</td></tr><tr><td>String getRealPath(String path)</td><td>返回虚拟路径的真实路径</td></tr><tr><td>ServletContext getContext(String uripath)</td><td>返回指定 WebApplication 的 application 对象</td></tr><tr><td>int getMajorVersion()</td><td>返回服务器支持的版本号 API 的最大版本号</td></tr><tr><td>int getMinorVersion()</td><td>返回服务器支持的 servlet API 的最小版本号</td></tr><tr><td>String getMimeType(String file)</td><td>返回指定文件的 MIME 类型</td></tr><tr><td>URL getResource(String path)</td><td>返回指定资源（文件及目录）的 URL 路径</td></tr><tr><td>InputStream getResourceAsStream(String path)</td><td>返回指定资源的输入流</td></tr><tr><td>RequestDispatcher getRequestDispatcher (String path)</td><td>返回指定资源的 requestDispatcher 对象</td></tr><tr><td>Servlet getServlet(String name)</td><td>返回指定名的 servlet</td></tr><tr><td>Enumeration&lt;Servlet> getServlets()</td><td>返回所有 servlet 的枚举</td></tr><tr><td>Enumeration&lt;String> getServletNames()</td><td>返回所有 servlet 名的枚举</td></tr><tr><td>void log(String msg)</td><td>把指定消息写入 servlet 的日志文件</td></tr><tr><td>void log(Exception exception, String msg)</td><td>把指定异常信息的栈轨迹及错误消息写入 servlet 的日志文件</td></tr><tr><td>void log(String message, Throwable throwable)</td><td>把栈轨迹及 throwable 给出的异常信息写入 servlet 的日志文件</td></tr></tbody></table><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><p>pageContext、request、response、application 四种内置对象也是 JSP 中四种作用域， 表示数据存储的范围。其中 pageContext 不仅提供所有四个作用域层次的属性查询和修改能力，也提供了转发请求到其它资源和包含其他资源的方法 。</p>]]></content>
      
      <categories>
          
          <category> Java Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Flask 中的唯一 URL 原则</title>
      <link href="/2018/05/05/Flask-%E4%B8%AD%E7%9A%84%E5%94%AF%E4%B8%80-URL-%E5%8E%9F%E5%88%99.html/"/>
      <url>/2018/05/05/Flask-%E4%B8%AD%E7%9A%84%E5%94%AF%E4%B8%80-URL-%E5%8E%9F%E5%88%99.html/</url>
      <content type="html"><![CDATA[<p>保证 URL 的唯一性，有助于避免搜索引擎索引同一个页面两次。</p><a id="more"></a><p>Flask 里如何保证 URL 的唯一性呢？看下面两个示例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Index'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>上面的代码构建了一个简单的 Flask 应用，<code>route</code>  装饰器把 <code>index</code>  函数绑定到了 <code>/index</code> URL 上。此时可以通过 <code>127.0.0.1:5000/index</code> 来访问，如果通过 <code>127.0.0.1:5000/index/</code> 访问则会产生 404 “Not Found” 错误。</p><p>修改路由如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/index/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Index'</span></span><br></pre></td></tr></table></figure><p>URL 末尾多了一个斜线，这个时候通过 <code>127.0.0.1:5000/index</code> 和 <code>127.0.0.1:5000/index/</code> 都可以访问同一个界面，但其仍然保证了 URL 的唯一性。因为访问 <code>127.0.0.1:5000/index</code> 后重定向到了 <code>127.0.0.1:5000/index/</code> ，如图：</p><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/Flask中的唯一URL原则/flask_redict.png"><p>Flask 的这种机制使得在遗忘 URL 末尾的斜线时，关联的 URL 能够接任工作。</p>]]></content>
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL 中的 B-Tree 索引和 Hash 索引</title>
      <link href="/2018/04/26/MySQL-%E4%B8%AD%E7%9A%84-B-Tree-%E7%B4%A2%E5%BC%95%E5%92%8C-Hash-%E7%B4%A2%E5%BC%95.html/"/>
      <url>/2018/04/26/MySQL-%E4%B8%AD%E7%9A%84-B-Tree-%E7%B4%A2%E5%BC%95%E5%92%8C-Hash-%E7%B4%A2%E5%BC%95.html/</url>
      <content type="html"><![CDATA[<blockquote><p>数据库学习笔记</p></blockquote><p>索引告诉了存储引擎如何快速找到需要存储的数据。</p><p>MySQL 支持的常用索引为：B-Tree 索引和 Hash 索引。</p><a id="more"></a><h1 id="B-Tree-索引"><a href="#B-Tree-索引" class="headerlink" title="B-Tree 索引"></a>B-Tree 索引</h1><p>B-Tree 索引使用 B+ 树结构存储数据，每个叶子节点都包含指向下一个叶子节点的指针，可以方便叶子节点的遍历。</p><p>B-Tree 索引能够加快数据的查询速度，同时 B-Tree 索引采用了顺序存储，更适合范围查找。</p><p>并不是所有情况都适合使用 B-Tree 索引，有时对使用 B-Tree 索引还有限制：</p><ol><li>可以使用 B-Tree 索引 的情况：<ul><li>全值匹配的查询，</li><li>匹配最左前缀的查询，</li><li>匹配列前缀的查询，</li><li>匹配范围值的查询，</li><li>精确匹配左前列并范围匹配另一列，</li><li>只访问索引的查询。</li></ul></li><li>使用限制：<ul><li>如果不是按照索引最左列开始查找，则无法使用索引，</li><li>使用索引时不能跳过索引中的列，</li><li>在 <code>not in</code> 和 <code>&lt;&gt;</code> 操作中无法使用索引，</li><li>如果查询中有某个列的范围查询，则右边所有列都无法使用索引。</li></ul></li></ol><h1 id="Hash-索引"><a href="#Hash-索引" class="headerlink" title="Hash 索引"></a>Hash 索引</h1><p>Hash 索引基于 Hash 表实现，只有查询条件精确匹配 Hash 索引中的所有列时才能够使用到 Hash 索引。</p><p>对于 Hash 索引中的所有列，存储引擎都会为每一行计算一个 Hash 码，Hash 索引中存储的就是 Hash 码。</p><p>同样的，使用 Hash 索引也有限制：</p><ol><li>必须进行二次查找，</li><li>无法用于排序，</li><li>不支持部分索引查找，也不支持范围查找，</li><li>Hash 索引中 Hash 码的计算可能存在 Hash 冲突。</li></ol><h1 id="索引的优缺点"><a href="#索引的优缺点" class="headerlink" title="索引的优缺点"></a>索引的优缺点</h1><p>索引对数据的访问带来了便利，但也有它的副作用。</p><ol><li>优点：<ul><li>大大减小了存储引擎需要扫描的数据量，</li><li>可以帮助我们进行排序以避免使用临时表，</li><li>可以把随机 I/O 变为顺序 I/O。</li></ul></li><li>缺点：<ul><li>增加了数据库写操作的成本，</li><li>太多的索引会增加查询优化器的选择时间。</li></ul></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://coding.imooc.com/class/49.html" target="_blank" rel="noopener">课程学习 | MySQL性能管理及架构设计</a></p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL 数据库分库分表</title>
      <link href="/2018/04/03/MySQL-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8.html/"/>
      <url>/2018/04/03/MySQL-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8.html/</url>
      <content type="html"><![CDATA[<blockquote><p>学习了分库分表，记一下笔记。</p></blockquote><p>当数据库中的数据越来越多、数据库压力越来越大、数据库性能下降的时候，需要对单一主数据库服务器进行拆分来分担数据库压力。</p><p>拆分的方式有三种：分库、分表和分片。</p><a id="more"></a><h1 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h1><ol><li>分库：把一个实例（节点、集群）中的多个数据库拆分到不同的实例。<ul><li>优点：实现数据库拆分比较简单；</li><li>缺点：如果写压力集中在一个数据库节点，拆分后可能出现大部分压力出现在某个节点上。</li></ul></li><li>分表：把一个库中的表分离到不同的数据库中。<ul><li>优点：每个数据库节点承担了原来数据库节点的一部分节点；</li><li>随着数据的数据越来越多，某个或几个表所在的数据库节点出现压力过大，此时需要进行表的水平拆分（分片）。</li></ul></li></ol><h1 id="分片"><a href="#分片" class="headerlink" title="分片"></a>分片</h1><p>数据库分片操作即对一个库中的相关表进行水平拆分到不同实例的数据库中。但是分片操作需要解决许多问题，如果可以不建议分片操作。</p><h2 id="分区键的选择"><a href="#分区键的选择" class="headerlink" title="分区键的选择"></a>分区键的选择</h2><p>分区键决定了如何对数据库进行分片以及分片后如何查询数据。需要考虑两个方面：</p><ol><li>尽量避免跨分片查询的发生；</li><li>尽量使各个分片中的数据平均。</li></ol><h2 id="无需分片的表的存储"><a href="#无需分片的表的存储" class="headerlink" title="无需分片的表的存储"></a>无需分片的表的存储</h2><p>一些表的写压力很小，实际使用中并不需要进行分片操作，但需要考虑它们的存储，存储方式有两种：</p><ol><li><p>每个分片中存储一份相同的数据。</p><p>这种方法通常用于表数据量不大、不会经常被更新，同时经常需要和分区表在一起关联查询的字典类表。这种情况下，对于维护每个分片中的相同表的一致性就很重要，一般使用多写的方式维护表的数据，并且定期检查。</p></li><li><p>使用额外的节点统一存储。</p><p>这种把所有不同分片的数据存储在一个公共位置的方法的优点是整个集群中不存在数据的冗余问题，但是查询效率低。</p></li></ol><h2 id="分片在节点上的布置"><a href="#分片在节点上的布置" class="headerlink" title="分片在节点上的布置"></a>分片在节点上的布置</h2><p>分片在节点上部署有许多方法，如：</p><ol><li>每个分片使用单一数据库，并且数据库名也相同。</li><li>将多个分片表存储在一个数据库中，并在表名上加入分片号后缀。</li><li>在一个节点中部署多个数据库，每个数据库包含一个分片，对数据库名编号，并且在每个数据库中包含一套或多套分片表（需要对分片表编号）。</li></ol><h2 id="分片中数据的分配"><a href="#分片中数据的分配" class="headerlink" title="分片中数据的分配"></a>分片中数据的分配</h2><ol><li>按分区键的 Hash 值和计划分片的数量取模来分配分片数据。</li><li>按分区键的范围来分配分片数据（常用于分区键为预期类型或数值类型的数据）。<ul><li>优点：知道数据被分配到哪个分区片中；</li><li>缺点：容易产生数据分配不均匀以及数据访问量不平衡。</li></ul></li><li>利用分区键和分片的映射表来分配分片数据。<ul><li>优点：方便对数据库在分片中的存储位置进行控制；</li><li>缺点：分区键和分片的对映关系可能存在较大的存储压力，此时可以使用缓存的方式。</li></ul></li></ol><h2 id="全局-ID-的生成"><a href="#全局-ID-的生成" class="headerlink" title="全局 ID 的生成"></a>全局 ID 的生成</h2><p>在单节点中可以使用 <code>auto_increment</code> 属性来生成 ID，但在多节点分片数据库中仅仅这样是不行的。</p><ol><li>仍然使用 <code>auto_increment</code> 属性，但是要修改 <code>auto_increment_increment</code> 和 <code>auto_increment_offset</code> 两个参数，<code>auto_increment_increment</code> 参数取值与分片节点数量相同，决定了每次自增 ID 增长的步长。但是这种方式有个缺点，只使用于一个节点中只保存一套分区表的情况。</li><li>使用全局节点来生成 ID，并在这个节点中建立相应的表来使用这个 <code>auto_increment</code> 属性生成自增 ID。应用程序先通过这个全局表获得唯一 ID 后，在通过分区函数把数据插入到不同分片中。其缺点是，全局 ID 可能成为系统的瓶颈。</li><li>在 Redis 等缓存服务器中创建全局 ID。</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://coding.imooc.com/class/49.html" target="_blank" rel="noopener">课程学习 | MySQL性能管理及架构设计</a></p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python Socket 编程</title>
      <link href="/2018/03/16/Python-Socket-%E7%BC%96%E7%A8%8B.html/"/>
      <url>/2018/03/16/Python-Socket-%E7%BC%96%E7%A8%8B.html/</url>
      <content type="html"><![CDATA[<p>开放式系统互联（OSI）模型由下往上分为物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。TCP/IP 协议为五层，其中应用层处理 OSI 的会话层、表示层和应用层。而 Socket 是对 TCP/IP 协议的封装、是一个调用接口（API）。</p><a id="more"></a><h1 id="五层网络模型"><a href="#五层网络模型" class="headerlink" title="五层网络模型"></a>五层网络模型</h1><table><thead><tr><th>OSI 层</th><th>功能</th><th>TCP/IP协议</th></tr></thead><tbody><tr><td>应用层</td><td>文件传输、电子邮件、文件服务</td><td>HTTP、FTP、SMTP、DNS、Telnet 等</td></tr><tr><td>传输层</td><td>提供端对端的接口</td><td>TCP、UDP</td></tr><tr><td>网络层</td><td>为数据包选择路由</td><td>IP、ICMP 等</td></tr><tr><td>数据链路层</td><td>传输有地址的帧、错误检测功能</td><td>ARP 等</td></tr><tr><td>物理层</td><td>物理媒体</td><td>1000 BASE-SX 等</td></tr></tbody></table><h1 id="Socket-编程"><a href="#Socket-编程" class="headerlink" title="Socket 编程"></a>Socket 编程</h1><p>使用 socket 模块可以实现服务端与客户端的通信，通信过程如图（基于 TCP 的通信）：</p><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/Python-Socket-编程/socket编程.png"><p>服务端端一直处于监听状态和服务状态，等待客户端的请求；当客户端与服务端通过三次握手成功连接后就可以进行通信了，在通信结束后将连接关闭。如果一次请求后便关闭连接即为一次 HTTP 请求（Keep-Alive 关闭状态）。 </p><h2 id="TCP-通信"><a href="#TCP-通信" class="headerlink" title="TCP 通信"></a>TCP 通信</h2><h3 id="创建-Socket-服务器"><a href="#创建-Socket-服务器" class="headerlink" title="创建 Socket 服务器"></a>创建 Socket 服务器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">server.bind((<span class="string">'0.0.0.0'</span>, <span class="number">8000</span>))</span><br><span class="line">server.listen()</span><br><span class="line">sock, addr = server.accept()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="comment"># 获取从客户端发送的数据、一次获取 1k 的数据</span></span><br><span class="line">    data = sock.recv(<span class="number">1024</span>).decode(<span class="string">'utf8'</span>)</span><br><span class="line">    print(data)</span><br><span class="line">    <span class="keyword">if</span> data == <span class="string">'exit'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    re_data = input()</span><br><span class="line">    sock.send(re_data.encode(<span class="string">'utf8'</span>))</span><br><span class="line"></span><br><span class="line">sock.close()</span><br><span class="line">server.close()</span><br></pre></td></tr></table></figure><ol><li><code>sokcet</code> 接受的第一个参数为套接字地址类型：<code>socket.AF_INET</code> 表示 IPv4， <code>socket.AF_INET6</code> 表示 IPv6；第二个参数为套接字类型：<code>socket.SOCK_STREAM</code> 表示 TCP， <code>socket.SOCK_DGRAM</code> 表示 UDP。</li><li><code>recv()</code> 函数中的参数表示接收数据的缓存大小，可根据网络性能和程序需要改变这个容量。</li><li>使用 while 循环使其一直通信中。</li><li>通信结束后使用 <code>server.close()</code> 和 <code>sock.close()</code> 关闭。</li></ol><h3 id="创建-Socket-客户端"><a href="#创建-Socket-客户端" class="headerlink" title="创建 Socket 客户端"></a>创建 Socket 客户端</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">client.connect((<span class="string">'127.0.0.1'</span>, <span class="number">8000</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    re_data = input()</span><br><span class="line">    client.send(re_data.encode(<span class="string">'utf8'</span>))</span><br><span class="line">    <span class="keyword">if</span> re_data == <span class="string">'exit'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    data = client.recv(<span class="number">1024</span>).decode(<span class="string">'utf8'</span>)</span><br><span class="line">    print(data)</span><br><span class="line"></span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure><p>在执行 TCP 服务器和客户端通信时，首先要启动服务器，使其监听等待连接。</p><h3 id="多用户连接"><a href="#多用户连接" class="headerlink" title="多用户连接"></a>多用户连接</h3><p>前面创建了服务端和客户端，但只能单对单通信，如果需要服务器与多个客户端连接，可以使用多线程。对每一个客户端请求分配一个线程。</p><p>此时服务端程序如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">server.bind((<span class="string">'0.0.0.0'</span>, <span class="number">8000</span>))</span><br><span class="line">server.listen()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(sock, addr)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        data = sock.recv(<span class="number">1024</span>).decode(<span class="string">'utf8'</span>)</span><br><span class="line">        print(data)</span><br><span class="line">        <span class="keyword">if</span> data == <span class="string">'exit'</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        re_data = input()</span><br><span class="line">        sock.send(re_data.encode(<span class="string">'utf8'</span>))</span><br><span class="line">    sock.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    sock, addr = server.accept()</span><br><span class="line">    client_thread = threading.Thread(target=handle, args=(sock, addr))</span><br><span class="line">    client_thread.start()</span><br></pre></td></tr></table></figure><h3 id="模拟-HTTP-请求"><a href="#模拟-HTTP-请求" class="headerlink" title="模拟 HTTP 请求"></a>模拟 HTTP 请求</h3><p>使用 Socket 可以模拟一个 HTTP 请求，如爬虫爬取网页界面：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_url</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="string">"""通过 socket 请求 http"""</span></span><br><span class="line">    url = urlparse(url)</span><br><span class="line">    host = url.netloc  <span class="comment"># 网站域名</span></span><br><span class="line">    path = url.path  <span class="comment"># 网页路径</span></span><br><span class="line">    <span class="keyword">if</span> path == <span class="string">''</span>:</span><br><span class="line">        path = <span class="string">'/'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 建立 socket 连接</span></span><br><span class="line">    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    client.connect((host, <span class="number">80</span>))</span><br><span class="line">    client.send(<span class="string">'GET &#123;&#125; HTTP/1.1\nHost:&#123;&#125;\nConnection:close\n\n'</span>.format(path, host).encode(<span class="string">'utf8'</span>))</span><br><span class="line"></span><br><span class="line">    data = <span class="string">b''</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        d = client.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> d:</span><br><span class="line">            data += d</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    data = data.decode(<span class="string">'utf8'</span>)</span><br><span class="line">    print(data)</span><br><span class="line">    client.close()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    get_url(<span class="string">'http://www.baidu.com'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意：模拟 HTTP 请求必须使用 80 端口。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Socket </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Django 内置模型字段类型</title>
      <link href="/2018/02/20/Django-%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9E%8B%E5%AD%97%E6%AE%B5%E7%B1%BB%E5%9E%8B.html/"/>
      <url>/2018/02/20/Django-%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9E%8B%E5%AD%97%E6%AE%B5%E7%B1%BB%E5%9E%8B.html/</url>
      <content type="html"><![CDATA[<p>Django 模型是使用 Python 代码对数据库中数据的描述，是数据的结构，等效于 SQL 中的 CREATE TABLE 语句。</p><p>定义模型时，使用一个 Python 类（<code>django.db.models.Model</code> 的子类）表示一个模型，模型中的一个属性对应数据库中表的列，属性名对应列的名称，字段类型（如 <code>CharField</code> ）对应数据库列的类型（如 <code>varchar</code>）。</p><a id="more"></a><h1 id="模型字段类"><a href="#模型字段类" class="headerlink" title="模型字段类"></a>模型字段类</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Category</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>, unique=<span class="keyword">True</span>, verbose_name=<span class="string">'category_name'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name_plural = <span class="string">'Categories'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    category = models.ForeignKey(Category, on_delete=models.CASCADE, verbose_name=<span class="string">'category'</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>, unique=<span class="keyword">True</span>, verbose_name=<span class="string">'node_name'</span>)</span><br><span class="line">    slug = models.SlugField(max_length=<span class="number">128</span>, verbose_name=<span class="string">'slug_url'</span>)</span><br><span class="line">    created_time = models.DateTimeField(auto_now_add=<span class="keyword">True</span>, verbose_name=<span class="string">'created_time'</span>)</span><br><span class="line">    updated_time = models.DateTimeField(auto_now=<span class="keyword">True</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">'updated_time'</span>)</span><br><span class="line">    topic_nums = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">'topic_nums'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure><p>上面代码中定义了两个模型，在这两个模型中，使用了许多字段类型（如 <code>CharField</code>、 <code>DateTimeField</code> 等)，Django 内置了许多<a href="https://docs.djangoproject.com/zh-hans/2.0/ref/models/fields/" target="_blank" rel="noopener">字段类型</a>，常见的字段类和说明如下：</p><table><thead><tr><th>字段类</th><th>说明</th></tr></thead><tbody><tr><td>AutoField</td><td>一个 IntegerField，根据 ID 自动递增。</td></tr><tr><td>IntegerField</td><td>整数。在Django 支持的所有数据库中取值范围是 -2147483648 到 2147483647；当 <code>localize</code>（支持表单数据输入以及渲染输出的本地化的参数）设置为 <code>False</code> 时，默认的表单部件是 <code>NumberInput</code>，否则是 <code>TextInput</code>。</td></tr><tr><td>CharField</td><td>用来存储各种长度的字符串， 默认表单部件 <code>TextInput</code>。</td></tr><tr><td>BooleanField</td><td>真假值字段，默认为默认表单部件 <code>CheckboxInput</code>。</td></tr><tr><td>DateField</td><td>日期，在 Python 中使用 <code>datetime.date</code> 实例表示。</td></tr><tr><td>DateTimeField</td><td>日期和时间，在 Python 中使用 <code>datetime.datetime</code> 实例表示。</td></tr><tr><td>EmailField</td><td>一种 <code>CharField</code>，使用EmailValidator 验证邮箱格式，<code>max_length</code> 的默认值为 254。</td></tr><tr><td>FileField</td><td>文件上传字段。</td></tr><tr><td>FilePathField</td><td>一种 <code>CharField</code>，限定只能在文件系统中的特定目录里选择文件。</td></tr><tr><td>FloatField</td><td>浮点数，在 Python 中使用 <code>float</code> 实例表示。当 <code>localize</code> 设置为 <code>False</code> 时，默认的表单部件是 <code>NumberInput</code>，否则是 <code>TextInput</code>。</td></tr><tr><td>ImageField</td><td>属性和方法继承自 FileField，对上传的对象进行了验证，增加了 height 和width 两个属性。需要 <code>Pillow</code> 库支持。</td></tr><tr><td>GenericIPAddressField</td><td>IPV4或IPV6地址，字符串格式（如 192.168.1.1或fe80::e41c:c9da:a324:cc50%12），默认表单部件 <code>TextInput</code>。</td></tr><tr><td>SlugField</td><td>别名，Slug 字段只能包含字母，数字，下划线或者是连字符，通常用来作为短标签，放在URL中。可以使用这个字段用来保存节点的 URL，如果没有指定默认长度 <code>max_length</code>，长度默认为50。</td></tr><tr><td>TextField</td><td>大段文本字段，默认表单组件是 <code>Texterea</code>。</td></tr><tr><td>URLField</td><td>用于输入 URL 的 <code>CharField</code>。</td></tr></tbody></table><h1 id="常用字段属性"><a href="#常用字段属性" class="headerlink" title="常用字段属性"></a>常用<a href="https://docs.djangoproject.com/zh-hans/2.0/ref/models/fields/#field-options" target="_blank" rel="noopener">字段属性</a></h1><p>字段属性用于字段类型中对字段类型加以限制，如 <code>CharField(max_length=127)</code> 限制了字段类型的最大长度为 127。</p><h2 id="常用通用字段属性"><a href="#常用通用字段属性" class="headerlink" title="常用通用字段属性"></a>常用通用字段属性</h2><p>此类字段属性参数是全部字段类型都可以用的，而且是可以选择的。</p><ol><li><p><code>null</code>：默认为 False，如果为True，Django 将在数据库中把空值存储为 <code>null</code>。</p><blockquote><p>基于字符串的字段，如 <code>CharField</code> 和 <code>TextField</code>，不应该使用null，因为空字符串值始终存储为空字符串，而不是 null。</p></blockquote></li><li><p><code>blank</code>：默认为 False，如果为True，则表单验证时允许输入空值，否则为必填项。</p></li><li><p><code>default</code>：字段的默认值，可以是一个值或可调用对象，如果是一个可调用对象，每次这个模型类被创建时，它都会被调用。这个默认值不可以是一个可变对象（如：字典，列表等）。</p></li><li><p><code>editable</code>：默认为 True，如果为 False，字段不在管理后台或其他 <code>ModelForm</code> 中显示，验证模型时<br>也会跳过。</p></li><li><p><code>error_messages</code>：用于覆盖字段抛出异常时的默认消息。值为一个字典，通过键指定想覆盖的错误消息。错误消息键包括 <code>null</code>、<code>blank</code>、<code>invalid</code>、<code>invalid_choice</code>、<code>unique</code> 和 <code>unique_for_date</code>。</p></li><li><p><code>help_text</code>：在表单小组件旁显示的额外帮助文本。即便不在表单中显示，也能用作文档。</p></li><li><p><code>primary_key</code>：设为 True 时，指定字段为模型的主键。如果模型中没有一个字段设定 <code>primary_key=True</code>，Django 会自动添加一个 <code>AutoField</code> 用于存储主键，主键字段是只读的。</p></li><li><p><code>unique</code>：设为 True 时，在表中字段的值必须是唯一的。除了 <code>ManyToManyField</code>、<code>OneToOneField</code> 和 <code>FileField</code> 之外其他字段都可以使用这个设置。</p></li><li><p><code>verbose_name</code>：一个字段的可读性更高的名称，如果未设定，Django 将使用字段的属性名称（下划线转换成空格）自动生成一个。</p></li><li><p><code>validators</code>：用于验证字段的验证器列表。</p></li></ol><h2 id="常用非通用字段属性"><a href="#常用非通用字段属性" class="headerlink" title="常用非通用字段属性"></a>常用非通用字段属性</h2><ol><li><code>max_length</code>：字段的最大长度（字符个数），常用于 <code>CharField</code>、<code>EmailField</code>、<code>TextField</code>、<code>SlugField</code>、<code>URLField</code>。</li><li><code>auto_now</code>：每次保存对象时自动设为当前日期，常用于 <code>DateField</code>、<code>DateTimeField</code>。</li><li><code>auto_now_add</code>：创建对象时自动设为当前日期，常用于 <code>DateField</code>、<code>DateTimeField</code>。</li></ol><h1 id="模型字段关系"><a href="#模型字段关系" class="headerlink" title="模型字段关系"></a>模型字段关系</h1><p>关于模型之间的关系，Django 提供了三个字段类型：<code>ForeignKey</code>（多对一关系）、<code>OneToOneField</code>（一对一关系）、<code>ManyToManyField</code>（多对多关系）。都需要一个位置参数：与该模型关联的类。</p><p>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Category</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>, unique=<span class="keyword">True</span>, verbose_name=<span class="string">'category_name'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    category = models.ForeignKey(Category, on_delete=models.CASCADE, verbose_name=<span class="string">'category'</span>)</span><br></pre></td></tr></table></figure><p>模型类 <code>Node</code> 中就使用了 <code>ForeignKey</code> ，使 <code>Node</code> 指向了 <code>Category</code>。</p><blockquote><ol><li>一个对象与自身有多对一关系，使用 models.ForeignKey(‘self’)。</li><li>与尚未定义的模型建立关系，不能使用模型对象，应该使用模型的名称：<code>models.ForeignKey(&#39;Undefined&#39;)</code></li></ol></blockquote><ol><li>Django 会在该字段名称添加 “_id” 后缀，作为数据库列的名称。<code>Node</code> 模型中 <code>category</code> 的字段名称实际为 <code>category_id</code>。</li><li><p>三个字段类型可以接收一些参数，常用两个参数如下：</p><ul><li><code>related_name</code>：用于获取所关联对象的名称。<strong>当一个模型中有两个及以上属性同时引用另一个模型时，需要使用此参数，否则会出现重名问题。</strong>如果不想让 Django 创建逆向关系，把 <code>related_name</code> 设为 ‘+’，或者以 ‘+’ 结尾。</li><li><p><code>on_delete</code>：外键引用的对象被删除时，设置包含外键的对象是否也被删除，<code>on_delete</code> 可取的值在 <code>django.db.models</code> 中定义:</p><ol><li><code>CASCADE</code>：层叠删除，默认值。</li><li><code>PROTECT</code>：抛出 <code>ProtectedError</code>（<code>django.db.IntegrityError</code> 的子类），禁止删除被引用的对象。</li><li><code>SET_NULL</code>：把外键设为 <code>null</code>，仅当 <code>null</code> 为 True 时才能这么做。</li><li><p><code>SET_DEFAULT</code>：把外键设为默认值，必须为外键设定默认值。</p><pre><code>果关联的表中没有关联的记录，访问反向关系时会抛出 `DoesNotExist` 异常。    </code></pre></li></ol></li></ul></li></ol><h1 id="模型元选项"><a href="#模型元选项" class="headerlink" title="模型元选项"></a><a href="https://docs.djangoproject.com/zh-hans/2.0/ref/models/options/" target="_blank" rel="noopener">模型元选项</a></h1><p>在上面的模型代码中，定义一个内部 Meta 类，用来对当前的模型类或模型字段进行设置约束。</p><p>常用模型元数据选项如下：</p><table><thead><tr><th>模型元数据</th><th>说明</th></tr></thead><tbody><tr><td>abstract</td><td>如果为 True，表示模型类是一个抽象基类。</td></tr><tr><td>app_label</td><td>如果定义模型的应用不在 INSTALLED_APPS 中，必须指定所属的应用。</td></tr><tr><td>db_table</td><td>模型所用的数据表的名称，默认情况下，Django 使用表名后加一个 s 作为数据表的名称。</td></tr><tr><td>ordering</td><td>对象的默认排序，获取对象列表时使用，前面带有可选的 ‘ - ‘ 表示倒叙，没有表示正序，使用 ‘ ? ‘ 表示随机排序。</td></tr><tr><td>permissions</td><td>创建对象时写入权限表的额外权限。</td></tr><tr><td>default_permissions</td><td>默认为（’add’, ‘change’, ‘delete’）。</td></tr><tr><td>unique_together</td><td>设定组合在一起时必须唯一的多个字段名称。 <code>unique_together = (&#39;字段1&#39;, &#39;字段2&#39;)</code> 是一个字段的元组，组合起来的时候代表里面的字段分别都是唯一的。</td></tr><tr><td>verbose_name</td><td>设定对象的单数名称。</td></tr><tr><td>verbose_name_plural</td><td>设定对象的复数名称。</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Django 注册和登陆功能实现</title>
      <link href="/2018/02/05/Django-%E6%B3%A8%E5%86%8C%E5%92%8C%E7%99%BB%E9%99%86%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0.html/"/>
      <url>/2018/02/05/Django-%E6%B3%A8%E5%86%8C%E5%92%8C%E7%99%BB%E9%99%86%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0.html/</url>
      <content type="html"><![CDATA[<p>Django 提供了用户身份验证机制，可实现注册和登录功能。</p><a id="more"></a><h1 id="settings-py-文件设置"><a href="#settings-py-文件设置" class="headerlink" title="settings.py 文件设置"></a>settings.py 文件设置</h1><p>找到 <code>INSTALLED_APPS</code> 列表，确保含有下面两项：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><ol><li><code>django.contrib.auth</code> 用于访问 Django 提供的身份验证系统，</li><li><code>jango.contrib.contenttypes</code> 使 <code>auth</code> 应用跟踪数据库中的模型。</li></ol></blockquote><h1 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h1><p>Django 的 <code>auth</code> 应用并不存储明文密码，而是存储密码哈希值，默认使用 <a href="https://baike.baidu.com/item/PBKDF2" target="_blank" rel="noopener">PBKDF2</a> 算法将密码加密。</p><h1 id="用户模型"><a href="#用户模型" class="headerlink" title="用户模型"></a>用户模型</h1><p>Django 默认有一套用户模型（<a href="https://docs.djangoproject.com/zh-hans/2.0/ref/contrib/auth/#user-model" target="_blank" rel="noopener">django.contrib.auth.models.User</a>），这里就使用此模型构建网站的用户功能。</p><blockquote><p><code>django.contrib.auth.models.User</code> 的默认属性有：<code>username</code>、<code>first_name</code>、<code>last_name</code>、<code>email</code>、<code>password</code>、<code>is_staff</code>、<code>is_active</code>、<code>is_superuser</code>、<code>last_login</code>、<code>date_joined</code> 等。</p></blockquote><p>如果还需要对用户添加其它属性，可在应用的 <code>models.py</code> 文件中新定一个模型，再与 <code>User</code> 模型建立一对一关系（OneToOneField）。</p><p>这里不再添加其它模型。</p><h1 id="用户表单"><a href="#用户表单" class="headerlink" title="用户表单"></a>用户表单</h1><p>定义用户表单用于在 HTML 中相应的模型字段。在应用的 <code>forms.py</code> 文件中定义一个 <code>UserForm</code> 类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserForm</span><span class="params">(forms.ModelForm)</span>:</span></span><br><span class="line">    password = forms.CharField(label=<span class="string">'password'</span>, min_length=<span class="number">8</span>, max_length=<span class="number">30</span>, required=<span class="keyword">True</span>, widget=forms.PasswordInput())</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = User</span><br><span class="line">        fields = (<span class="string">'username'</span>, <span class="string">'email'</span>, <span class="string">'password'</span>)</span><br></pre></td></tr></table></figure><p><code>UserForm</code> 类中重新定义 <code>password</code> 属性，使用 <code>PasswordInput()</code> 组件，使得用户在输入密码时不可见。同时还定义了密码最短 8 位，最长 30 位，且为必填项。</p><p><code>Meta</code> 类中还定义了一些其它属性，包括关联模型为 <code>User</code>，表单中显示（<code>fields</code>）的字段为 <code>username</code>、<code>email</code> 和 <code>password</code>；还可以使用 <code>exclude</code> 指定要在表单排除的字段。</p><h1 id="注册功能"><a href="#注册功能" class="headerlink" title="注册功能"></a>注册功能</h1><h2 id="注册视图"><a href="#注册视图" class="headerlink" title="注册视图"></a>注册视图</h2><p>在应用的 <code>views.py</code> 文件中定义一个 <code>register()</code> 视图来处理表单数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> user.forms <span class="keyword">import</span> UserForm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 注册成功后改为 True</span></span><br><span class="line">    registered = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        user_form = UserForm(data=request.POST)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> user_form.is_valid():</span><br><span class="line">            user = user_form.save()</span><br><span class="line">            user.set_password(user.password)</span><br><span class="line">            user.save()</span><br><span class="line">            </span><br><span class="line">            registered = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 表单数据无效</span></span><br><span class="line">            print(user_form.errors)</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># 不是 POST请求</span></span><br><span class="line">        user_form = UserForm()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'user/register.html'</span>, &#123;<span class="string">'user_form'</span>: user_form, <span class="string">'registered'</span>: registered&#125;)</span><br></pre></td></tr></table></figure><ol><li>局部布尔变量 registered 只有在注册成功后才改为 True，在 Html 模版中会用到。</li><li>如果是 HTTP POST 请求，就处理表单数据：<ol><li>通过 <code>UserForm(data=request.POST)</code> 来获取表单中的所有数据；</li><li>如果表单数据可用，就通过 <code>save()</code> 方法将数据保存到数据库中，通过 <code>set_password</code> 方法计算密码哈希值并保存到数据库中；</li><li>将布尔变量 registered 改为 True。</li><li>如果表单数据无效，在终端中打印错误信息。</li></ol></li><li>如果不是 HTTP POST 请求，渲染空的表单数据。</li><li>最后通过 <code>render</code> 渲染模版，将表单数据和布尔变量以字典形式传入 <code>render</code>。</li></ol><h2 id="注册页面的-HTML-模版"><a href="#注册页面的-HTML-模版" class="headerlink" title="注册页面的 HTML 模版"></a>注册页面的 HTML 模版</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"ui header"</span>&gt;</span></span><br><span class="line">        Register</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    &#123;% if registered %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Thank you for registering!<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'QA:index' %&#125;"</span>&gt;</span>Return to home...<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"ui form segment"</span> <span class="attr">id</span>=<span class="string">"user_form"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"&#123;% url 'user:register' %&#125;"</span>&gt;</span></span><br><span class="line">            &#123;% csrf_token %&#125;</span><br><span class="line">            &#123;&#123; user_form.as_p &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"ui button"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>通过布尔变量 registered 判断注册是否成功，以此使界面显示不同内容；</li><li>Django 要求表单中必须有 CSRF（跨站请求伪造）令牌（<code>{% csrf_token %}</code>），用于增强提交表单后发送 HTTP POST 请求的安全性。</li><li><code>as_p</code> 模板函数使得段落（HTML &lt;p> 标签）中显示各个表单元素，一行显示一个表单元素。</li></ol><blockquote><p>最后要添加 URL 映射，并且在 HTML 模版中添加注册链接。</p></blockquote><h1 id="登录功能"><a href="#登录功能" class="headerlink" title="登录功能"></a>登录功能</h1><h2 id="登录视图"><a href="#登录视图" class="headerlink" title="登录视图"></a>登录视图</h2><p>在应用的 <code>views.py</code> 文件中定义一个 <code>user_login()</code> 视图来处理表单数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> authenticate, login</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect, HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">'password'</span>)</span><br><span class="line"></span><br><span class="line">        user = authenticate(username=username, password=password)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> user:</span><br><span class="line">            <span class="keyword">if</span> user.is_active:</span><br><span class="line">                login(request, user)</span><br><span class="line">                <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'index'</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> HttpResponse(<span class="string">'您的账户不可用！'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"非法登陆：&#123;0&#125;, &#123;1&#125;"</span>.format(username, password))</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">"用户名或密码无效！"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'user/login.html'</span>, &#123;&#125;)</span><br></pre></td></tr></table></figure><ol><li>如果是 HTTP POST 请求，提取表单信息：<ol><li>使用 <code>get()</code> 方法提取 username、password 值，当对应值不存在时，返回 None；</li><li>使用 <code>authenticate()</code> 函数检查用户名和密码是否匹配数据库中已存在的某个用户账户。如果匹配成功，就返回一个 User 对象，否则返回 None；</li><li>如果匹配成功，查看用户账户是否是激活状态（由 <code>User</code> 模型的 <code>is_active</code> 决定）；如果账户为激活状态，使用 Django 提供 <code>login()</code> 函数登录用户，然后使用 <code>HttpResponseRedirect</code> 类重定向回首页，其中 <code>reverse()</code> 含函数获取应用首页的 URL；如果账户不是激活状态，使用 <code>HttpResponse</code> 类传递错误信息给用户。</li><li>如何匹配不成功，在终端打印错误信息并传递错误信息给用户。</li></ol></li><li>如果不是 HTTP POST 请求，重新渲染登录模版。</li></ol><h2 id="登陆页面的-HTML-模版"><a href="#登陆页面的-HTML-模版" class="headerlink" title="登陆页面的 HTML 模版"></a>登陆页面的 HTML 模版</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"ui header"</span>&gt;</span></span><br><span class="line">        Login</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"ui form segment"</span> <span class="attr">id</span>=<span class="string">"login_form"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"&#123;% url 'user:login' %&#125;"</span>&gt;</span></span><br><span class="line">        &#123;% csrf_token %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"field"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">size</span>=<span class="string">"50"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"field"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">size</span>=<span class="string">"50"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"ui button"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>最后要添加 URL 映射，并且在 HTML 模版中添加登陆链接。</p></blockquote><h1 id="注销功能"><a href="#注销功能" class="headerlink" title="注销功能"></a>注销功能</h1><p>使用 Django 提供的 <code>logout()</code> 函数实现用户注销功能。</p><p>在应用的 <code>views.py</code> 文件中定义一个 <code>user_logout()</code> 视图来处理注销功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> logout</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.decorators <span class="keyword">import</span> login_required</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_logout</span><span class="params">(request)</span>:</span></span><br><span class="line">    logout(request)</span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'index'</span>))</span><br></pre></td></tr></table></figure><p>注销功能只有已登陆的用户才能使用，使用 <code>login_required()</code> 装饰器函数加以限制。</p><blockquote><p>最后要添加 URL 映射，并且在 HTML 模版中添加注销链接。</p></blockquote><h1 id="限制访问不同内容"><a href="#限制访问不同内容" class="headerlink" title="限制访问不同内容"></a>限制访问不同内容</h1><p>登陆/注册和注销链接根据当前是否有用户已登陆会有不同的显示，可以在 HTML 模版中 使用 <code>{% if user.authenticated %}</code> 模版标签来判断是否存在已登陆用户。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if user.is_authenticated %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'user:logout' %&#125;"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'user:login' %&#125;"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>登陆<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'user:register' %&#125;"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Django 配置 Mysql 数据库</title>
      <link href="/2018/01/26/Django-%E9%85%8D%E7%BD%AE-Mysql-%E6%95%B0%E6%8D%AE%E5%BA%93.html/"/>
      <url>/2018/01/26/Django-%E9%85%8D%E7%BD%AE-Mysql-%E6%95%B0%E6%8D%AE%E5%BA%93.html/</url>
      <content type="html"><![CDATA[<p>Django 内置 SQLite 作为默认数据库，可以更改为其它数据库，如：postgresql、mysql、oracle。这里使用 mysql。</p><a id="more"></a><p>在 <code>setting.py</code> 文件的 <code>DATABASES</code> 中进行配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'testdjango'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">''</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要配置 <code>NAME</code>、<code>USER</code>、<code>PASSWORD</code>、<code>HOST</code>。</p><blockquote><p>使用 Mysql 数据库之前需要确保已经创建好了一个数据库（这里为 <code>testdjango</code>）</p></blockquote><p>接下来在 Terminal 中执行：</p><ol><li><p>检查模型新的改变，创建迁移策略文件（首次创建数据库不需要）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py makemigrations</span><br></pre></td></tr></table></figure></li><li><p>执行数据库创建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py migrate       </span><br><span class="line">Operations to perform:</span><br><span class="line">  Apply all migrations: admin, auth, contenttypes, sessions</span><br><span class="line">Running migrations:</span><br><span class="line">  Applying contenttypes.0001_initial... OK</span><br><span class="line">  Applying auth.0001_initial... OK</span><br><span class="line">  Applying admin.0001_initial... OK</span><br><span class="line">  Applying admin.0002_logentry_remove_auto_add... OK</span><br><span class="line">  Applying contenttypes.0002_remove_content_type_name... OK</span><br><span class="line">  Applying auth.0002_alter_permission_name_max_length... OK</span><br><span class="line">  Applying auth.0003_alter_user_email_max_length... OK</span><br><span class="line">  Applying auth.0004_alter_user_username_opts... OK</span><br><span class="line">  Applying auth.0005_alter_user_last_login_null... OK</span><br><span class="line">  Applying auth.0006_require_contenttypes_0002... OK</span><br><span class="line">  Applying auth.0007_alter_validators_add_error_messages... OK</span><br><span class="line">  Applying auth.0008_alter_user_username_max_length... OK</span><br><span class="line">  Applying auth.0009_alter_user_last_name_max_length... OK</span><br><span class="line">  Applying sessions.0001_initial... OK</span><br></pre></td></tr></table></figure></li></ol><p>执行完后数据库中会生成一些新的数据库内容：</p><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/Django-配置-Mysql-数据库/Django-Mysql.png">]]></content>
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用 reuqests 爬取豆瓣数据书籍 URL</title>
      <link href="/2017/11/20/%E4%BD%BF%E7%94%A8-reuqests-%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E6%95%B0%E6%8D%AE%E4%B9%A6%E7%B1%8D-URL.html/"/>
      <url>/2017/11/20/%E4%BD%BF%E7%94%A8-reuqests-%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E6%95%B0%E6%8D%AE%E4%B9%A6%E7%B1%8D-URL.html/</url>
      <content type="html"><![CDATA[<p>使用 requests 库爬取豆瓣读书中所有书籍的 URL，并将其存储到 Mysql 中。<br><a id="more"></a></p><h1 id="安装第三方库"><a href="#安装第三方库" class="headerlink" title="安装第三方库"></a>安装第三方库</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install lxml</span><br><span class="line">pip install DBUtils</span><br><span class="line">pip install mysqlclient</span><br><span class="line">pip install requests</span><br><span class="line">pip install BeautifulSoup4</span><br></pre></td></tr></table></figure><p><code>DBUtils</code> 库用于构建 Mysql 连接池。</p><h1 id="构建-Mysql-连接池"><a href="#构建-Mysql-连接池" class="headerlink" title="构建 Mysql 连接池"></a>构建 Mysql 连接池</h1><p>在爬取数据的过程中需要实时将数据保存到数据库中，如果频繁的新建连接再关闭容易产生性能问题，造成堵塞。可通过构建连接池来解决，这里借助于 DBUtils。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"><span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MysqlPool</span>:</span></span><br><span class="line">    <span class="string">"""Mysql 连接池类"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.pool = PooledDB(MySQLdb,</span><br><span class="line">                                 <span class="number">5</span>,</span><br><span class="line">                                 host=<span class="string">'host'</span>,</span><br><span class="line">                                 user=<span class="string">'user'</span>,</span><br><span class="line">                                 passwd=<span class="string">'password'</span>,</span><br><span class="line">                                 db=<span class="string">'db'</span>,</span><br><span class="line">                                 port=<span class="number">3306</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            print(<span class="string">"连接池创建错误！"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_add_conn</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        在连接池中添加一个连接</span></span><br><span class="line"><span class="string">        :return: 游标、连接</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        conn = self.pool.connection()</span><br><span class="line">        <span class="keyword">return</span> conn.cursor(), conn</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_close_conn</span><span class="params">(cur, conn)</span>:</span></span><br><span class="line">        <span class="string">"""关闭游标和连接"""</span></span><br><span class="line">        cur.close()</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_insert_data</span><span class="params">(sql, cur, conn)</span>:</span></span><br><span class="line">        <span class="string">"""向数据库中插入数据"""</span></span><br><span class="line">        cur.execute(sql)</span><br><span class="line">        conn.commit()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">once_insert</span><span class="params">(self, sql)</span>:</span></span><br><span class="line">        <span class="string">"""向连接池发起一次连接"""</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cur, conn = self._add_conn()</span><br><span class="line">            self._insert_data(sql, cur, conn)</span><br><span class="line">            self._close_conn(cur, conn)</span><br><span class="line">        <span class="keyword">except</span> MySQLdb.Error <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">'Error: &#123;&#125;'</span>.format(e))</span><br></pre></td></tr></table></figure><p>这里创建了一个连接池类，当定义一个连接池实例时，便创建了一个最少连接数为5的连接池，每次需要向数据库发起连接时，只需要调用 once_insert() 函数即可。</p><h1 id="爬取书籍-URL"><a href="#爬取书籍-URL" class="headerlink" title="爬取书籍 URL"></a>爬取书籍 URL</h1><h2 id="爬取书籍标签-URL"><a href="#爬取书籍标签-URL" class="headerlink" title="爬取书籍标签 URL"></a>爬取书籍标签 URL</h2><p>豆瓣读书有个图书标签页，该页面包含了所有标签，每个标签下包含了所属标签的书籍列表，所有我们可以先爬取标签 URL，再通过这些 URL 爬取所有书籍。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标签页 url</span></span><br><span class="line">CAT_LABEL_URL = <span class="string">'https://book.douban.com/tag/?view=cloud'</span></span><br><span class="line"></span><br><span class="line">User_Agent = [<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36"</span>,</span><br><span class="line">              <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36"</span>,</span><br><span class="line">              <span class="string">"Mozilla/5.0 (Linux; Android 5.1.1; Nexus 5 Build/LMY48B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.78 Mobile Safari/537.36"</span>,</span><br><span class="line">              <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) AppleWebKit/604.5.6 (KHTML, like Gecko) Version/11.0.3 Safari/604.5.6"</span>,</span><br><span class="line">              ]</span><br><span class="line">              </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_tags_urls</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="string">"""获取所有标签 url"""</span></span><br><span class="line">    <span class="comment"># 请求头</span></span><br><span class="line">    headers = &#123;<span class="string">'user-agent'</span>: random.choice(User_Agent)&#125;</span><br><span class="line"></span><br><span class="line">    response = requests.get(url, headers=headers)</span><br><span class="line">    soup = BeautifulSoup(response.text, <span class="string">'lxml'</span>)</span><br><span class="line"></span><br><span class="line">    tags = soup.find(<span class="string">"table"</span>, &#123;<span class="string">"class"</span>: <span class="string">"tagCol"</span>&#125;)</span><br><span class="line">    tags = tags.find_all(<span class="string">'a'</span>)</span><br><span class="line">    tags_urls = []</span><br><span class="line">    <span class="keyword">for</span> tag <span class="keyword">in</span> tags:</span><br><span class="line">        tag_url = tag.attrs[<span class="string">"href"</span>]</span><br><span class="line">        tags_urls.append(<span class="string">'https://book.douban.com'</span> + tag_url)</span><br><span class="line">    <span class="keyword">return</span> tags_urls</span><br></pre></td></tr></table></figure><h2 id="爬取所有书籍-URL"><a href="#爬取所有书籍-URL" class="headerlink" title="爬取所有书籍 URL"></a>爬取所有书籍 URL</h2><p>有了这些标签 URL，就可以通过遍历这些标签 URL 爬取该标签所有书籍。</p><p>通过观察标签下书籍列表的 URL，发现所有 URL 都形如 <code>https://book.douban.com/tag/标签名?start=page&amp;type=T</code>。每页显示书籍为 20，所以只需 page 从零开始，每次增加 20，就可以得到所有书籍列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .common_func <span class="keyword">import</span> get_md5</span><br><span class="line"><span class="keyword">from</span> requests_urls.mysql_conn <span class="keyword">import</span> MysqlPool</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立一个连接池</span></span><br><span class="line">db_pool = MysqlPool()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_books_urls</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="string">"""获取所有书籍 url"""</span></span><br><span class="line">    page = <span class="number">0</span></span><br><span class="line">    url += <span class="string">'?start=&#123;&#125;&amp;type=T'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="comment"># 延时</span></span><br><span class="line">        time.sleep(random.random() * <span class="number">5</span> + <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 请求头</span></span><br><span class="line">        headers = &#123;<span class="string">'user-agent'</span>: random.choice(User_Agent)&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(url.format(page), headers=headers)</span><br><span class="line">            soup = BeautifulSoup(response.text, <span class="string">'lxml'</span>)</span><br><span class="line">            books = soup.find_all(<span class="string">"li"</span>, &#123;<span class="string">"class"</span>: <span class="string">"subject-item"</span>&#125;)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 当前标签下书籍 url 已爬取完</span></span><br><span class="line">            <span class="keyword">if</span> len(books) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> book <span class="keyword">in</span> books:</span><br><span class="line">                book_url = book.find(<span class="string">"div"</span>, &#123;<span class="string">"class"</span>: <span class="string">"info"</span>&#125;)</span><br><span class="line">                book_url = book_url.find(<span class="string">'a'</span>, &#123;<span class="string">"href"</span>: re.compile(<span class="string">r"https://book.douban.com/subject/\d+/"</span>)&#125;)</span><br><span class="line">                book_url = book_url.attrs[<span class="string">"href"</span>]</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 将书籍 url 用 md5 加密</span></span><br><span class="line">                book_url_md5 = get_md5(book_url)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 通过连接池将数据插入到 mysql 中</span></span><br><span class="line">                sql = <span class="string">"INSERT IGNORE INTO books_urls(id, url) VALUE('&#123;&#125;', '&#123;&#125;');"</span>.format(book_url_md5, book_url)</span><br><span class="line">                db_pool.once_insert(sql)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">"爬取失败"</span>)</span><br><span class="line">        page += <span class="number">20</span></span><br></pre></td></tr></table></figure><p>其中：</p><ol><li><code>time.sleep()</code> 和 随机选取一个 <code>user-agent</code> 都是防止反爬虫的策略。</li><li><p>由于一本书可能有多个标签，在遍历不同标签时，爬取的书籍可能可能重复，就需要去重。在这里，我将每个 URL 都通过 md5 加密并存储到 Mysql，并在 Mysql 中将此列设为具有唯一键的一列。当向数据库保存数据时，使用 <code>INSERT IGNORE</code> 的 sql 语法，即不存在时存入，存在时忽略。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_md5</span><span class="params">(url)</span>:</span></span><br><span class="line"><span class="string">"""md5 加密"""</span></span><br><span class="line">   <span class="keyword">if</span> isinstance(url, str):</span><br><span class="line">       url = url.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">   md = hashlib.md5()</span><br><span class="line">   md.update(url)</span><br><span class="line">   <span class="keyword">return</span> md.hexdigest()</span><br></pre></td></tr></table></figure></li></ol><h1 id="部署爬虫及爬取结果"><a href="#部署爬虫及爬取结果" class="headerlink" title="部署爬虫及爬取结果"></a>部署爬虫及爬取结果</h1><ol><li>爬取过程需要一定时间，因此将其部署在云服务器上。使用命令 <code>nohup python -u main.py &gt; log.out &amp;</code> 使其在后台静静地开始爬虫。</li><li>查看数据库的爬取结果：<img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/使用-reuqests-爬取豆瓣数据书籍-URL/doubanbooksurls.png"></li></ol><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p><a href="https://github.com/tyrotalk/crawler_projects/tree/master/doubanbook" target="_blank" rel="noopener">Github</a></p>]]></content>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> requests </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mongdb 简介及 Python 连接</title>
      <link href="/2017/11/04/Mongdb-%E7%AE%80%E4%BB%8B%E5%8F%8A-Python-%E8%BF%9E%E6%8E%A5.html/"/>
      <url>/2017/11/04/Mongdb-%E7%AE%80%E4%BB%8B%E5%8F%8A-Python-%E8%BF%9E%E6%8E%A5.html/</url>
      <content type="html"><![CDATA[<p>MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。</p><a id="more"></a><h1 id="Centos-下安装与启动"><a href="#Centos-下安装与启动" class="headerlink" title="Centos 下安装与启动"></a>Centos 下安装与启动</h1><p><a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-amazon/" target="_blank" rel="noopener">官方文档</a></p><ol><li><p>配置包管理：<code>$ sudo vim /etc/yum.repos.d/mongodb-org-3.6.repo</code>，添加以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mongodb-org-3.6]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https://repo.mongodb.org/yum/amazon/2013.03/mongodb-org/3.6/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-3.6.asc</span><br></pre></td></tr></table></figure></li><li><p>安装 Mongodb 包：<code>$ sudo yum install -y mongodb-org</code></p><blockquote><p>如果要安装指定版本： <code>$ sudo yum install -y mongodb-org-3.6.3 mongodb-org-server-3.6.3 mongodb-org-shell-3.6.3 mongodb-org-mongos-3.6.3 mongodb-org-tools-3.6.3</code></p></blockquote></li><li><p>在 /etc/yum.conf 中加入下面的配置防止意外升级： <code>exclude=mongodb-org,mongodb-org-server,mongodb-org-shell,mongodb-org-mongos,mongodb-org-tools</code>。</p><blockquote><p>mongodb 默认将数据文件防止 /var/lib/mongo 中，日志文件存放在 /var/log/mongodb 中。</p><p>可以修改配置文件 /etc/mongod.conf 更改配置信息。 </p></blockquote></li><li><p>Start MongoDB： <code>$ sudo service mongod start</code>。</p><blockquote><ul><li>在 /var/log/mongodb/mongod.log 中出现 [initandlisten] waiting for connections on port \<port> 表示启动成功。</port></li><li>端口号在/etc/mongod.conf中配置，默认为27017。</li></ul></blockquote></li><li><p>配置开机启动：<code>$ sudo chkconfig mongod on</code></p></li><li>Stop MongoDB： <code>$ sudo service mongod stop</code></li><li>Restart MongoDB： <code>$ sudo service mongod restart</code></li></ol><h1 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h1><ol><li><p>开启用户认证：修改配置文件 /etc/mongod.conf，将 auth 设置为 true。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">security:</span><br><span class="line">  authorization: enabled</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>重启：<code>$ sudo service mongod restart</code></p></li><li><p>添加管理员：进入 mongodb 命令行，选择 admin 数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; use admin</span><br><span class="line">&gt; db.createUser(&#123;user:&apos;root&apos;, pwd:&apos;password&apos;, roles: [ &#123; role: &quot;root&quot;, db: &quot;admin&quot; &#125; ]&#125;)</span><br><span class="line">&gt; show users</span><br><span class="line">&#123;</span><br><span class="line">&quot;_id&quot; : &quot;admin.root&quot;,</span><br><span class="line">&quot;user&quot; : &quot;root&quot;,</span><br><span class="line">&quot;db&quot; : &quot;admin&quot;,</span><br><span class="line">&quot;roles&quot; : [</span><br><span class="line">&#123;</span><br><span class="line">&quot;role&quot; : &quot;root&quot;,</span><br><span class="line">&quot;db&quot; : &quot;admin&quot;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>role:root 表示最高权限，只在 admin 数据库中可用；</li><li>第一个用户添加完成后，便需要认证才能继续添加其他用户。</li></ul></blockquote></li><li><p>用户认证：用户认证右两种方式</p><ol><li><p>在客户端连接时就认证：<code>$ mongo --port 27017 -u &quot;root&quot; -p &quot;password&quot; --authenticationDatabase &quot;admin&quot;</code>；</p></li><li><p>客户端连接后再认证：<code>$ mongo --port 27017</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.auth(&quot;root&quot;, &quot;password&quot;)</span><br></pre></td></tr></table></figure><blockquote><p>输出 1 表示验证成功</p></blockquote></li></ol></li><li><p>添加普通用户：与创建管理员用户的过程类似</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; use a_db</span><br><span class="line">&gt; db.createUser(</span><br><span class="line">&#123;</span><br><span class="line">    user: &quot;username&quot;,</span><br><span class="line">    pwd: &quot;password&quot;,</span><br><span class="line">    roles: [ &#123; role: &quot;readWrite&quot;, db: &quot;a_db&quot; &#125;,</span><br><span class="line">             &#123; role: &quot;read&quot;, db: &quot;another_db&quot; &#125; ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>用户在 a_db 数据库中创建，需要在 a_db 数据库验证用户身份。</p></blockquote></li></ol><h1 id="限制-ip-访问"><a href="#限制-ip-访问" class="headerlink" title="限制 ip 访问"></a>限制 ip 访问</h1><p>MongoDB 可以限制只允许某一特定IP来访问，修改配置文件 /etc/mongod.conf 中的 bind_ip。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: 127.0.0.1,[内网 ip]</span><br></pre></td></tr></table></figure><blockquote><p>在 Mongodb 服务器端添加了内网 ip，就可以通过外网 ip 访问。</p></blockquote><h1 id="命令行操作数据库"><a href="#命令行操作数据库" class="headerlink" title="命令行操作数据库"></a>命令行操作数据库</h1><p><a href="https://docs.mongodb.com/manual/reference/method/js-collection/" target="_blank" rel="noopener">官方文档</a></p><p>首先选择一个数据库，如：<code>use students</code>。</p><h2 id="新增数据"><a href="#新增数据" class="headerlink" title="新增数据"></a>新增数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; stu = &#123;</span><br><span class="line">... name:&quot;Jhon&quot;,</span><br><span class="line">... age:20&#125;</span><br><span class="line">&#123; &quot;name&quot; : &quot;Jhon&quot;, &quot;age&quot; : 20 &#125;</span><br><span class="line">&gt; db.students.insert(stu)</span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br></pre></td></tr></table></figure><ol><li><p>mongdb 会自动在数据库中添加一个 <code>ObjectId</code> 类型的 <code>_id</code> 值，所以时间新增的数据为 <code>{&quot;_id&quot; : ObjectId(&quot;5063114bd386d8fadbd6b004&quot;), { &quot;name&quot; : &quot;Jhon&quot;, &quot;age&quot; : 20 }</code>。</p><blockquote><p>可以自己设定 <code>_id</code> 的值，如 <code>{&quot;_id&quot; : 1, { &quot;name&quot; : &quot;Jhon&quot;, &quot;age&quot; : 20 }</code>。</p></blockquote></li><li><p>插入多条需要将组数据以列表形式插入。</p></li><li><p>插入一条还可以用：<code>insertOne()</code>，插入多条还可以用：<code>insertMany()</code>。</p></li></ol><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><p>查询一条数据：<code>db.students.findOne()</code> 查询全部：<code>db.students.find()</code></p><p>find() 可传两个参数：</p><ol><li><p>第一个为查询的条件</p><p>如：<code>db.students.find({grade:{&#39;$gte&#39;:60}})</code> 表示查询条件 grade &gt;= 60，<code>lte</code> 表示小于等于。<code>db.students.find({&#39;$or&#39;: [{sex: &#39;male&#39;}, {sex: &#39;female&#39;}]})</code> 表示或条件。</p></li><li><p>第二个为指定显示内容「如：<code>db.students.find({sex:&quot;male&quot;}, {name:1, age:true, _id:0})</code>；1=true，0=false；_id 默认会显示，设定 0 或 false 使其不显示」</p></li></ol><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; obj = db.students.findOne()</span><br><span class="line">&#123;</span><br><span class="line">    &quot;_id&quot; : ObjectId(&quot;5a2d1adb4d5b15d565002063&quot;),</span><br><span class="line">    &quot;name&quot; : &quot;Jhon&quot;,</span><br><span class="line">    &quot;age&quot; : 20</span><br><span class="line">&#125;</span><br><span class="line">&gt; obj.name = &quot;Amy&quot;</span><br><span class="line">Amy</span><br><span class="line">&gt; db.students.update(&#123;name:&quot;Jhon&quot;&#125;, obj)</span><br><span class="line">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>update 中是替换。 </p></blockquote><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><ol><li><p>删除一条：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.students.remove(&#123;name:&quot;Amy&quot;&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nRemoved&quot; : 1 &#125;)</span><br></pre></td></tr></table></figure></li><li><p>删除全部：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.students.remove()</span><br></pre></td></tr></table></figure></li></ol><h1 id="Python-操作-MongoDB"><a href="#Python-操作-MongoDB" class="headerlink" title="Python 操作 MongoDB"></a>Python 操作 MongoDB</h1><ol><li><p>Pymongo 安装：<code>pip install pymongo</code>。</p><blockquote><p>官方文档：<a href="http://api.mongodb.com/python/current/" target="_blank" rel="noopener">文档</a>、<a href="https://pypi.python.org/pypi/pymongo" target="_blank" rel="noopener">pypi</a>、<a href="https://github.com/mongodb/mongo-python-driver/" target="_blank" rel="noopener">github</a></p></blockquote></li><li><p>连接数据库</p><ol><li>方式一：简写： <code>client=MongoClient()</code></li><li>方式二：指定端口和地址： <code>client=MongoClient(&#39;localhost&#39;,27017）</code></li><li>方式三：使用 URI： <code>client=MongoClient(&#39;mongodb://localhost:27017/&#39;)</code></li></ol><blockquote><p>使用一个类来说明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">ConnMongodb</span>:</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">&gt;     self.client = MongoClient()</span><br><span class="line">&gt;     self.db = self.client[<span class="string">'students'</span>]</span><br><span class="line">&gt;         self.db.authenticate(&lt;user&gt;, &lt;password&gt;)  <span class="comment"># 以普通用户登陆</span></span><br><span class="line">&gt;         self.post = db[&lt;col_name&gt;]  <span class="comment"># 集合</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>新增数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_one</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""新增一条数据"""</span></span><br><span class="line">    post = &#123;</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'TT'</span>,</span><br><span class="line">        <span class="string">'age'</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="string">'sex'</span>: <span class="string">'male'</span>,</span><br><span class="line">        <span class="string">'create_time'</span>: datetime.now()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> self.post.insert_one(post)</span><br></pre></td></tr></table></figure></li><li><p>查询数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bson.objectid <span class="keyword">import</span> ObjectId</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""查询一条数据"""</span></span><br><span class="line">    <span class="keyword">return</span> self.post.find_one()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_more</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""查询多条数据"""</span></span><br><span class="line">    <span class="keyword">return</span> self.post.find(&#123;<span class="string">'age'</span>: <span class="number">18</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one_from_oid</span><span class="params">(self, oid)</span>:</span></span><br><span class="line">    <span class="string">"""查询指定ID的数据"""</span></span><br><span class="line">    obj = ObjectId(oid)</span><br><span class="line">    <span class="keyword">return</span> self.post.find_one(&#123;<span class="string">'_id'</span>: obj&#125;)</span><br></pre></td></tr></table></figure></li><li><p>修改数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""修改数据"""</span></span><br><span class="line">    <span class="comment"># 修改一条数据</span></span><br><span class="line">    <span class="comment"># return self.post.update_one(&#123;'age': 18&#125;, &#123;'$inc': &#123;'age': 1&#125;&#125;)</span></span><br><span class="line">    <span class="comment"># 修改多条数据</span></span><br><span class="line">    <span class="keyword">return</span> self.post.update_many(&#123;&#125;, &#123;<span class="string">'$inc'</span>: &#123;<span class="string">'age'</span>: <span class="number">1</span>&#125;&#125;)</span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""删除数据"""</span></span><br><span class="line">    <span class="comment"># 删除一条数据</span></span><br><span class="line">    <span class="comment"># return self.post.delete_one(&#123;'name': 'TT'&#125;)</span></span><br><span class="line">    <span class="comment"># 删除多条数据</span></span><br><span class="line">    <span class="keyword">return</span> self.post.delete_many(&#123;<span class="string">'name'</span>: <span class="string">'TT'</span>&#125;)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Mongodb </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL 简介及 Python 连接数据库</title>
      <link href="/2017/10/20/MySQL-%E7%AE%80%E4%BB%8B%E5%8F%8A-Python-%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93.html/"/>
      <url>/2017/10/20/MySQL-%E7%AE%80%E4%BB%8B%E5%8F%8A-Python-%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93.html/</url>
      <content type="html"><![CDATA[<p>MySQL 是一种 DBMS，即它是一种数据库软件。<br><a id="more"></a></p><h1 id="Centos-安装-Mysql"><a href="#Centos-安装-Mysql" class="headerlink" title="Centos 安装 Mysql"></a>Centos 安装 Mysql</h1><ol><li><p>下载 Mysql 源安装包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -LO http://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</span><br></pre></td></tr></table></figure></li><li><p>安装 Mysql 源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum localinstall mysql57-community-release-el7-11.noarch.rpm</span><br></pre></td></tr></table></figure></li><li><p>检查 yum 源是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum repolist enabled | grep &quot;mysql.*-community.*&quot;</span><br><span class="line">mysql-connectors-community           MySQL Connectors Community              21</span><br><span class="line">mysql-tools-community                MySQL Tools Community                   38</span><br><span class="line">mysql57-community                    MySQL 5.7 Community Server             130</span><br></pre></td></tr></table></figure><p>此时可以看到源已经安装好了。</p></li><li><p>安装 Mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install mysql-community-server</span><br></pre></td></tr></table></figure></li><li><p>查看默认密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat /var/log/mysqld.log | grep &quot;password&quot;</span><br></pre></td></tr></table></figure></li><li><p>登录 Mysql 并修改默认密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u root -p</span><br><span class="line">Enter password: </span><br><span class="line">mysql&gt; ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;new_password&apos;;</span><br></pre></td></tr></table></figure></li></ol><h1 id="Python-使用-MySQLdb-连接数据库"><a href="#Python-使用-MySQLdb-连接数据库" class="headerlink" title="Python 使用 MySQLdb 连接数据库"></a>Python 使用 MySQLdb 连接数据库</h1><p>库安装：<code>pip install mysqlclient</code></p><p>程序实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备SQL</span></span><br><span class="line">sql = <span class="string">'SELECT * FROM `news` ORDER BY `created_at` DESC;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取连接</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    conn = MySQLdb.connect(</span><br><span class="line">        host=<span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="comment"># host='localhost'</span></span><br><span class="line">        user=<span class="string">'root'</span>,</span><br><span class="line">        passwd=<span class="string">'960645'</span>,</span><br><span class="line">        db=<span class="string">'dbname'</span>,</span><br><span class="line">        port=<span class="number">3306</span>,</span><br><span class="line">        charset=<span class="string">'utf8'</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 找到cursor</span></span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    <span class="comment"># 准备SQL</span></span><br><span class="line">    sql = <span class="string">''</span></span><br><span class="line">    <span class="comment"># 执行SQL</span></span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    <span class="comment"># 拿到结果</span></span><br><span class="line">    rest = cursor.fetchone()</span><br><span class="line">    <span class="comment"># 处理结果</span></span><br><span class="line">    print(rest)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    cursor.close()</span><br><span class="line"><span class="keyword">except</span> MySQLdb.Error <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'Error: %s'</span> % e)</span><br></pre></td></tr></table></figure><blockquote><ol><li>连接本地数据库时，<code>host</code> 可以是 <code>127.0.0.1</code> 或 <code>localhost</code>；</li><li>插入/更新数据库时，在 <code>execute(sql)</code> 后需要提交事务：<code>conn.commit()</code>；</li><li>最后一定要关闭连接。</li></ol></blockquote>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 数据结构：二叉搜索树</title>
      <link href="/2017/10/02/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%91.html/"/>
      <url>/2017/10/02/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%91.html/</url>
      <content type="html"><![CDATA[<p>树是一种抽象数据类型，用来模拟具有树状结构性质的数据集合。</p><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/Python-数据结构：树/tree.png"><a id="more"></a><p>树有两个主要的特征：</p><ol><li>每个项都有许多子节点，</li><li>除了根节点，其它项都有一个父节点。</li></ol><h1 id="树的深度和高度"><a href="#树的深度和高度" class="headerlink" title="树的深度和高度"></a>树的深度和高度</h1><p>树的深度又称为层级，一个节点的深度或层级等于将其连接到根节点的路径的长度。所以，根节点的深度和层级为0，根节点的子节点的层级为1。</p><blockquote><p>一个空树的深度或层级为 -1。</p></blockquote><p>树的高度表示树中最长路径的长度，即叶子节点的最大层级数。</p><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p>普通的树中节点的子结点可以有很多个，而二叉树中节点的子结点最多有两个，其每一个子树都是一个二叉树。上面图中的树就是一个二叉树。</p><h2 id="二叉树分类"><a href="#二叉树分类" class="headerlink" title="二叉树分类"></a>二叉树分类</h2><ol><li><p>不平衡二叉树：存在子结点只有一个的节点的树。</p><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/Python-数据结构：树/not_balance_binary_tree.png"></li><li><p>完美平衡二叉树：最后一层的叶子节点都靠右对齐；</p><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/Python-数据结构：树/complete_balance_binary_tree.png"></li><li><p>完全二叉树：最后一层的叶子节点都靠左对齐；</p><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/Python-数据结构：树/complete_binary_tree.png"></li><li><p>满二叉树：除最后一层无任何子节点外，每一层上的所有结点都有两个子结点二叉树。</p><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/Python-数据结构：树/full_binary_tree.png"></li></ol><h2 id="二叉树两种应用"><a href="#二叉树两种应用" class="headerlink" title="二叉树两种应用"></a>二叉树两种应用</h2><ol><li>二叉搜索树</li><li><a href="/2017/07/17/算法：堆排序.html/" title="堆">堆</a></li></ol><h1 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h1><p>二叉搜索树是一棵二叉树，其中每个节点的值都大于其左子树中任意节点的值、小于其右子树中任意节点的值。</p><h2 id="二叉搜索树的主要方法"><a href="#二叉搜索树的主要方法" class="headerlink" title="二叉搜索树的主要方法"></a>二叉搜索树的主要方法</h2><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>__len__(s)</td><td>返回二叉搜索树中节点的数目</td></tr><tr><td>__str__(s)</td><td>返回二叉搜索树的字符串表示</td></tr><tr><td>__iter__()</td><td>迭代二叉搜索树的每一个节点</td></tr><tr><td>__add__(s)</td><td>将两个二叉搜索树合并</td></tr><tr><td>__eq__(s)</td><td>如果两个二叉搜索树的所有节点对应相等，两个树相等</td></tr><tr><td>is_empty()</td><td>二叉搜索树为空返回 False，否则返回 True</td></tr><tr><td>clear()</td><td>将二叉搜索树清空</td></tr><tr><td>搜索</td><td>搜索目标项在二叉搜索树中是否存在</td></tr><tr><td>遍历</td><td>遍历二叉搜索树搜索节点</td></tr><tr><td>插入</td><td>在二叉搜索树适当位置插入目标项</td></tr><tr><td>获取最大项和最小项</td><td>获取二叉搜索树的最大项和最小项</td></tr><tr><td>删除</td><td>删除二叉搜索树中的某一个节点</td></tr></tbody></table><h2 id="树节点和二叉搜索树初始化"><a href="#树节点和二叉搜索树初始化" class="headerlink" title="树节点和二叉搜索树初始化"></a>树节点和二叉搜索树初始化</h2><p>一个树节点包含自身的值和左右子树的链接。二叉搜索树类中只要定义一个指向搜索树根节点的链接就可以包含整棵树。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BST</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data, left=None, right=None)</span>:</span></span><br><span class="line">            self.data = data</span><br><span class="line">            self.left = left</span><br><span class="line">            self.right = right</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, source_collection=None)</span>:</span></span><br><span class="line">        self.size = <span class="number">0</span>  <span class="comment"># 二叉搜索树中节点的个数</span></span><br><span class="line">        self.root = <span class="keyword">None</span>  <span class="comment"># 根节点</span></span><br><span class="line">        <span class="keyword">if</span> source_collection:</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> source_collection:</span><br><span class="line">                self.insert(item)</span><br></pre></td></tr></table></figure><h2 id="len-s"><a href="#len-s" class="headerlink" title="len(s)"></a><strong>len</strong>(s)</h2><p>二叉搜索树类已经实现了一个实例变量 size ，只需返回这个实例变量即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.size</span><br></pre></td></tr></table></figure><h2 id="str-s"><a href="#str-s" class="headerlink" title="__str__(s)"></a>__str__(s)</h2><p>二叉搜索树字符串表示，将二叉搜索树逆时针旋转 90 度，并在内部节点之间添加 “|”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recurse</span><span class="params">(node, level)</span>:</span></span><br><span class="line">        s = <span class="string">''</span></span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            s += recurse(node.right, level + <span class="number">1</span>)</span><br><span class="line">            s += <span class="string">'| '</span> * level</span><br><span class="line">            s += str(node.data) + <span class="string">'\n'</span></span><br><span class="line">            s += recurse(node.left, level + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> recurse(self.root, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="iter"><a href="#iter" class="headerlink" title="__iter__()"></a>__iter__()</h2><p>借助于列表遍历节点的同时将其左右子树的节点添加到待遍历的列表中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.root <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        lst = list()</span><br><span class="line">        lst.append(self.root)</span><br><span class="line">        <span class="keyword">while</span> lst:</span><br><span class="line">            node = lst.pop()</span><br><span class="line">            <span class="keyword">yield</span> node.data</span><br><span class="line">            <span class="keyword">if</span> node.right <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">                lst.append(node.right)</span><br><span class="line">            <span class="keyword">if</span> node.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">                lst.append(node.left)</span><br></pre></td></tr></table></figure><h2 id="add-s"><a href="#add-s" class="headerlink" title="__add__(s)"></a>__add__(s)</h2><p>两个二叉搜索树相加。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> other:</span><br><span class="line">        self.insert(item)</span><br><span class="line">    <span class="keyword">return</span> self</span><br></pre></td></tr></table></figure><h2 id="eq-s"><a href="#eq-s" class="headerlink" title="__eq__(s)"></a>__eq__(s)</h2><p>与 <code>==</code> 相同，比较两个二叉搜索树中所有节点是否相等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self <span class="keyword">is</span> other:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">if</span> type(self) != type(other) <span class="keyword">or</span> len(self) != len(other):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    other_iter = iter(other)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> self:</span><br><span class="line">        <span class="keyword">if</span> item != next(other_iter):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><h2 id="is-empty"><a href="#is-empty" class="headerlink" title="is_empty()"></a>is_empty()</h2><p>判断二叉搜索树是否为空。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.size == <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h2><p>将二叉搜索树清空。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.root = <span class="keyword">None</span></span><br><span class="line">    self.size = <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p>在二叉搜索树中搜索目标上。如果存在, 返回第一个匹配的项，否则返回 None。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, item)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recurse</span><span class="params">(node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">elif</span> item == node.data:</span><br><span class="line">            <span class="keyword">return</span> node.data</span><br><span class="line">        <span class="keyword">elif</span> item &lt; node.data:</span><br><span class="line">            <span class="keyword">return</span> recurse(node.left)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> recurse(node.right)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> recurse(self.root)</span><br></pre></td></tr></table></figure><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>遍历一个二叉搜索树有两种方式，即深度优先遍历和广度优先遍历；深度优先搜索又有三种方式，即前序遍历、中序遍历和后续遍历。</p><h3 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h3><p>前序遍历先访问树的根节点，然后再分别遍历左子树和右子树。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pre_order</span><span class="params">(self)</span>:</span></span><br><span class="line">    lst = list()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recurse</span><span class="params">(node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            lst.append(node.data)</span><br><span class="line">            recurse(node.left)</span><br><span class="line">            recurse(node.right)</span><br><span class="line">    </span><br><span class="line">    recurse(self.root)</span><br><span class="line">    <span class="keyword">return</span> iter(lst)</span><br></pre></td></tr></table></figure><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>中序遍历先遍历左子树，然后访问根节点，最后遍历右子树。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">in_order</span><span class="params">(self)</span>:</span></span><br><span class="line">    lst = list()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recurse</span><span class="params">(node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            recurse(node.left)</span><br><span class="line">            lst.append(node.data)</span><br><span class="line">            recurse(node.right)</span><br><span class="line">    </span><br><span class="line">    recurse(self.root)</span><br><span class="line">    <span class="keyword">return</span> iter(lst)</span><br></pre></td></tr></table></figure><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p>后序遍历先遍历左子树，然后遍历右子树，最后访问根节点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_order</span><span class="params">(self)</span>:</span></span><br><span class="line">    lst = list()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recurse</span><span class="params">(node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            recurse(node.left)</span><br><span class="line">            recurse(node.right)</span><br><span class="line">            lst.append(node.data)</span><br><span class="line">    </span><br><span class="line">    recurse(self.root)</span><br><span class="line">    <span class="keyword">return</span> iter(lst)</span><br></pre></td></tr></table></figure><h3 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h3><p>二叉树的广度优先遍历又可以称为层序遍历，先从二叉搜索树的 0 层级开始，在每个层级按照从左到右的顺序访问节点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">level_order</span><span class="params">(self)</span>:</span></span><br><span class="line">    lst = list()</span><br><span class="line">    q = queue.Queue()</span><br><span class="line">    q.put(self.root)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">        node = q.get()</span><br><span class="line">        lst.append(node.data)</span><br><span class="line">        <span class="keyword">if</span> node.left:</span><br><span class="line">            q.put(node.left)</span><br><span class="line">        <span class="keyword">if</span> node.right:</span><br><span class="line">            q.put(node.right)</span><br><span class="line">    <span class="keyword">return</span> lst</span><br></pre></td></tr></table></figure><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>将一个项插入到二叉搜索树的适当位置，如果与二叉搜索树中某一项的值相等，插入到这一项的右子树中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, item)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recurse</span><span class="params">(node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> item &lt; node.data:</span><br><span class="line">            <span class="keyword">if</span> node.left <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                node.left = BST.Node(item)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                recurse(node.left)</span><br><span class="line">        <span class="keyword">elif</span> node.right <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            node.right = BST.Node(item)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            recurse(node.right)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> self.is_empty():</span><br><span class="line">        self.root = BST.Node(item)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        recurse(self.root)</span><br><span class="line">    self.size += <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="获取最大项和最小项"><a href="#获取最大项和最小项" class="headerlink" title="获取最大项和最小项"></a>获取最大项和最小项</h2><p>从二叉搜索树的根节点开始分别递归遍历右子树和左子树就可以找到最大项和最小项。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_min</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recurse</span><span class="params">(node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node.left <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> node.data</span><br><span class="line">        <span class="keyword">return</span> recurse(node.left)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> recurse(self.root)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_max</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recurse</span><span class="params">(node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node.right <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> node.data</span><br><span class="line">        <span class="keyword">return</span> recurse(node.right)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> recurse(self.root)</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>删除操作中删除最大项或最小项是最简单的。</p><h3 id="删除最大项或最小项"><a href="#删除最大项或最小项" class="headerlink" title="删除最大项或最小项"></a>删除最大项或最小项</h3><p>和获取最大项和最小项类似，只是多了删除操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_min</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.size == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">"二叉搜索树为空！"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recurse</span><span class="params">(node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node.left.left <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            node.left = node.left.right</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            recurse(node.left)</span><br><span class="line"></span><br><span class="line">    recurse(self.root)</span><br><span class="line">    self.size -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_max</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.size == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">"二叉搜索树为空！"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recurse</span><span class="params">(node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node.right.right <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            node.right = node.right.left</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            recurse(node.right)</span><br><span class="line"></span><br><span class="line">    recurse(self.root)</span><br><span class="line">    self.size -= <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="删除某一项"><a href="#删除某一项" class="headerlink" title="删除某一项"></a>删除某一项</h3><p>删除某一项的操作要复杂一些，先要在二叉搜索树中找到要删除的节点，如果要删除的节点的左子树为空，就返回由子树，如果其右子树为空，就返回左子树；如果其左右子树都不为空，就在其右子树找一个最小的节点替换到当前节点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, item)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> item <span class="keyword">not</span> <span class="keyword">in</span> self:</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">"需要移除的项不存在！"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recurse</span><span class="params">(node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> item == node.data:</span><br><span class="line">            <span class="keyword">if</span> node.left <span class="keyword">is</span> <span class="keyword">None</span>:  <span class="comment"># 左子树为空</span></span><br><span class="line">                <span class="keyword">return</span> node.right</span><br><span class="line">            <span class="keyword">elif</span> node.right <span class="keyword">is</span> <span class="keyword">None</span>:  <span class="comment"># 右子树为空</span></span><br><span class="line">                <span class="keyword">return</span> node.left</span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># 左右子树均不为空</span></span><br><span class="line">                new_node = self._pop_right_min(node)</span><br><span class="line">                new_node.left, new_node.right = node.left, node.right</span><br><span class="line">                <span class="keyword">return</span> new_node</span><br><span class="line">        <span class="keyword">elif</span> item &lt; node.data:</span><br><span class="line">            node.left = recurse(node.left)</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.right = recurse(node.right)</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    self.root = recurse(self.root)</span><br></pre></td></tr></table></figure><p>找某个节点的右子树中的最小节点用到了一个辅助函数，返回并删除这个最小节点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_pop_right_min</span><span class="params">(node)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> node.right.left <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        pop_node = node.right</span><br><span class="line">        node.right = node.right.right</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        node = node.right</span><br><span class="line">        <span class="keyword">while</span> node.left.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            node = node.left</span><br><span class="line">        pop_node = node.left</span><br><span class="line">        node.left = node.left.right</span><br><span class="line">    <span class="keyword">return</span> pop_node</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SQL 学习笔记</title>
      <link href="/2017/09/23/SQL-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html/"/>
      <url>/2017/09/23/SQL-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html/</url>
      <content type="html"><![CDATA[<p><a href="http://www.ituring.com.cn/book/1880" target="_blank" rel="noopener">SQL基础教程（第2版）</a>学习笔记。</p><a id="more"></a><h1 id="数据库和数据库管理系统"><a href="#数据库和数据库管理系统" class="headerlink" title="数据库和数据库管理系统"></a>数据库和数据库管理系统</h1><p>将大量数据保存起来，通过计算机加工而成的可以进行高效访问的数据集合称为数据库(Database，DB)。</p><p>用来管理数据库的计算机系统称为数据库管理系统（Database Management System，DBMS）。</p><h2 id="DBMS-分类"><a href="#DBMS-分类" class="headerlink" title="DBMS 分类"></a>DBMS 分类</h2><ol><li><p>层次数据库（Hierarchical Database，HDB）：把数据通过层次结构（树形结构）的方式表现出来。</p></li><li><p>关系数据库（Relational Database，RDB）：采用由行和列组成的二维表来管理数据。使用 SQL（Structured Query Language，结构化查询语言）对数据进行操作。</p><blockquote><p>这种类型的 DBMS 称为关系数据库管理系统（Relational Database Management System，RDBMS）。</p></blockquote></li><li><p>对象数据库（Object Oriented Database，OODB）：把数据以及对数据的操作集合起来以对象为单位进行管理。</p></li><li><p>XML 数据库（XML Database，XMLDB）：对 XML 形式的大量数据进行高速处理。</p></li><li><p>键值存储系统（Key-Value Store，KVS）：保存查询所使用的主键(Key)和值(Value)的组合的数据库。</p></li></ol><h2 id="RDBMS-代表"><a href="#RDBMS-代表" class="headerlink" title="RDBMS 代表"></a>RDBMS 代表</h2><ol><li>Oracle Database</li><li>SQL Server</li><li>DB2</li><li>PostgreSQL</li><li>MySQL</li></ol><h1 id="关系数据库管理系统结构"><a href="#关系数据库管理系统结构" class="headerlink" title="关系数据库管理系统结构"></a>关系数据库管理系统结构</h1><p>RDBMS 通常使用客户端 / 服务器的系统结构。</p><ul><li>服务器：用来接收其他程序发出的请求，并对该请求进行相应处理的程序（软件），或者是安装了此类程序的设备（计算机）。<br>   客户端：    向服务器发出请求的程序（软件），或者是安装了该程序的设备（计算机）。</li></ul><p>操作数据库时通过从客户端向服务器端发送SQL语句来实现数据库的读写操作。</p><h1 id="关系数据库结构"><a href="#关系数据库结构" class="headerlink" title="关系数据库结构"></a>关系数据库结构</h1><p>关系数据库采用被称为数据库表的二维表来管理数据。</p><p>一个数据库中可以存储多个表。</p><ul><li><p>表：管理数据的二维表。</p></li><li><p>字段：表的列（垂直方向），代表了保存在表中的数据项目。</p></li><li><p>记录：表的行（水平方向），相当于一条数据。</p><blockquote><p>关系数据库必须以行为单位进行数据读写 </p></blockquote></li><li><p>单元格：行和列交汇的方格，每个单元格只能输入一个数据。</p></li></ul><h1 id="SQL-语句种类"><a href="#SQL-语句种类" class="headerlink" title="SQL 语句种类"></a>SQL 语句种类</h1><p>SQL 是一种专门用来与数据库通信的语言。用关键字、表名、列名等组合而成的一条语句来<br>描述操作的内容。</p><p>SQL 语句可以分为三类：</p><ol><li>DDL（Data Definition Language，数据定义语言）用来创建或者删除数据库以及数据库中的表等对象。<ol><li>CREATE：创建数据库和表等对象；</li><li>DROP：删除数据库和表等对象；</li><li>ALTER：修改数据库和表等对象的结构。</li></ol></li><li>DML（Data Manipulation Language，数据操纵语言）用来查询或者变更表中的记录。<ol><li>SELECT：查询；</li><li>INSERT：插入；</li><li>UPDATE：更新；</li><li>DELETE：删除。</li></ol></li><li>DCL（Data Control Language，数据控制语言）用来确认或者取消对数据库中的数据进行的变更、对 RDBMS 的用户是否有权限操作数据库中的对象（数据库表等）进行设定。<ol><li>COMMIT：确认变更；</li><li>ROLLBACK：取消变更；</li><li>GRANT：赋予用户操作权限；</li><li>REVOKE: 取消用户的操作权限。</li></ol></li></ol><p>最后注释有两种：<code>--</code> 和 <code>/* */</code>。</p><ol><li>行注释书写在 <code>--</code> 之后，只能写在同一行；</li><li>多行注释书写在 <code>/*</code> 和 <code>*/</code> 之间，可以跨多行。</li></ol><h1 id="创建、使用数据库"><a href="#创建、使用数据库" class="headerlink" title="创建、使用数据库"></a>创建、使用数据库</h1><ol><li><p>新建数据库：<code>CREATE DATABASE &lt;数据库名称&gt;;</code></p></li><li><p>使用数据库：<code>USE &lt;数据库名称&gt;;</code></p></li><li><p>显示所有数据库：<code>SHOW DATABASES;</code></p><blockquote><p>其它 SHOW 语句：</p><ul><li>显示一个数据库中所有的表：<code>SHOW TABLES;</code></li><li>显示一个表中的所有列信息：<code>SHOW COLUMNS FROM &lt;表名称&gt;;</code>； <code>DESCRIBE</code> 可作为 <code>SHOW COLUMNS FROM</code> 的快捷方式。</li><li>显示服务器状态信息：<code>SHOW STATUS;</code></li><li>显示授予用户（所有用户或特定用户）的安全权限：<code>SHOW GRANTS;</code></li><li>显示服务器错误或警告消息：<code>SHOW ERRORS</code> 和 <code>SHOW WARNINGS;</code></li></ul></blockquote></li></ol><h1 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h1><p>格式：<code>CREATE TABLE &lt;表名&gt;(--描述--);</code>。<br>例如创建一个名为「Product」的表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Product(</span><br><span class="line">product_id CHAR(4) NOT NULL,</span><br><span class="line">product_name VARCHAR(100) NOT NULL, </span><br><span class="line">product_type VARCHAR(32) NOT NULL, </span><br><span class="line">sale_price INTEGER DEFAULT 0, </span><br><span class="line">purchase_price INTEGER, </span><br><span class="line">regist_date DATE, </span><br><span class="line">PRIMARY KEY(product_id)</span><br><span class="line">)DEFAULT CHARSET UTF8;</span><br></pre></td></tr></table></figure><blockquote><p>只能使用半角英文字母、数字、下划线(_)作为数据库、表和列的名称 。</p></blockquote><p>创建「Product」表时用到了数据类型，常见的四种数据类型：</p><ol><li><p><code>INTEGER</code>：指定存储整数，不能存储小数。</p></li><li><p><code>CHAR</code>：指定存储字符串（不可变长字符串的形式）。在括号中指定可以存储的字符串的最大长度。当列中存储的字符串长度达不到最大长度的时候，自动使用半角空格进行补足。</p></li><li><p><code>VARCHAR</code>：与 <code>CHAR</code> 不同的是以可变长字符串的形式存储字符串，即使字符数未达到最大长度，也不会用半角空格补足</p><blockquote><p>特别的：Oracle 中使用 VARCHAR2 型。</p></blockquote></li><li><p><code>DATE</code>：指定存储日期（年月日）。</p><blockquote><p>特别的：Oracle 中使用的 DATE 型还包含时分秒。</p></blockquote></li></ol><p>「Product」表中还使用了约束，如 <code>NOT NULL</code>。约束是列中存储的数据进行限制或者追加条件。</p><ul><li><code>NOT NULL</code> 约束：<code>NULL</code> 代表空白（无记录）。加上表示否定的 <code>NOT</code> 后表示该列不能输入空白。</li><li><code>PRIMARY KEY</code> 约束：唯一标识数据库表中的每条记录。表中只能有一个主键且主键列不能包含 NULL 值。</li></ul><p>最后指定了表的编码格式为 <code>UTF8</code>：<code>DEFAULT CHARSET UTF8</code> 。</p><h1 id="删除、更新表"><a href="#删除、更新表" class="headerlink" title="删除、更新表"></a>删除、更新表</h1><ol><li><p>删除表：<code>DROP TABLE &lt;表名&gt;;</code></p></li><li><p>添加表列：<code>ALTER TABLE &lt;表名&gt; ADD COLUMN &lt;列的定义&gt;;</code>，如向「Product」表中添加一列：<code>ALTER TABLE Product ADD COLUMN product_name_pinyin VARCHAR(100);</code>。</p></li><li><p>删除表列：<code>ALTER TABLE &lt;表名&gt; DROP COLUMN &lt;列名&gt;;</code>，如删除「Product」表中一列：<code>ALTER TABLE Product DROP COLUMN product_name_pinyin;</code>。</p><blockquote><p>特别的，添加和删除表列时：</p><ol><li>Oracle 和 SQL Server 在添加表列时不用写 COLUMN，Oracle 在删除表列时不用写 COLUMN；</li><li>在 Oracle 中同时添加/删除多列的时候，可以使用括号：<code>ALTER TABLE &lt;表名&gt; ADD/DROP (&lt;列名&gt;，&lt;列名&gt;，......);</code>。</li></ol></blockquote></li><li><p>更改表名：标准 SQL 没有更改表名的语法，各数据库语法如下</p><ul><li>Oracle、PostgresSQL：<code>ALTER TABLE Poduct RENAME TO Product;</code>；</li><li>DB2：<code>RENAME TABLE Poduct TO Product;</code>；</li><li>SQL Server：<code>sp_rename &#39;Poduct&#39;, &#39;Product&#39;;</code>；</li><li>MySQL：<code>RENAME TABLE Poduct to Product;</code>。</li></ul></li></ol><h1 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h1><p>格式：<code>INSERT INTO &lt;表名&gt; (列1, 列2, 列3, ......) VALUES (值1, 值2, 值3, ......);</code>。</p><ol><li><p>插入单条数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Product(product_id, product_name, product_type, sale_price, purchase_price, regist_date) <span class="keyword">VALUE</span>(<span class="string">'0001'</span>, <span class="string">'T恤衫'</span>, <span class="string">'衣服'</span>, <span class="number">1000</span>, <span class="number">500</span>, <span class="string">'2009-09-20'</span>);</span><br></pre></td></tr></table></figure></li><li><p>插入多条数据（除 Oracle 以外）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Product <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'0002'</span>, <span class="string">'打孔器'</span>, <span class="string">'办公用品'</span>, <span class="number">500</span>, <span class="number">320</span>, <span class="string">'2009-09-11'</span>),</span><br><span class="line">    (<span class="string">'0003'</span>, <span class="string">'运动T恤'</span>, <span class="string">'衣服'</span>, <span class="number">4000</span>, <span class="number">2800</span>, <span class="literal">NULL</span>),</span><br><span class="line">    (<span class="string">'0004'</span>, <span class="string">'菜刀'</span>, <span class="string">'厨房用具'</span>, <span class="number">3000</span>, <span class="number">2800</span>, <span class="string">'2009-09-20'</span>)</span><br><span class="line">;</span><br></pre></td></tr></table></figure><blockquote><p>对表进行全列 <code>INSERT</code> 时，列清单可不写。</p></blockquote></li><li><p>插入多条数据（ Oracle ）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> ALL <span class="keyword">INTO</span> Product <span class="keyword">VALUES</span>(<span class="string">'0002'</span>, <span class="string">'打孔器'</span>, <span class="string">'办公用品'</span>, <span class="number">500</span>, <span class="number">320</span>, <span class="string">'2009-09-11'</span>),</span><br><span class="line">       <span class="keyword">INTO</span> Product <span class="keyword">VALUES</span>(<span class="string">'0003'</span>, <span class="string">'运动T恤'</span>, <span class="string">'衣服'</span>, <span class="number">4000</span>, <span class="number">2800</span>, <span class="literal">NULL</span>),</span><br><span class="line">       <span class="keyword">INTO</span> Product <span class="keyword">VALUES</span>(<span class="string">'0004'</span>, <span class="string">'菜刀'</span>, <span class="string">'厨房用具'</span>, <span class="number">3000</span>, <span class="number">2800</span>, <span class="string">'2009-09-20'</span>)</span><br><span class="line">;</span><br></pre></td></tr></table></figure></li><li><p>插入 <code>NULL</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Product <span class="keyword">VALUE</span>(<span class="string">'0005'</span>, <span class="string">'叉子'</span>, <span class="string">'厨房用具'</span>, <span class="number">500</span>, <span class="literal">NULL</span>, <span class="string">'2009-09-20'</span>);</span><br></pre></td></tr></table></figure></li><li><p>插入默认值：如果在创建表时使用了默认值（DEAFULT）约束，在插入数据时又想使此列保持为默认值，操作如下</p><ol><li><p>显示操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Product <span class="keyword">VALUE</span>(<span class="string">'0006'</span>, <span class="string">'插菜板'</span>, <span class="string">'厨房用具'</span>, DEAFULT, <span class="number">790</span>, <span class="string">'2009-04-28'</span>);</span><br></pre></td></tr></table></figure></li><li><p>隐示操作：指定列清单</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Product(product_id, product_name, product_type, purchase_price, regist_date) <span class="keyword">VALUE</span>(<span class="string">'0006'</span>, <span class="string">'插菜板'</span>, <span class="string">'厨房用具'</span>, <span class="number">790</span>, <span class="string">'2009-04-28'</span>);</span><br></pre></td></tr></table></figure></li></ol></li><li><p>从其它表复制，定一个表 <code>ProductCopy</code>，从 <code>Product</code> 表中复制数据到 <code>ProductCopy</code> 中，使用 <code>INSERT ... SELECT</code> 语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ProductCopy(product_id, product_name, product_type, sale_price, purchase_price, regist_date)</span><br><span class="line"><span class="keyword">SELECT</span> product_id, product_name, product_type, sale_price, purchase_price, regist_date <span class="keyword">FROM</span> Product;</span><br></pre></td></tr></table></figure></li></ol><h1 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h1><h2 id="SELECT-语句"><a href="#SELECT-语句" class="headerlink" title="SELECT 语句"></a>SELECT 语句</h2><p>格式：<code>SELECT &lt;列名&gt;，...... FROM &lt;表名&gt;;</code>。</p><ol><li><p>查询所有列：<code>SELECT * FROM &lt;表名&gt;;</code>。</p></li><li><p>为列设置别名：可以使用 <code>AS</code> 关键字为列设置别名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_id <span class="keyword">AS</span> <span class="keyword">id</span>, product_name <span class="keyword">AS</span> <span class="keyword">name</span>, purchase_price <span class="keyword">AS</span> price <span class="keyword">FROM</span> Product;</span><br><span class="line"></span><br><span class="line">| id   | name       | price |</span><br><span class="line">+<span class="comment">------+------------+-------+</span></span><br><span class="line">| 0002 | 打孔器     |   320 |</span><br><span class="line">| 0003 | 运动T恤    |  2800 |</span><br><span class="line">| 0004 | 菜刀       |  2800 |</span><br><span class="line">| 0005 | 叉子       |  NULL |</span><br><span class="line">| 001  | T恤衫      |   500 |</span><br></pre></td></tr></table></figure><blockquote><p>如果要设置中文别名，需要将中文用双引号扩起来。</p></blockquote></li><li><p>书写常数：<code>SELECT</code> 可以书写常数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">'商品'</span> <span class="keyword">AS</span> <span class="keyword">string</span>, <span class="number">38</span> <span class="keyword">AS</span> <span class="built_in">number</span>, <span class="string">'2009-02-24'</span> <span class="keyword">AS</span> <span class="built_in">date</span>, product_id, product_name <span class="keyword">FROM</span> Product;</span><br><span class="line"></span><br><span class="line">| string | number | date      | product_id | product_name |</span><br><span class="line">+<span class="comment">--------+--------+-----------+------------+--------------+</span></span><br><span class="line">| 商品   |     38 | 2009-02-24 | 0002       | 打孔器        |</span><br><span class="line">| 商品   |     38 | 2009-02-24 | 0003       | 运动T恤       |</span><br><span class="line">| 商品   |     38 | 2009-02-24 | 0004       | 菜刀          |</span><br><span class="line">| 商品   |     38 | 2009-02-24 | 0005       | 叉子          |</span><br><span class="line">| 商品   |     38 | 2009-02-24 | 001        | T恤衫         |</span><br></pre></td></tr></table></figure><blockquote><p>使用字符串或者日期常数时，需要使用单引号括起来。</p></blockquote></li><li><p>从结果中删除重复行：在 <code>SELECT</code> 中使用 <code>DISTINCT</code> 可以删除重复行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_type <span class="keyword">FROM</span> Product;</span><br><span class="line"></span><br><span class="line">| product_type |</span><br><span class="line">+<span class="comment">--------------+</span></span><br><span class="line">| 办公用品      |</span><br><span class="line">| 衣服         |</span><br><span class="line">| 厨房用具      |</span><br><span class="line">| 厨房用具      |</span><br><span class="line">| 衣服         |</span><br></pre></td></tr></table></figure><p>比较：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> product_type <span class="keyword">FROM</span> Product;</span><br><span class="line"></span><br><span class="line">+<span class="comment">--------------+</span></span><br><span class="line">| product_type |</span><br><span class="line">+<span class="comment">--------------+</span></span><br><span class="line">| 办公用品      |</span><br><span class="line">| 衣服         |</span><br><span class="line">| 厨房用具      |</span><br></pre></td></tr></table></figure><blockquote><p><code>DISTINCT</code> 只能放在列清单的第一个列名之前。</p></blockquote></li></ol><h2 id="WHERE-子句"><a href="#WHERE-子句" class="headerlink" title="WHERE 子句"></a>WHERE 子句</h2><p><code>SELECT</code> 语句通过<code>WHERE</code> 子句来指定查询数据的条件。</p><p>格式：<code>SELECT &lt;列名&gt;, ...... FROM &lt;表名&gt; WHERE &lt;条件表达式&gt;;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_name, product_type <span class="keyword">FROM</span> Product <span class="keyword">WHERE</span> product_type = <span class="string">'衣服'</span>;</span><br><span class="line"></span><br><span class="line">+<span class="comment">--------------+--------------+</span></span><br><span class="line">| product_name | product_type |</span><br><span class="line">+<span class="comment">--------------+--------------+</span></span><br><span class="line">| 运动T恤       | 衣服          |</span><br><span class="line">| T恤衫         | 衣服          |</span><br><span class="line">+<span class="comment">--------------+--------------+</span></span><br></pre></td></tr></table></figure><blockquote><p><code>WHERE</code> 子句必须紧跟在 <code>FROM</code> 子句之后。</p></blockquote><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>SQL 语句中可以使用计算表达式。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_name, sale_price, sale_price * <span class="number">2</span> <span class="keyword">AS</span> sale_price_x2 <span class="keyword">FROM</span> Product;</span><br><span class="line"></span><br><span class="line">+<span class="comment">--------------+------------+---------------+</span></span><br><span class="line">| product_name | sale_price | sale_price_x2 |</span><br><span class="line">+<span class="comment">--------------+------------+---------------+</span></span><br><span class="line">| 打孔器        |        500 |          1000 |</span><br><span class="line">| 运动T恤       |       4000 |          8000 |</span><br><span class="line">| 菜刀          |       3000 |          6000 |</span><br><span class="line">| 叉子          |        500 |          1000 |</span><br><span class="line">| T恤衫         |       1000 |          2000 |</span><br><span class="line">+<span class="comment">--------------+------------+---------------+</span></span><br></pre></td></tr></table></figure><p>将 <code>sale_price</code> 的两倍放在了 <code>sale_price_x2</code> 列中。</p><p>SQL 支持加减乘除，并且所有包含 <code>NULL</code> 的计算，结果都为 <code>NULL</code>。</p><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>在 <code>WHERE</code> 子句中通过使用比较运算符可以组合出各种各样的条件表达式。<code>=</code> 也是一种比较运算符。主要比较运算符如下：</p><ol><li><code>=</code> ：相等；</li><li><code>&lt;&gt;</code> ：不相等；</li><li><code>&gt;=</code> ：大于等于；</li><li><code>&gt;</code> ：大于；</li><li><code>&lt;=</code> ：小于等于；</li><li><code>&lt;</code> ：小于。</li></ol><blockquote><p>注意：</p><ol><li>字符串类型的数据原则上按照字典顺序进行排序，</li><li>不能对 NULL 使用比较运算符（提供了 <code>IS NULL</code> 和 <code>IS NOT NULL</code>  运算符）。</li></ol></blockquote>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>初识 Requests 库</title>
      <link href="/2017/09/16/%E5%88%9D%E8%AF%86-Requests-%E5%BA%93.html/"/>
      <url>/2017/09/16/%E5%88%9D%E8%AF%86-Requests-%E5%BA%93.html/</url>
      <content type="html"><![CDATA[<p>Requests 库是一个处理复杂 HTTP 请求、cookie、header 等内容的 Python 第三方库。</p><a id="more"></a><h1 id="安装与示例"><a href="#安装与示例" class="headerlink" title="安装与示例"></a>安装与示例</h1><p>命令行安装：<code>pip install requests</code></p><p>简单示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>requests.get(<span class="string">"https://tyrotalk.com"</span>)</span><br><span class="line">&lt;Response [<span class="number">200</span>]&gt;</span><br></pre></td></tr></table></figure><p>这里使用了 HTTP 的 GET 请求，其它 HTTP 请求类型还有 PUT、DELETE、HEAD 、 OPTIONS。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.put(<span class="string">'http://httpbin.org/put'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.delete(<span class="string">'http://httpbin.org/delete'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.head(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.options(<span class="string">'http://httpbin.org/get'</span>)</span><br></pre></td></tr></table></figure><h1 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h1><p>以前面示例 <code>html = requests.get(&quot;https://tyrotalk.com&quot;)</code> 为例，html 类型（requests 返回类型）为 <code>requests.models.Response</code>；输出 <code>&lt;Response [200]&gt;</code> 中 200 为 httpcode，表示请求被成功处理。</p><h2 id="返回类型"><a href="#返回类型" class="headerlink" title="返回类型"></a>返回类型</h2><p>requests 返回类型为 <code>requests.models.Response</code>，可转换成其它类型。</p><ol><li><p>text 方法：<code>html.text</code> 将返回 str 类型的数据；</p></li><li><p>content 方法：<code>html.content</code> 将返回 bytes 类型的数据；</p></li><li><p>json() 方法：<code>html.json()</code> 将 JSON 格式的字符串转换为字典格式。</p><blockquote><p>如何返回类型不为 JSON，使用 json() 方法将抛出 <code>json.decoder.JSONDecodeError</code>异常。</p></blockquote></li></ol><h2 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h2><p>如果要为 URL 传递一些参数构建新的新的请求参数，只需将将这些参数构建成一个字典，传递给 GET 的 params 参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">params = &#123;</span><br><span class="line">    &apos;key&apos;: &apos;value&apos;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.get(&quot;http://httpbin.org/get&quot;, params=data)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>输出内容为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"args"</span>: &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"value"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="attr">"headers"</span>: &#123;</span><br><span class="line">    <span class="attr">"Accept"</span>: <span class="string">"*/*"</span>, </span><br><span class="line">    <span class="attr">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, </span><br><span class="line">    <span class="attr">"Connection"</span>: <span class="string">"close"</span>, </span><br><span class="line">    <span class="attr">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="attr">"User-Agent"</span>: <span class="string">"python-requests/2.18.4"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h2><p> HTTP 的请求头是每次向网络服务器发送请求时，传递的一组属性和配置信息。可向 requests 传递 headers 参数来传递请求头信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">"https://tyrotalk.com"</span>, headers=headers)</span><br></pre></td></tr></table></figure><h1 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h1><p>POST 方法把信息推送给网络服务器进行存储和分析。通常用户通过 HTML 表单发送 POST 请求，也可以通过 requests 来实现，并将对应的信息添加到请求信息中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;<span class="string">'key'</span>: <span class="string">'germey'</span>, <span class="string">'age'</span>: <span class="string">'22'</span>&#125;</span><br><span class="line">r = requests.post(<span class="string">"http://httpbin.org/post"</span>, data=data)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>输出内容为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"args"</span>: &#123;&#125;, </span><br><span class="line">  <span class="attr">"data"</span>: <span class="string">""</span>, </span><br><span class="line">  <span class="attr">"files"</span>: &#123;&#125;, </span><br><span class="line">  <span class="attr">"form"</span>: &#123;</span><br><span class="line">    key": "value"</span><br><span class="line">  &#125;, </span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><p>网站使用 cookie 来跟踪用户是否已登陆的状态信息，当网站验证了登陆权证后，会将一些信息保存在浏览器的 cookie 中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(<span class="string">"https://tyrotalk.com"</span>)</span><br><span class="line">print(r.cookies.get_dict())</span><br></pre></td></tr></table></figure><p>返回的 cookie 的类型为：<code>RequestsCookieJar</code>，通过 get_dict() 方法将 cookie 转换成字典格式。</p><h2 id="传递-cookies-参数"><a href="#传递-cookies-参数" class="headerlink" title="传递 cookies 参数"></a>传递 cookies 参数</h2><p>在需要 cookie 的网站中，可通过 requests 的 POST 方法或直接在浏览器中直接复制来获得 cookie 信息，然后传递给 requests 的 cookies 参数来再次访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r2 = requests.get(&quot;https://tyrotalk.com&quot;, cookies=r.cookies)</span><br></pre></td></tr></table></figure><h2 id="Session"><a href="#Session" class="headerlink" title="Session()"></a>Session()</h2><p>有时不想频繁设置 cookie ，就可以通过 requests 的 session 函数持续跟踪会话信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">session = requests.Session()</span><br><span class="line">session.get(&apos;https://tyrotalk.com&apos;)</span><br><span class="line">r = session.get(&apos;https://tyrotalk.com&apos;)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python 库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python 库 </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> Requests </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 数据结构：列表</title>
      <link href="/2017/09/10/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E5%88%97%E8%A1%A8.html/"/>
      <url>/2017/09/10/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E5%88%97%E8%A1%A8.html/</url>
      <content type="html"><![CDATA[<p>列表支持对线性集合的任何位置的项进行操作。对列表的操作主要有三类：基于索引的操作、基于内容的操作、基于位置的操作。</p><a id="more"></a><h1 id="列表的主要方法"><a href="#列表的主要方法" class="headerlink" title="列表的主要方法"></a>列表的主要方法</h1><p>1. 基于内容的操作：</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>index(item)</td><td>返回项 item 在列表中的索引</td></tr><tr><td>add(item)</td><td>在列表尾部添加项</td></tr><tr><td>remove(item)</td><td>从列表中删除项 item</td></tr></tbody></table><p>2. 基于索引的操作：</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>insert(i, item)</td><td>在索引 i 处添加项 item</td></tr><tr><td>pop(i=None)</td><td>删除并返回索引 i 的项，如果没有参数 i，删除并返回最后一项</td></tr><tr><td>L[i]</td><td>返回索引 i 处的项</td></tr><tr><td>L[i] = item</td><td>用 item 替换索引 i 处的项</td></tr></tbody></table><h1 id="列表的双链表实现"><a href="#列表的双链表实现" class="headerlink" title="列表的双链表实现"></a>列表的双链表实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoWayNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data=None, previous=None, later=None)</span>:</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.previous = previous</span><br><span class="line">        self.later = later</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, source_collection=None)</span>:</span></span><br><span class="line">        self.head = TwoWayNode()  <span class="comment"># 哨兵节点</span></span><br><span class="line">        self.head.previous = self.head.later = self.head</span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> source_collection:</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> source_collection:</span><br><span class="line">                self.add(item)</span><br></pre></td></tr></table></figure><p>在列表类初始化的时候定义了一个哨兵节点，可以使双链表的结构得到简化。哨兵节点不包含在列表项中，其向前指向第一个数据节点，向后指向最后一个节点。</p><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/Python-数据结构：列表/sentinel_node.png"><h2 id="len-s"><a href="#len-s" class="headerlink" title="len(s)"></a><strong>len</strong>(s)</h2><p>返回实例变量 size 表示列表大小。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.size</span><br></pre></td></tr></table></figure><h2 id="str-s"><a href="#str-s" class="headerlink" title="__str__(s)"></a>__str__(s)</h2><p>返回列表的字符串表示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'['</span> + <span class="string">', '</span>.join(map(str, self)) + <span class="string">']'</span></span><br></pre></td></tr></table></figure><h2 id="iter"><a href="#iter" class="headerlink" title="__iter__()"></a>__iter__()</h2><p>从头到尾，依次访问各项，返回各项的值。因为列表项不包含哨兵节点，所有第一个节点为 <code>self.head.later</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">    probe = self.head.later</span><br><span class="line">    <span class="keyword">while</span> probe != self.head:</span><br><span class="line">        <span class="keyword">yield</span> probe.data</span><br><span class="line">        probe = probe.later</span><br></pre></td></tr></table></figure><h2 id="add-s"><a href="#add-s" class="headerlink" title="__add__(s)"></a>__add__(s)</h2><p>两个列表相加。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> other:</span><br><span class="line">        self.add(item)</span><br><span class="line">    <span class="keyword">return</span> self</span><br></pre></td></tr></table></figure><h2 id="eq-s"><a href="#eq-s" class="headerlink" title="__eq__(s)"></a>__eq__(s)</h2><p>与 <code>==</code> 相同，比较两个列表中项是否相等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self <span class="keyword">is</span> other:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">if</span> type(self) != type(other) <span class="keyword">or</span> len(self) != len(other):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    other_iter = iter(other)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> self:</span><br><span class="line">        <span class="keyword">if</span> item != next(other_iter):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><h2 id="is-empty"><a href="#is-empty" class="headerlink" title="is_empty()"></a>is_empty()</h2><p>判断列表是否为空。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.size == <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h2><p>将列表全部清空</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.head = TwoWayNode()</span><br><span class="line">    self.size = <span class="number">0</span></span><br><span class="line">    self.head.previous = self.head.later = self.head</span><br></pre></td></tr></table></figure><h2 id="基于内容的操作"><a href="#基于内容的操作" class="headerlink" title="基于内容的操作"></a>基于内容的操作</h2><ol><li><p>index(item): 返回项 item 在列表中的索引。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(self, item)</span>:</span></span><br><span class="line">    po = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> self:</span><br><span class="line">        <span class="keyword">if</span> data == item:</span><br><span class="line">            <span class="keyword">return</span> po</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            po += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> po == len(self):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(str(item) + <span class="string">"不在列表中！"</span>)</span><br></pre></td></tr></table></figure></li><li><p>add(item): 在列表尾部添加项。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, item)</span>:</span></span><br><span class="line">    self.insert(len(self), item)</span><br></pre></td></tr></table></figure></li><li><p>remove(item): 从列表中删除项 item。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, item)</span>:</span></span><br><span class="line">    po = self.index(item)</span><br><span class="line">    self.pop(po)</span><br></pre></td></tr></table></figure></li></ol><p><code>add(item)</code> 和 <code>remove(item)</code> 方法中都用到了基于索引的操作。</p><h2 id="基于索引的操作"><a href="#基于索引的操作" class="headerlink" title="基于索引的操作"></a>基于索引的操作</h2><ol><li><p>_get_node(i): 这是一个基于索引的操作的辅助方法，返回第 i 项的指针；其它基于索引的操作都需要用到。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_node</span><span class="params">(self, i)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> i == len(self):</span><br><span class="line">        <span class="keyword">return</span> self.head</span><br><span class="line">    <span class="keyword">elif</span> i == len(self) - <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> self.head.previous</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        probe = self.head.later</span><br><span class="line">        <span class="keyword">while</span> i &gt; <span class="number">0</span>:</span><br><span class="line">            probe = probe.later</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> probe</span><br></pre></td></tr></table></figure><blockquote><p>特别的，当 i 值等于列表大小时，返回指向哨兵节点的指针。</p></blockquote></li><li><p>insert(i, item): 在索引 i 处添加项 item。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, i, item)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="number">0</span> <span class="keyword">or</span> i &gt; len(self):</span><br><span class="line">        <span class="keyword">raise</span> IndexError(<span class="string">"列表索引超出范围！"</span>)</span><br><span class="line">    node = self._get_node(i)</span><br><span class="line">    new_node = TwoWayNode(item, previous=node.previous, later=node)</span><br><span class="line">    node.previous.later = new_node</span><br><span class="line">    node.previous = new_node</span><br><span class="line">    self.size += <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>pop(i=None): 删除并返回索引 i 的项，如果没有参数 i，删除并返回最后一项。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self, i=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        i = len(self) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="number">0</span> <span class="keyword">or</span> i &gt;= len(self):</span><br><span class="line">        <span class="keyword">raise</span> IndexError(<span class="string">"列表索引超出范围！"</span>)</span><br><span class="line">    node = self._get_node(i)</span><br><span class="line">    remove_item = node.data</span><br><span class="line">    node.previous.later = node.later</span><br><span class="line">    node.later.previous = node.previous</span><br><span class="line">    self.size -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> remove_item</span><br></pre></td></tr></table></figure></li><li><p>L[i]: 返回索引 i 处的项。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, i)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="number">0</span> <span class="keyword">or</span> i &gt;= len(self):</span><br><span class="line">        <span class="keyword">raise</span> IndexError(<span class="string">"列表索引超出范围！"</span>)</span><br><span class="line">    <span class="keyword">return</span> self._get_node(i).data</span><br></pre></td></tr></table></figure></li><li><p>L[i] = item: 用 item 替换索引 i 处的项。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, i, item)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="number">0</span> <span class="keyword">or</span> i &gt;= len(self):</span><br><span class="line">        <span class="keyword">raise</span> IndexError(<span class="string">"列表索引超出范围！"</span>)</span><br><span class="line">    self._get_node(i).data = item</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>除了辅助函数，其它操作都需要考虑列表索引是否超出范围。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 列表 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>BeautifulSoup 使用</title>
      <link href="/2017/09/07/BeautifulSoup-%E4%BD%BF%E7%94%A8.html/"/>
      <url>/2017/09/07/BeautifulSoup-%E4%BD%BF%E7%94%A8.html/</url>
      <content type="html"><![CDATA[<p>Beautiful Soup是一个Python包，功能包括解析HTML、XML文档、修复含有未闭合标签等错误的文档，通过定位 HTML 标签来格式化和组织复杂的网络信息。<br><a id="more"></a></p><h1 id="创建-BeautifulSoup-对象"><a href="#创建-BeautifulSoup-对象" class="headerlink" title="创建 BeautifulSoup 对象"></a>创建 BeautifulSoup 对象</h1><ol><li><p>获取网页源代码：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line">html = urlopen(<span class="string">'http://pythonscraping.com/pages/page3.html'</span>)</span><br></pre></td></tr></table></figure></li><li><p>使用解析器解析网页源代码生成 BeautifulSoup 对象：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="comment"># soup = BeautifulSoup(网页源代码, '解析器')</span></span><br><span class="line">soup = BeautifulSoup(html.read(), <span class="string">'html.parser'</span>)</span><br></pre></td></tr></table></figure></li></ol><p>为方便演示，网页源代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        img &#123;</span></span><br><span class="line"><span class="undefined">            width: 75px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        table &#123;</span></span><br><span class="line"><span class="undefined">            width: 50%;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">       td &#123;</span></span><br><span class="line"><span class="undefined">            margin: 10px;</span></span><br><span class="line"><span class="undefined">            padding: 10px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">       .wrapper &#123;</span></span><br><span class="line"><span class="undefined">            width: 800px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">       .excitingNote &#123;</span></span><br><span class="line"><span class="undefined">            font-style: italic;</span></span><br><span class="line"><span class="undefined">            font-weight: bold;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../img/gifts/logo.jpg"</span> <span class="attr">style</span>=<span class="string">"float:left;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Totally Normal Gifts<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span>Here is a collection of totally normal, totally reasonable gifts that your friends are sure to</span><br><span class="line">        love! Our collection is</span><br><span class="line">        hand-curated by well-paid, free-range Tibetan monks.<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            We haven't figured out how to make online shopping carts yet, but you can send us a check to:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            123 Main St.<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            Abuja, Nigeria</span><br><span class="line">            We will then send your totally amazing gift, pronto! Please include an extra $5.00 for gift wrapping.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"giftList"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Item Title<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Description<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Cost<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Image<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"gift"</span> <span class="attr">id</span>=<span class="string">"gift1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Vegetable Basket<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>This vegetable basket is the perfect gift for your health conscious (or overweight) friends!</span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"excitingNote"</span>&gt;</span>Now with super-colorful bell peppers!<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$15.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../img/gifts/img1.jpg"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"gift"</span> <span class="attr">id</span>=<span class="string">"gift2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Russian Nesting Dolls<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Hand-painted by trained monkeys, these exquisite dolls are priceless! And by "priceless," we mean</span><br><span class="line">                "extremely expensive"! <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"excitingNote"</span>&gt;</span>8 entire dolls per set! Octuple the presents!<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$10,000.52<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../img/gifts/img2.jpg"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"gift"</span> <span class="attr">id</span>=<span class="string">"gift3"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span> Fish Painting<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>If something seems fishy about this painting, it's because it's a fish! <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"excitingNote"</span>&gt;</span>Also hand-painted by trained monkeys!<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$10,005.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../img/gifts/img3.jpg"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"gift"</span> <span class="attr">id</span>=<span class="string">"gift4"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Dead Parrot<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>This is an ex-parrot! <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"excitingNote"</span>&gt;</span>Or maybe he's only resting?<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$0.50<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../img/gifts/img4.jpg"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"gift"</span> <span class="attr">id</span>=<span class="string">"gift5"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Mystery Box<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span> If you love suprises, this mystery box is for you! Do not place on light-colored surfaces. May cause oil</span><br><span class="line">                staining. <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"excitingNote"</span>&gt;</span>Keep your friends guessing!<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$1.50<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../img/gifts/img6.jpg"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">    © Totally Normal Gifts, Inc. <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    +234 (617) 863-0736</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="常见-BeautifulSoup-对象"><a href="#常见-BeautifulSoup-对象" class="headerlink" title="常见 BeautifulSoup 对象"></a>常见 BeautifulSoup 对象</h1><ol><li>BeautifulSoup 对象：如上面的 <code>soup</code>。</li><li>标签 Tag 对象：Tag 为 html 中的一个标签，BeautifulSoup 对象获取 Tag 具体内容的格式为 <code>soup.tag</code>。如 <code>soup.div.h1</code> 将获取 h1 标签下所有内容，包括标签本身。</li><li>NavigableString 对象：标签内部的文字内容，可使用 <code>.string</code> 来调用，如 <code>soup.div.h1.string</code> 将获取 h1 标签内部的内容。</li><li>Comment 对象，查找 html 文档的注释内容（&lt;!– 注释 –>)。</li></ol><h1 id="find-和-find-all"><a href="#find-和-find-all" class="headerlink" title="find() 和 find_all()"></a>find() 和 find_all()</h1><p>find() 和 find_all() 算是 BeautifulSoup 中最常用的两个函数了，其通过标签的不同属性查找需要的单个标签和标签组。两个函数的定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find(name, attrs, recursive, text, **kwargs)</span><br><span class="line">find_all(name, attrs, recursive, text, limit, **kwargs)</span><br></pre></td></tr></table></figure><ol><li>name：一个标签名称或多个标签名称组成的集合；</li><li>attrs：一个标签的多个属性和对应的属性值，用字典表示，如 <code>soup.find_all(&#39;div&#39;, {&#39;id&#39;: &#39;footer&#39;})</code>；</li><li>recursive：布尔变量，为 True 时查找标签参数下的所有后代标签，为 False 时只查找标签参数下的子标签，默认为 True；</li><li>text：标签的文本内容匹配，如 <code>soup.find_all(text=&quot;Mystery Box&quot;)</code>；</li><li>limit：范围限制，适用于find_all()，limit=1 时等价于 find()；</li><li><p>kwargs：关键字参数，指定标签具体的属性，如 <code>soup.find_all(id=&#39;gift1&#39;)</code>；</p><blockquote><p>注意：当关键字为 class 时，因为 class 为 Python 的保留字，直接使用可能出现错误，可在 class 后加一个下划线（class_）或使用 attrs 方式。</p></blockquote></li></ol><h1 id="导航树"><a href="#导航树" class="headerlink" title="导航树"></a>导航树</h1><p>Html 页面可以看成一棵树，可以通过标签在树中的位置来查找标签，即为导航树。</p><h2 id="子标签和后代标签"><a href="#子标签和后代标签" class="headerlink" title="子标签和后代标签"></a>子标签和后代标签</h2><ol><li>子标签：父标签的下一级标签，使用 <code>children</code> 函数；</li><li>后代标签：父标签下所有级别的标签，使用 <code>descendants</code> 函数。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印 table 下每个 &lt;tr&gt; 标签</span></span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> soup.find(<span class="string">'table'</span>, &#123;<span class="string">'id'</span>: <span class="string">'giftList'</span>&#125;).children:</span><br><span class="line">print(child)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印 table 下所有标签，包括 &lt;img&gt;、&lt;span&gt;、&lt;td&gt;等</span></span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> soup.find(<span class="string">'table'</span>, &#123;<span class="string">'id'</span>: <span class="string">'giftList'</span>&#125;).descendants:</span><br><span class="line">print(child)</span><br></pre></td></tr></table></figure><h2 id="兄弟标签"><a href="#兄弟标签" class="headerlink" title="兄弟标签"></a>兄弟标签</h2><ol><li>处理标签后面的兄弟标签：<code>next_siblings</code>、<code>next_sibling</code>；</li><li>处理标签前面的兄弟标签：<code>previous_siblings</code>、<code>previous_sibling</code>。</li></ol><p>前者返回一组标签，后者为返回一个标签。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印 table 下第一个 tr 标签后面的所有兄弟标签</span></span><br><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.find(<span class="string">'table'</span>, &#123;<span class="string">'id'</span>: <span class="string">'giftList'</span>&#125;).tr.next_siblings:</span><br><span class="line">    print(sibling)</span><br></pre></td></tr></table></figure><h2 id="父标签"><a href="#父标签" class="headerlink" title="父标签"></a>父标签</h2><p>父标签查找函数：<code>parents</code>、<code>patent</code>，前者返回一组标签，后者为返回一个标签。</p><h1 id="get-text-和-attrs"><a href="#get-text-和-attrs" class="headerlink" title="get_text() 和 attrs"></a>get_text() 和 attrs</h1><p>标签中含有标签属性和内容文本，可通过 get_text() 和 attrs 获取。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(soup.find(<span class="string">'tr'</span>, &#123;<span class="string">'id'</span>: <span class="string">'gift1'</span>&#125;).td.get_text())</span><br><span class="line"><span class="comment"># 打印 ‘Vegetable Basket’</span></span><br><span class="line"></span><br><span class="line">print(soup.find(<span class="string">'div'</span>, &#123;<span class="string">'id'</span>: <span class="string">'content'</span>&#125;).attrs[<span class="string">'id'</span>])</span><br><span class="line"><span class="comment"># 打印 ‘content'</span></span><br></pre></td></tr></table></figure><h1 id="使用正则"><a href="#使用正则" class="headerlink" title="使用正则"></a>使用正则</h1><p>有时通过标签属性值查找多个标签时，这些属性值并不相同但具有类似规律，此时就可以使用正则来匹配了。举例说明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">images = soup.find_all(<span class="string">'img'</span>, &#123;<span class="string">'src'</span>: re.compile(<span class="string">r'../img/gifts/img\d+.jpg'</span>)&#125;)</span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> images:</span><br><span class="line">print(image)</span><br></pre></td></tr></table></figure><p>compile 函数生成一个正则表达式对象，匹配所有含有图片地址的 img 标签，输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"../img/gifts/img1.jpg"</span>/&gt;</span><br><span class="line">&lt;img src=<span class="string">"../img/gifts/img2.jpg"</span>/&gt;</span><br><span class="line">&lt;img src=<span class="string">"../img/gifts/img3.jpg"</span>/&gt;</span><br><span class="line">&lt;img src=<span class="string">"../img/gifts/img4.jpg"</span>/&gt;</span><br><span class="line">&lt;img src=<span class="string">"../img/gifts/img6.jpg"</span>/&gt;</span><br></pre></td></tr></table></figure><h1 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h1><p>BeautifulSoup 允许在 find_all() 中使用函数作为参数，但这样的函数必须以标签作为参数并且返回布尔值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> soup.find_all(<span class="keyword">lambda</span> tag: len(tag.attrs) == <span class="number">2</span>):</span><br><span class="line">    print(t)</span><br></pre></td></tr></table></figure><p>上面代码返回所有属性数量为2的标签。</p><h1 id="CSS-选择器"><a href="#CSS-选择器" class="headerlink" title="CSS 选择器"></a>CSS 选择器</h1><ol><li><p>通过标签名查找：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.select(&apos;img&apos;)</span><br></pre></td></tr></table></figure></li><li><p>通过 class 查找：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.select(<span class="string">'.gift'</span>)</span><br></pre></td></tr></table></figure></li><li><p>通过标 id 查找：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.select(<span class="string">'#footer'</span>)</span><br></pre></td></tr></table></figure></li><li><p>查找子标签：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.select(&apos;body &gt; div &gt; h1&apos;)</span><br></pre></td></tr></table></figure></li><li><p>查找后代标签，查找 body 标签中的所有 h1 标签：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.select(<span class="string">'body h1'</span>)</span><br></pre></td></tr></table></figure></li><li><p>通过标签属性值查找：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 标签 div、属性 id、id 的属性值为 content</span></span><br><span class="line">soup.select(<span class="string">'div[id="content"]'</span>)</span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content>
      
      <categories>
          
          <category> Python 库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BeautifulSoup </tag>
            
            <tag> python 库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 数据结构：优先队列</title>
      <link href="/2017/08/26/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97.html/"/>
      <url>/2017/08/26/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97.html/</url>
      <content type="html"><![CDATA[<p>优先队列是一种特殊的队列类型，其中具有最高优先级的项会最先弹出，相同优先级的项按照 FIFO 的顺序弹出。</p><a id="more"></a><h1 id="优先队列的主要方法"><a href="#优先队列的主要方法" class="headerlink" title="优先队列的主要方法"></a>优先队列的主要方法</h1><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>__len__(s)</td><td>返回优先队列中项的数目</td></tr><tr><td>__str__(s)</td><td>返回优先队列的字符串表示</td></tr><tr><td>__iter__()</td><td>从前到后依次访问优先队列中的每一项</td></tr><tr><td>__add__(s)</td><td>将两个优先队列合并</td></tr><tr><td>__eq__(s)</td><td>如果两个优先队列对应位置的项相等，两个优先队列相等</td></tr><tr><td>is_empty()</td><td>优先队列为空返回 False，否则返回 True</td></tr><tr><td>clear()</td><td>将优先队列清空</td></tr><tr><td>peak()</td><td>返回优先队列优先级最高项</td></tr><tr><td>pop()</td><td>删除优先队列优先级最高项并返回该项</td></tr><tr><td>add(item)</td><td>将元素添加优先队列中</td></tr></tbody></table><h1 id="优先队列的单链表实现"><a href="#优先队列的单链表实现" class="headerlink" title="优先队列的单链表实现"></a>优先队列的单链表实现</h1><p>基于队列结构，可以实现一个简单的优先队列。</p><p>节点类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data, later=None)</span>:</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.later = later  <span class="comment"># 指向下一个节点</span></span><br></pre></td></tr></table></figure><p>定义队列类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedPriorityQueue</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, source_collection=None)</span>:</span></span><br><span class="line">        self.head = self.last = <span class="keyword">None</span></span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> source_collection:</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> source_collection:</span><br><span class="line">                self.add(item)</span><br></pre></td></tr></table></figure><p>在 __init__() 中定义一个 size 用于表示当前队列中项的个数。实例变量 last 作为一个指针，用于指向队列的末尾项。</p><h2 id="len-s"><a href="#len-s" class="headerlink" title="__len__(s)"></a>__len__(s)</h2><p>优先队列类已经实现了一个实例变量 size ，只需返回这个实例变量即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.size</span><br></pre></td></tr></table></figure><h2 id="str-s"><a href="#str-s" class="headerlink" title="__str__(s)"></a>__str__(s)</h2><p>返回优先队列的字符串表示，将优先队列中个项的值封装成一个列表形式返回，优先队列较高的项在前。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'['</span> + <span class="string">', '</span>.join(map(str, self)) + <span class="string">']'</span></span><br></pre></td></tr></table></figure><h2 id="iter"><a href="#iter" class="headerlink" title="__iter__()"></a>__iter__()</h2><p>优先级从高到低，依次访问各项，返回各项的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">    probe = self.head</span><br><span class="line">    <span class="keyword">while</span> probe <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">yield</span> probe.data</span><br><span class="line">        probe = probe.later</span><br></pre></td></tr></table></figure><h2 id="add-s"><a href="#add-s" class="headerlink" title="__add__(s)"></a>__add__(s)</h2><p>两个优先队列相加。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> other:</span><br><span class="line">        self.add(item)</span><br><span class="line">    <span class="keyword">return</span> self</span><br></pre></td></tr></table></figure><h2 id="eq-s"><a href="#eq-s" class="headerlink" title="__eq__(s)"></a>__eq__(s)</h2><p>与 <code>==</code> 相同，比较优先两个队列中项是否相等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self <span class="keyword">is</span> other:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">if</span> type(self) != type(other) <span class="keyword">or</span> len(self) != len(other):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    other_iter = iter(other)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> self:</span><br><span class="line">        <span class="keyword">if</span> item != next(other_iter):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><h2 id="is-empty"><a href="#is-empty" class="headerlink" title="is_empty()"></a>is_empty()</h2><p>判断优先队列是否为空。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.size == <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h2><p>将优先队列全部清空</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.head = self.last = <span class="keyword">None</span></span><br><span class="line">    self.size = <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="peak"><a href="#peak" class="headerlink" title="peak()"></a>peak()</h2><p>返回优先队列优先级最高项但不删除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">peak</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.is_empty():</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">"当前队列为空！"</span>)</span><br><span class="line">    <span class="keyword">return</span> self.head.data</span><br></pre></td></tr></table></figure><h2 id="add-item"><a href="#add-item" class="headerlink" title="add(item)"></a>add(item)</h2><p>将元素添加优先队列中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, item)</span>:</span></span><br><span class="line">    <span class="comment"># 如果优先队列为空或者新的项优先级低于队列中所有项的优先级，将新项添加到队列末尾中</span></span><br><span class="line">    <span class="keyword">if</span> self.is_empty() <span class="keyword">or</span> item &gt;= self.last.data:</span><br><span class="line">        new_node = Node(item)</span><br><span class="line">        <span class="keyword">if</span> self.is_empty():</span><br><span class="line">            self.head = new_node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.last.later = new_node</span><br><span class="line">        self.last = new_node</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># 否则遍历所有项找到合适位置</span></span><br><span class="line">        probe = self.head</span><br><span class="line">        trailer = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">while</span> item &gt;= probe.data:</span><br><span class="line">            trailer = probe</span><br><span class="line">            probe = probe.later</span><br><span class="line">        new_node = Node(item, probe)</span><br><span class="line">        <span class="keyword">if</span> trailer <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            self.head = new_node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            trailer.later = new_node</span><br><span class="line">    self.size += <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h2><p>返回优先队列优先级最高项并删除。当优先队列只有唯一项并被删除后，队列末尾的外部指针 <code>last</code> 与头部指针 <code>head</code> 都指向 None。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.is_empty():</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">"当前栈为空！"</span>)</span><br><span class="line">    remove_item = self.head.data</span><br><span class="line">    self.head = self.head.later</span><br><span class="line">    <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        self.last = <span class="keyword">None</span></span><br><span class="line">    self.size -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> remove_item</span><br></pre></td></tr></table></figure><h2 id="基于队列的子类表示"><a href="#基于队列的子类表示" class="headerlink" title="基于队列的子类表示"></a>基于队列的子类表示</h2><p>上面实现了一个基本的与队列（基于单链表）类似的优先队列，完全可以实现一个继承<a href="/2017/08/23/Python-数据结构：队列.html/" title="队列">队列</a>的子类表示优先队列，唯一不同的是 <code>add(item)</code> 有所不同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedPriorityQueue</span><span class="params">(SinglyLinkedQueue)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, source_collection=None)</span>:</span></span><br><span class="line">        super().__init__(source_collection)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="comment"># 如果优先队列为空或者新的项优先级低于队列中所有项的优先级，将新项添加到队列末尾中</span></span><br><span class="line">        <span class="keyword">if</span> self.is_empty() <span class="keyword">or</span> item &gt;= self.last.data:</span><br><span class="line">            super().add(item)</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 否则遍历所有项找到合适位置</span></span><br><span class="line">            probe = self.head</span><br><span class="line">            trailer = <span class="keyword">None</span></span><br><span class="line">            <span class="keyword">while</span> item &gt;= probe.data:</span><br><span class="line">                trailer = probe</span><br><span class="line">                probe = probe.later</span><br><span class="line">            new_node = Node(item, probe)</span><br><span class="line">            <span class="keyword">if</span> trailer <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                self.head = new_node</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                trailer.later = new_node</span><br><span class="line">            self.size += <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="实例化优先队列"><a href="#实例化优先队列" class="headerlink" title="实例化优先队列"></a>实例化优先队列</h1><p>定义好一个优先队列类后，将其实例化有两种方式：无参和传递一个列表参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">linked_priority_queue = LinkedPriorityQueue()</span><br><span class="line">singly_priority_queue1 = LinkedPriorityQueue([<span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 优先队列 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 数据结构：队列</title>
      <link href="/2017/08/23/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E9%98%9F%E5%88%97.html/"/>
      <url>/2017/08/23/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E9%98%9F%E5%88%97.html/</url>
      <content type="html"><![CDATA[<p>队列是线性的集合，遵从先进先出（FIFO）的协议。</p><a id="more"></a><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/Python-数据结构：队列/queue.png"><p>队列操作与栈操作类似，区别在于队列的新数据在后端添加；队列通常用链表或者数组来实现。</p><h1 id="队列的主要方法"><a href="#队列的主要方法" class="headerlink" title="队列的主要方法"></a>队列的主要方法</h1><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>__len__(s)</td><td>返回队列中项的数目</td></tr><tr><td>__str__(s)</td><td>返回队列的字符串表示</td></tr><tr><td>__iter__()</td><td>从前到后依次访问队列中的每一项</td></tr><tr><td>__add__(s)</td><td>将两个队列合并</td></tr><tr><td>__eq__(s)</td><td>如果两个队列对应位置的项相等，两个队列相等</td></tr><tr><td>is_empty()</td><td>队列为空返回 False，否则返回 True</td></tr><tr><td>clear()</td><td>将队列清空</td></tr><tr><td>peak()</td><td>返回队列开始项</td></tr><tr><td>pop()</td><td>删除队列开始顶并返回该元素</td></tr><tr><td>add(item)</td><td>将元素添加队列末尾</td></tr></tbody></table><h1 id="队列的单链表实现"><a href="#队列的单链表实现" class="headerlink" title="队列的单链表实现"></a>队列的单链表实现</h1><p>借助于单链表结构，可以实现一个简单的队列。</p><p>节点类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data, later=None)</span>:</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.later = later  <span class="comment"># 指向下一个节点</span></span><br></pre></td></tr></table></figure><p>定义队列类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SinglyLinkedQueue</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, source_collection=None)</span>:</span></span><br><span class="line">        self.head = self.last = <span class="keyword">None</span></span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> source_collection:</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> source_collection:</span><br><span class="line">                self.add(item)</span><br></pre></td></tr></table></figure><p>在 __init__() 中定义一个 size 用于表示当前队列中项的个数。与栈的单链表实现不同的是，这里还定义了一个实例变量 last，用于指向队列的末尾项，在 <code>add(item)</code> 方法中很有用。</p><h2 id="len-s"><a href="#len-s" class="headerlink" title="__len__(s)"></a>__len__(s)</h2><p>队列类已经实现了一个实例变量 size ，只需返回这个实例变量即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.size</span><br></pre></td></tr></table></figure><h2 id="str-s"><a href="#str-s" class="headerlink" title="__str__(s)"></a>__str__(s)</h2><p>返回队列的字符串表示，将队列中个项的值封装成一个列表形式返回，队列开始项在前。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'['</span> + <span class="string">', '</span>.join(map(str, self)) + <span class="string">']'</span></span><br></pre></td></tr></table></figure><h2 id="iter"><a href="#iter" class="headerlink" title="__iter__()"></a>__iter__()</h2><p>从头到尾，依次访问各项，返回各项的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">    probe = self.head</span><br><span class="line">    <span class="keyword">while</span> probe <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">yield</span> probe.data</span><br><span class="line">        probe = probe.later</span><br></pre></td></tr></table></figure><h2 id="add-s"><a href="#add-s" class="headerlink" title="__add__(s)"></a>__add__(s)</h2><p>两个队列相加，依次将队列 s 的开头添加到另一个队列的末尾。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> other:</span><br><span class="line">        self.add(item)</span><br><span class="line">    <span class="keyword">return</span> self</span><br></pre></td></tr></table></figure><h2 id="eq-s"><a href="#eq-s" class="headerlink" title="__eq__(s)"></a>__eq__(s)</h2><p>与 <code>==</code> 相同，比较两个队列中项是否相等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self <span class="keyword">is</span> other:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">if</span> type(self) != type(other) <span class="keyword">or</span> len(self) != len(other):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    other_iter = iter(other)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> self:</span><br><span class="line">        <span class="keyword">if</span> item != next(other_iter):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><h2 id="is-empty"><a href="#is-empty" class="headerlink" title="is_empty()"></a>is_empty()</h2><p>判断队列是否为空。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.size == <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h2><p>将队列全部清空</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.head = self.last = <span class="keyword">None</span></span><br><span class="line">    self.size = <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="peak"><a href="#peak" class="headerlink" title="peak()"></a>peak()</h2><p>返回队列开始项但不删除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">peak</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.is_empty():</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">"当前栈为空！"</span>)</span><br><span class="line">    <span class="keyword">return</span> self.head.data</span><br></pre></td></tr></table></figure><h2 id="add-item"><a href="#add-item" class="headerlink" title="add(item)"></a>add(item)</h2><p>将一个新的项添加到队列末尾。这里为队列末尾添加了一个外部指针，用于对队列结构的快速访问。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, item)</span>:</span></span><br><span class="line">    new_node = Node(item)</span><br><span class="line">    <span class="keyword">if</span> self.is_empty():</span><br><span class="line">        self.head = new_node</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.last.later = new_node</span><br><span class="line">    self.last = new_node</span><br><span class="line">    self.size += <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h2><p>返回队列开始项并删除。当队列只有唯一项并被删除后，队列末尾的外部指针 <code>last</code> 与头部指针 <code>head</code> 都指向 None。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.is_empty():</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">"当前栈为空！"</span>)</span><br><span class="line">    remove_item = self.head.data</span><br><span class="line">    self.head = self.head.later</span><br><span class="line">    <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        self.last = <span class="keyword">None</span></span><br><span class="line">    self.size -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> remove_item</span><br></pre></td></tr></table></figure><h1 id="实例化队列"><a href="#实例化队列" class="headerlink" title="实例化队列"></a>实例化队列</h1><p>定义好一个队列类后，将其实例化有两种方式：无参和传递一个列表参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">singly_linked_queue = SinglyLinkedQueue()</span><br><span class="line">singly_linked_queue1 = SinglyLinkedQueue([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure><h1 id="队列的两种应用"><a href="#队列的两种应用" class="headerlink" title="队列的两种应用"></a>队列的两种应用</h1><ol><li>计算机模拟现实世界的行为；</li><li>轮询 CPU 调度。</li></ol>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 数据结构：栈</title>
      <link href="/2017/08/19/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%88.html/"/>
      <url>/2017/08/19/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%88.html/</url>
      <content type="html"><![CDATA[<p>栈是线性的集合，遵从后进先出（LIFO）的协议。</p><a id="more"></a><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/Python-数据结构：栈/stack.png"><p>栈中进和出的一端称为顶（top），放入栈顶和删除栈顶的操作分别为压入（push）和弹出（pop）。</p><h1 id="栈的主要方法"><a href="#栈的主要方法" class="headerlink" title="栈的主要方法"></a>栈的主要方法</h1><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>__len__(s)</td><td>返回栈中项的数目</td></tr><tr><td>__str__(s)</td><td>返回栈的字符串表示</td></tr><tr><td>__iter__()</td><td>从底部到顶部依次访问栈中的每一项</td></tr><tr><td>__add__(s)</td><td>将两个栈合并</td></tr><tr><td>__eq__(s)</td><td>如果两个栈对应位置的项相等，两个栈相等</td></tr><tr><td>is_empty()</td><td>栈为空返回 False，否则返回 True</td></tr><tr><td>clear()</td><td>将栈清空</td></tr><tr><td>peak()</td><td>返回栈顶</td></tr><tr><td>pop()</td><td>删除栈顶并返回该元素</td></tr><tr><td>push(item)</td><td>将元素压入栈顶</td></tr></tbody></table><h1 id="栈的单链表实现"><a href="#栈的单链表实现" class="headerlink" title="栈的单链表实现"></a>栈的单链表实现</h1><p>借助于单链表结构，可以实现一个简单的栈结构。</p><p>节点类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data, later=None)</span>:</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.later = later  <span class="comment"># 指向下一个节点</span></span><br></pre></td></tr></table></figure><p>定义栈类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SinglyLinkedStack</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, source_collection=None)</span>:</span></span><br><span class="line">        self.head = <span class="keyword">None</span></span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> source_collection:</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> source_collection:</span><br><span class="line">                self.push(item)</span><br></pre></td></tr></table></figure><p>在 __init__() 中定义一个 size 用于表示当前栈中项的个数。</p><h2 id="len-s"><a href="#len-s" class="headerlink" title="__len__(s)"></a>__len__(s)</h2><p>栈类已经实现了一个实例变量 size ，只需返回这个实例变量即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.size</span><br></pre></td></tr></table></figure><h2 id="str-s"><a href="#str-s" class="headerlink" title="__str__(s)"></a>__str__(s)</h2><p>返回栈的字符串表示，将栈中项的值封装成一个列表形式返回，栈顶项在前。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'['</span> + <span class="string">', '</span>.join(map(str, self)) + <span class="string">']'</span></span><br></pre></td></tr></table></figure><h2 id="iter"><a href="#iter" class="headerlink" title="__iter__()"></a>__iter__()</h2><p>从顶部到底部，依次访问各项，返回各项的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">    probe = self.head</span><br><span class="line">    <span class="keyword">while</span> probe <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">yield</span> probe.data</span><br><span class="line">        probe = probe.later</span><br></pre></td></tr></table></figure><h2 id="add-s"><a href="#add-s" class="headerlink" title="__add__(s)"></a>__add__(s)</h2><p>两个栈相加，依次对栈 s 进行 <code>pop()</code> 的项再 <code>push()</code>到另一个栈中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> other:</span><br><span class="line">        self.push(item)</span><br><span class="line">    <span class="keyword">return</span> self</span><br></pre></td></tr></table></figure><h2 id="eq-s"><a href="#eq-s" class="headerlink" title="__eq__(s)"></a>__eq__(s)</h2><p>与 <code>==</code> 相同，比较两个栈中项是否相等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self <span class="keyword">is</span> other:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">if</span> type(self) != type(other) <span class="keyword">or</span> len(self) != len(other):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    other_iter = iter(other)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> self:</span><br><span class="line">        <span class="keyword">if</span> item != next(other_iter):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><h2 id="is-empty"><a href="#is-empty" class="headerlink" title="is_empty()"></a>is_empty()</h2><p>判断栈是否为空。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.size == <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h2><p>将栈全部清空</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.head = <span class="keyword">None</span></span><br><span class="line">    self.size = <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="peak"><a href="#peak" class="headerlink" title="peak()"></a>peak()</h2><p>返回栈顶项但不删除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">peak</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.is_empty():</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">"当前栈为空！"</span>)</span><br><span class="line">    <span class="keyword">return</span> self.head.data</span><br></pre></td></tr></table></figure><h2 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h2><p>返回栈顶项并删除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.is_empty():</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">"当前栈为空！"</span>)</span><br><span class="line">    remove_item = self.head.data</span><br><span class="line">    self.head = self.head.later</span><br><span class="line">    self.size -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> remove_item</span><br></pre></td></tr></table></figure><h2 id="push-item"><a href="#push-item" class="headerlink" title="push(item)"></a>push(item)</h2><p>将一个新的项压入到栈顶。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, item)</span>:</span></span><br><span class="line">    self.head = Node(item, self.head)</span><br><span class="line">    self.size += <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="实例化栈"><a href="#实例化栈" class="headerlink" title="实例化栈"></a>实例化栈</h1><p>定义好一个栈类后，将其实例化有两种方式：无参和传递一个列表参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">singly_linked_stack = SinglyLinkedStack()</span><br><span class="line">singly_linked_stack1 = SinglyLinkedStack([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure><h1 id="栈的三种应用"><a href="#栈的三种应用" class="headerlink" title="栈的三种应用"></a>栈的三种应用</h1><ol><li>计算算术表达式；</li><li>实现回溯算法；</li><li>内存管理。</li></ol>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 数据结构：双链表</title>
      <link href="/2017/08/13/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E5%8F%8C%E9%93%BE%E8%A1%A8.html/"/>
      <url>/2017/08/13/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E5%8F%8C%E9%93%BE%E8%A1%A8.html/</url>
      <content type="html"><![CDATA[<p>单链表包含了两个方向的链接，能从给定节点移动到前一个节点且能直接移动到最后一个节点。<br><a id="more"></a><br><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/Python-数据结构：双链表/doublylinkedlist.png"></p><h1 id="双链表节点表示"><a href="#双链表节点表示" class="headerlink" title="双链表节点表示"></a>双链表节点表示</h1><p>要表示一个双链表，最基本的元素即是节点，每个节点都含有节点自身的数据、指向上一个节点的链接和指向下一个节点的链接。使用一个节点类表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data, later=None)</span>:</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.previous = previous</span><br><span class="line">        self.later = later</span><br></pre></td></tr></table></figure><h1 id="双链表操作"><a href="#双链表操作" class="headerlink" title="双链表操作"></a>双链表操作</h1><p>当定义好节点后，就可以开始实现一个双链表了。定义一个双链表类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SinglyLinkedList</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, source_collection=None)</span>:</span></span><br><span class="line">        self.head = self.last = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">if</span> source_collection:</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> source_collection:</span><br><span class="line">                self.insert_end(item)</span><br></pre></td></tr></table></figure><h2 id="链表的字符串表示"><a href="#链表的字符串表示" class="headerlink" title="链表的字符串表示"></a>链表的字符串表示</h2><p>将链表中项的值封装成一个列表形式返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'['</span> + <span class="string">', '</span>.join(map(str, self)) + <span class="string">']'</span></span><br></pre></td></tr></table></figure><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><p>这里迭代实际上是使用一个临时的指针变量进行了一次遍历；指针变量初始化指向 head 开始处，在遍历的过程中，指针一次指向 head 的每一个后节点，直到指向 None 结束。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">    probe = self.head</span><br><span class="line">    <span class="keyword">while</span> probe <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">yield</span> probe.data</span><br><span class="line">        probe = probe.later</span><br></pre></td></tr></table></figure><p>遍历在时间上是线性的，不需要额外的内存。</p><h2 id="双链表大小"><a href="#双链表大小" class="headerlink" title="双链表大小"></a>双链表大小</h2><p>计算单链表的大小（节点数目）基于遍历，只需在遍历每个节点时进行计数即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">size</span><span class="params">(self)</span>:</span></span><br><span class="line">    counter = <span class="number">0</span></span><br><span class="line">    probe = self.head</span><br><span class="line">    <span class="keyword">while</span> probe <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">        probe = probe.later</span><br><span class="line">    <span class="keyword">return</span> counter</span><br></pre></td></tr></table></figure><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p>这里的搜索为顺序搜索，与遍历类似，从第一个节点开始沿着链接向后搜索。</p><ol><li><p>使用数据值来搜索匹配每个节点的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sequential_search_with_data</span><span class="params">(self, target)</span>:</span></span><br><span class="line">    probe = self.head</span><br><span class="line">    <span class="keyword">while</span> probe <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> target != probe.data:</span><br><span class="line">        probe = probe.later</span><br><span class="line">    <span class="keyword">if</span> probe <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span>  <span class="comment"># target 不在双链表中</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span>  <span class="comment"># target 在双链表中</span></span><br></pre></td></tr></table></figure></li><li><p>根据提供的索引顺序访问特定项：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sequential_search_with_index</span><span class="params">(self, index)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt;= self.size():</span><br><span class="line">        <span class="keyword">raise</span> IndexError(<span class="string">'索引超出范围！'</span>)</span><br><span class="line">    probe = self.head</span><br><span class="line">    <span class="keyword">while</span> index &gt; <span class="number">0</span>:</span><br><span class="line">        probe = probe.later</span><br><span class="line">        index -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> probe.data</span><br></pre></td></tr></table></figure></li></ol><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><p>替换基于搜索，搜索到便替换，也有两种方式。</p><ol><li><p>基于数据值的匹配后替换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_with_data</span><span class="params">(self, target, new_item)</span>:</span></span><br><span class="line">    probe = self.head</span><br><span class="line">    <span class="keyword">while</span> probe <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> target != probe.data:</span><br><span class="line">        probe = probe.later</span><br><span class="line">    <span class="keyword">if</span> probe <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        probe.data = new_item</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span>  <span class="comment"># 替换成功</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span>  <span class="comment"># 目标项不存在</span></span><br></pre></td></tr></table></figure></li><li><p>根据提供的索引来替换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_with_index</span><span class="params">(self, index, new_item)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt;= self.size():</span><br><span class="line">        <span class="keyword">raise</span> IndexError(<span class="string">'索引超出范围！'</span>)</span><br><span class="line">    probe = self.head</span><br><span class="line">    <span class="keyword">while</span> index &gt; <span class="number">0</span>:</span><br><span class="line">        probe = probe.later</span><br><span class="line">        index -= <span class="number">1</span></span><br><span class="line">    probe.data = new_item</span><br></pre></td></tr></table></figure></li></ol><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>插入有三种情况：在开始处插入，在末尾插入，在任意位置插入。</p><ol><li><p>在开始处插入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_pre</span><span class="params">(self, data)</span>:</span></span><br><span class="line">    new_node = TwoWayNode(data, later=self.head)</span><br><span class="line">    <span class="keyword">if</span> self.head:  <span class="comment"># 链表不为空</span></span><br><span class="line">        self.head.previous = new_node</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># 链表为空</span></span><br><span class="line">        self.last = new_node</span><br><span class="line">    self.head = new_node</span><br></pre></td></tr></table></figure></li><li><p>在末尾插入：此时有两种情况，head 为 None 和不为 None。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_end</span><span class="params">(self, data)</span>:</span></span><br><span class="line">    new_node = TwoWayNode(data)</span><br><span class="line">    <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="keyword">None</span>:  <span class="comment"># head 指针为 None</span></span><br><span class="line">        self.head = new_node</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># head 指针不为 None</span></span><br><span class="line">        self.last.later = new_node</span><br><span class="line">        new_node.previous = self.last</span><br><span class="line">    self.last = new_node</span><br></pre></td></tr></table></figure></li><li><p>在任意位置插入：需要考虑插入位置是否在链表的范围内。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, index, data)</span>:</span></span><br><span class="line">    length = self.size()</span><br><span class="line">    <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt; length:</span><br><span class="line">        <span class="keyword">raise</span> IndexError(<span class="string">'索引超出范围！'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> index == <span class="number">0</span>:  <span class="comment"># 在开始处插入</span></span><br><span class="line">        self.insert_pre(data)</span><br><span class="line">    <span class="keyword">elif</span> index == length:  <span class="comment"># 在末尾插入</span></span><br><span class="line">        new_node = TwoWayNode(data)</span><br><span class="line">        self.last.later = new_node</span><br><span class="line">        new_node.previous = self.last</span><br><span class="line">        self.last = new_node</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># index &gt; 0</span></span><br><span class="line">        probe = self.head</span><br><span class="line">        <span class="keyword">while</span> index &gt; <span class="number">1</span> <span class="keyword">and</span> probe.later <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:  <span class="comment"># 如果 index 超出了链表结构的末尾就在末尾插入</span></span><br><span class="line">            probe = probe.later</span><br><span class="line">            index -= <span class="number">1</span></span><br><span class="line">        new_node = TwoWayNode(data, previous=probe, later=probe.later)</span><br><span class="line">        probe.later.previous = new_node</span><br><span class="line">        probe.later = new_node</span><br></pre></td></tr></table></figure></li></ol><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>删除有三种情况：在开始处删除，在末尾删除，在任意位置删除。三种情况都需要考虑链表是否为 None。</p><ol><li><p>在开始处删除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_pre</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">'链表为空'</span>)</span><br><span class="line">    </span><br><span class="line">    remove_item = self.head.data</span><br><span class="line">    <span class="keyword">if</span> self.head.later <span class="keyword">is</span> <span class="keyword">None</span>:  <span class="comment"># 只有一个节点</span></span><br><span class="line">        self.head = self.last = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.head = self.head.later</span><br><span class="line">        self.head.previous = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">return</span> remove_item</span><br></pre></td></tr></table></figure></li><li><p>在末尾删除：此时有两种情况，head 只有一个节点，和多个节点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_end</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">'链表为空'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self.head.later <span class="keyword">is</span> <span class="keyword">None</span>:  <span class="comment"># 只有一个节点</span></span><br><span class="line">        remove_item = self.head.data</span><br><span class="line">        self.head = self.last = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># 含有多个节点</span></span><br><span class="line">        remove_item = self.last.data</span><br><span class="line">        self.last = self.last.previous</span><br><span class="line">        self.last.later = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">return</span> remove_item</span><br></pre></td></tr></table></figure></li><li><p>在任意位置删除：此时不仅要考虑 head 有多少节点，好要考虑插入位置是否在单链表的范围内。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, index)</span>:</span></span><br><span class="line">    length = self.size()</span><br><span class="line">    <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">'链表为空'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt;= length:</span><br><span class="line">        <span class="keyword">raise</span> IndexError(<span class="string">'索引超出范围！'</span>)</span><br><span class="line">    <span class="keyword">elif</span> index == <span class="number">0</span>:  <span class="comment"># 在开始处删除</span></span><br><span class="line">        remove_item = self.delete_pre()</span><br><span class="line">    <span class="keyword">elif</span> index == length - <span class="number">1</span>:  <span class="comment"># 在末尾处删除</span></span><br><span class="line">        remove_item = self.delete_end()</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># index &gt; 0</span></span><br><span class="line">        probe = self.head</span><br><span class="line">        <span class="keyword">while</span> index &gt; <span class="number">1</span> <span class="keyword">and</span> probe.later.later <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            probe = probe.later</span><br><span class="line">            index -= <span class="number">1</span></span><br><span class="line">        remove_item = probe.later.data</span><br><span class="line">        probe.later = probe.later.later</span><br><span class="line">        probe.later.later.previous = probe</span><br><span class="line">    <span class="keyword">return</span> remove_item</span><br></pre></td></tr></table></figure></li></ol><h2 id="是否为空"><a href="#是否为空" class="headerlink" title="是否为空"></a>是否为空</h2><p>判断是否为空很简单，只需判断链表第一个节点是否存在数据值即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span> <span class="keyword">if</span> self.head <span class="keyword">else</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 数据结构：单链表</title>
      <link href="/2017/08/11/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E5%8D%95%E9%93%BE%E8%A1%A8.html/"/>
      <url>/2017/08/11/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E5%8D%95%E9%93%BE%E8%A1%A8.html/</url>
      <content type="html"><![CDATA[<p>单链表是链表的一种，其链接方向是单向的，对链表的访问要通过从头部开始，依序往下读取。<br><a id="more"></a><br><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/Python-数据结构：单链表/singlylinkdedlist.png"></p><ol><li>在单链表中很容易访问一个项的后一项，但并不容易访问前一项。</li><li>链表在内存中的表示使用非连续性内存，即只需给定每个项的地址和链接，便能在内存中任一位置找到。</li></ol><h1 id="单链表节点表示"><a href="#单链表节点表示" class="headerlink" title="单链表节点表示"></a>单链表节点表示</h1><p>要表示一个单链表，最基本的元素即是节点，每个节点都含有节点自身的数据和指向下一个节点的链接。使用一个节点类表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data, later=None)</span>:</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.later = later</span><br></pre></td></tr></table></figure><h1 id="单链表操作"><a href="#单链表操作" class="headerlink" title="单链表操作"></a>单链表操作</h1><p>当定义好节点后，就可以开始实现一个单链表了。定义一个单链表类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SinglyLinkedList</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, source_collection=None)</span>:</span></span><br><span class="line">        self.head = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">if</span> source_collection:</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> source_collection:</span><br><span class="line">                self.insert_end(item)</span><br></pre></td></tr></table></figure><h2 id="链表的字符串表示"><a href="#链表的字符串表示" class="headerlink" title="链表的字符串表示"></a>链表的字符串表示</h2><p>将链表中项的值封装成一个列表形式返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'['</span> + <span class="string">', '</span>.join(map(str, self)) + <span class="string">']'</span></span><br></pre></td></tr></table></figure><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><p>这里迭代实际上是使用一个临时的指针变量进行了一次遍历；指针变量初始化指向 head 开始处，在遍历的过程中，指针一次指向 head 的每一个后节点，直到指向 None 结束。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">    probe = self.head</span><br><span class="line">    <span class="keyword">while</span> probe <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">yield</span> probe.data</span><br><span class="line">        probe = probe.later</span><br></pre></td></tr></table></figure><p>遍历在时间上是线性的，不需要额外的内存。</p><h2 id="单链表大小"><a href="#单链表大小" class="headerlink" title="单链表大小"></a>单链表大小</h2><p>计算单链表的大小（节点数目）基于遍历，只需在遍历每个节点时进行计数即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">size</span><span class="params">(self)</span>:</span></span><br><span class="line">    counter = <span class="number">0</span></span><br><span class="line">    probe = self.head</span><br><span class="line">    <span class="keyword">while</span> probe <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">        probe = probe.later</span><br><span class="line">    <span class="keyword">return</span> counter</span><br></pre></td></tr></table></figure><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p>这里的搜索为顺序搜索，与遍历类似，从第一个节点开始沿着链接向后搜索。因为单链表的结构是顺序的并且每个节点都含有本身的数据，因此有两种方式来实现搜索。</p><ol><li><p>使用数据值来搜索匹配每个节点的数据值：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sequential_search_with_data</span><span class="params">(self, target)</span>:</span></span><br><span class="line">    probe = self.head</span><br><span class="line">    <span class="keyword">while</span> probe <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> target != probe.data:</span><br><span class="line">        probe = probe.later</span><br><span class="line">    <span class="keyword">if</span> probe <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span>  <span class="comment"># target 不在单链表中</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span>  <span class="comment"># target 在单链表中</span></span><br></pre></td></tr></table></figure></li><li><p>根据提供的索引顺序访问特定项：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sequential_search_with_index</span><span class="params">(self, index)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> index &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> IndexError(<span class="string">'索引超出范围！'</span>)</span><br><span class="line">    probe = self.head</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> index &gt; <span class="number">0</span>:</span><br><span class="line">            probe = probe.later</span><br><span class="line">            index -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> probe.data</span><br><span class="line">    <span class="keyword">except</span> AttributeError:</span><br><span class="line">        <span class="keyword">raise</span> IndexError(<span class="string">'索引超出范围！'</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><p>替换基于搜索，搜索到便替换，也有两种方式。</p><ol><li><p>基于数据值的匹配后替换：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_with_data</span><span class="params">(self, target, new_item)</span>:</span></span><br><span class="line">    probe = self.head</span><br><span class="line">    <span class="keyword">while</span> probe <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> target != probe.data:</span><br><span class="line">        probe = probe.later</span><br><span class="line">    <span class="keyword">if</span> probe <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        probe.data = new_item</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span>  <span class="comment"># 替换成功</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span>  <span class="comment"># 目标项不存在</span></span><br></pre></td></tr></table></figure></li><li><p>根据提供的索引来替换：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_with_index</span><span class="params">(self, index, new_item)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> index &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> IndexError(<span class="string">'索引超出范围！'</span>)</span><br><span class="line">    probe = self.head</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> index &gt; <span class="number">0</span>:</span><br><span class="line">            probe = probe.later</span><br><span class="line">            index -= <span class="number">1</span></span><br><span class="line">        probe.data = new_item</span><br><span class="line">    <span class="keyword">except</span> AttributeError:</span><br><span class="line">        <span class="keyword">raise</span> IndexError(<span class="string">'索引超出范围！'</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>插入有三种情况：在开始处插入，在末尾插入，在任意位置插入。</p><ol><li><p>在开始处插入。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_pre</span><span class="params">(self, data)</span>:</span></span><br><span class="line">    self.head = Node(data, self.head)</span><br></pre></td></tr></table></figure></li><li><p>在末尾插入：此时有两种情况，head 为 None 和不为 None，不为 None 时需要搜索到最后一项。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_end</span><span class="params">(self, data)</span>:</span></span><br><span class="line">    new_node = Node(data)</span><br><span class="line">    <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="keyword">None</span>:  <span class="comment"># head 指针为 None</span></span><br><span class="line">        self.head = new_node</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># head 指针不为 None</span></span><br><span class="line">        probe = self.head</span><br><span class="line">        <span class="keyword">while</span> probe.later <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            probe = probe.later</span><br><span class="line">        probe.later = new_node</span><br></pre></td></tr></table></figure></li><li><p>在任意位置插入：此时不仅要考虑 head 是否为 None，还要考虑插入位置是否在单链表的范围内。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, index, data)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> index &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> IndexError(<span class="string">'索引超出范围！'</span>)</span><br><span class="line">     <span class="keyword">elif</span> index == <span class="number">0</span> <span class="keyword">or</span> self.head <span class="keyword">is</span> <span class="keyword">None</span>:  <span class="comment"># 在开始处插入</span></span><br><span class="line">         self.head = Node(data, self.head)</span><br><span class="line">     <span class="keyword">else</span>:  <span class="comment"># index &gt; 0</span></span><br><span class="line">         probe = self.head</span><br><span class="line">         <span class="keyword">while</span> index &gt; <span class="number">1</span> <span class="keyword">and</span> probe.later <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:  <span class="comment"># 如果 index 超出了链表结构的末尾就在末尾插入</span></span><br><span class="line">             probe = probe.later</span><br><span class="line">             index -= <span class="number">1</span></span><br><span class="line">         <span class="keyword">if</span> index &gt; <span class="number">1</span>:  <span class="comment"># 超出范围</span></span><br><span class="line">             <span class="keyword">raise</span> IndexError(<span class="string">'索引超出范围！'</span>)</span><br><span class="line">         probe.later = Node(data, probe.later)</span><br></pre></td></tr></table></figure></li></ol><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>删除有三种情况：在开始处删除，在末尾删除，在任意位置删除。三种情况都需要考虑 head 是否为 None。</p><ol><li><p>在开始处删除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_pre</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">'链表为空'</span>)</span><br><span class="line">    </span><br><span class="line">    remove_item = self.head.data</span><br><span class="line">    self.head = self.head.later</span><br><span class="line">    <span class="keyword">return</span> remove_item</span><br></pre></td></tr></table></figure></li><li><p>在末尾删除：此时有两种情况，head 只有一个节点，和多个节点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_end</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">'链表为空'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> self.head.later <span class="keyword">is</span> <span class="keyword">None</span>:  <span class="comment"># 只有一个节点</span></span><br><span class="line">        remove_item = self.head.data</span><br><span class="line">        self.head = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># 含有多个节点</span></span><br><span class="line">        probe = self.head</span><br><span class="line">        <span class="keyword">while</span> probe.later.later <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            probe = probe.later</span><br><span class="line">        remove_item = probe.later.data</span><br><span class="line">        probe.later = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">return</span> remove_item</span><br></pre></td></tr></table></figure></li><li><p>在任意位置删除：此时不仅要考虑 head 有多少节点，好要考虑插入位置是否在单链表的范围内。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, index)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">'链表为空'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> index &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> IndexError(<span class="string">'索引超出范围！'</span>)</span><br><span class="line">    <span class="keyword">elif</span> index == <span class="number">0</span> <span class="keyword">or</span> self.head.later <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        remove_item = self.head.data</span><br><span class="line">        self.head = self.head.later</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># index &gt; 0</span></span><br><span class="line">        probe = self.head</span><br><span class="line">        <span class="keyword">while</span> index &gt; <span class="number">1</span> <span class="keyword">and</span> probe.later.later <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>: </span><br><span class="line">            probe = probe.later</span><br><span class="line">            index -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> index &gt; <span class="number">1</span>:  <span class="comment"># 超出范围</span></span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">'索引超出范围！'</span>)</span><br><span class="line">        remove_item = probe.later.data</span><br><span class="line">        probe.later = probe.later.later</span><br><span class="line">    <span class="keyword">return</span> remove_item</span><br></pre></td></tr></table></figure></li></ol><h2 id="是否为空"><a href="#是否为空" class="headerlink" title="是否为空"></a>是否为空</h2><p>判断是否为空很简单，只需判断 head 第一个节点是否存在数据值即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span> <span class="keyword">if</span> self.head <span class="keyword">else</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>上述操作中，遍历是线性的，基于遍历的操作同样是线性的；只有在开始处插入、在开始处删除和判断是否为空是常数的。</p>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法：无向图</title>
      <link href="/2017/07/30/%E7%AE%97%E6%B3%95%EF%BC%9A%E6%97%A0%E5%90%91%E5%9B%BE.html/"/>
      <url>/2017/07/30/%E7%AE%97%E6%B3%95%EF%BC%9A%E6%97%A0%E5%90%91%E5%9B%BE.html/</url>
      <content type="html"><![CDATA[<p>图是由一组顶点和一组能够将两个顶点相连的边组成的。边有方向的图称为有向图，没有方向的图称为无向图。<br><a id="more"></a></p><blockquote><p>本文主要实现了无向图的相关结构。</p></blockquote><h1 id="无向图基本结构"><a href="#无向图基本结构" class="headerlink" title="无向图基本结构"></a>无向图基本结构</h1><ol><li>创建一个含有 v 个节点但不含边的图；</li><li>返回节点个数；</li><li>返回边数；</li><li>向图中添加一条边；</li><li>验证图中是否有一条边 v-w；</li><li>返回图中一个节点的所有邻边；</li><li>图的字符显示。</li></ol><h1 id="图的表示"><a href="#图的表示" class="headerlink" title="图的表示"></a>图的表示</h1><p>图可使用邻接矩阵和邻接表表示。根据图的密度（指已经连接的节点对占所有可能被连接的节点的比例）不同，一般稠密图使用邻接矩阵表示更好，稀疏图使用邻接表表示更好。</p><ol><li><p>邻接矩阵</p><p>使用一个 n 乘 n 的布尔矩阵, 当节点 v 和节点 w 之间有相连接的边时，定义 v 行 w 列的元素值为 true （图为无向图时 w 行 v 列的元素值也为 true）否则为false。</p></li><li><p>邻接表</p><p>使用一个以节点为索引的序列数组，其中每个元素都是和该节点相邻的节点列表。</p></li></ol><p>在图的常用两种操作中：1. 判断两个给定的顶点之间是否有一条边，2. 找出一个给定顶点的所有相邻节点。邻接矩阵更好的支持第一种操作，只需要常数时间，邻接表需要的时间和列表的长度成线性关系；相反，邻接表相对于邻接矩阵更好的支持第二种操作。</p><h2 id="Python-实现"><a href="#Python-实现" class="headerlink" title="Python 实现"></a>Python 实现</h2><h3 id="邻接矩阵表示"><a href="#邻接矩阵表示" class="headerlink" title="邻接矩阵表示"></a>邻接矩阵表示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DenseGraph</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n, directed)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        g 初始化为 n*n 的布尔矩阵, 每一个 g[i][j] 均为 False, 表示没有任何边</span></span><br><span class="line"><span class="string">        :param n: 节点数</span></span><br><span class="line"><span class="string">        :param directed: True 表示有向图，False 表示无向图</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">assert</span> n &gt; <span class="number">0</span></span><br><span class="line">        self.n = n</span><br><span class="line">        self.m = <span class="number">0</span>  <span class="comment"># 边数，初始化没有任何边</span></span><br><span class="line">        self.directed = directed</span><br><span class="line">        self.g = [[<span class="keyword">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_v</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""返回节点个数"""</span></span><br><span class="line">        <span class="keyword">return</span> self.n</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_e</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""返回边数"""</span></span><br><span class="line">        <span class="keyword">return</span> self.m</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_edge</span><span class="params">(self, v, w)</span>:</span></span><br><span class="line">        <span class="string">"""向图中添加一个边"""</span></span><br><span class="line">        <span class="keyword">assert</span> v <span class="keyword">in</span> range(self.n)</span><br><span class="line">        <span class="keyword">assert</span> w <span class="keyword">in</span> range(self.n)</span><br><span class="line">        <span class="keyword">if</span> self.has_edge(v, w):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        self.g[v][w] = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果为无向图</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.directed:</span><br><span class="line">            self.g[w][v] = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">        self.m += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_edge</span><span class="params">(self, v, w)</span>:</span></span><br><span class="line">        <span class="string">"""验证图中是否有从 v 到 w 的边"""</span></span><br><span class="line">        <span class="keyword">assert</span> v <span class="keyword">in</span> range(self.n)</span><br><span class="line">        <span class="keyword">assert</span> w <span class="keyword">in</span> range(self.n)</span><br><span class="line">        <span class="keyword">return</span> self.g[v][w]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">adj</span><span class="params">(self, v)</span>:</span></span><br><span class="line">        <span class="string">"""返回图中一个节点的所有邻边"""</span></span><br><span class="line">        <span class="keyword">return</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> range(self.n) <span class="keyword">if</span> self.g[v][i]]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""显示图的信息"""</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.g:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">                print(j, end=<span class="string">'\t'</span>)</span><br><span class="line">            print()</span><br></pre></td></tr></table></figure><h3 id="邻接表表示"><a href="#邻接表表示" class="headerlink" title="邻接表表示"></a>邻接表表示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SparseGraph</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n, directed)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        g 初始化为 n 个空的 list, 表示每一个 g[i] 都为空, 即没有任何边</span></span><br><span class="line"><span class="string">        :param n: 节点数</span></span><br><span class="line"><span class="string">        :param directed: True 表示有向图，False 表示无向图</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">assert</span> n &gt; <span class="number">0</span></span><br><span class="line">        self.n = n</span><br><span class="line">        self.m = <span class="number">0</span>  <span class="comment"># 边数，初始化没有任何边</span></span><br><span class="line">        self.directed = directed</span><br><span class="line">        self.g = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_v</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""返回节点个数"""</span></span><br><span class="line">        <span class="keyword">return</span> self.n</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_e</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""返回边数"""</span></span><br><span class="line">        <span class="keyword">return</span> self.m</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_edge</span><span class="params">(self, v, w)</span>:</span></span><br><span class="line">        <span class="string">"""向图中添加一个边"""</span></span><br><span class="line">        <span class="keyword">assert</span> v <span class="keyword">in</span> range(self.n)</span><br><span class="line">        <span class="keyword">assert</span> w <span class="keyword">in</span> range(self.n)</span><br><span class="line">        self.g[v].append(w)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> v != w <span class="keyword">and</span> <span class="keyword">not</span> self.directed:</span><br><span class="line">            self.g[w].append(v)</span><br><span class="line"></span><br><span class="line">        self.m += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_edge</span><span class="params">(self, v, w)</span>:</span></span><br><span class="line">        <span class="string">"""验证图中是否有从 v 到 w 的边"""</span></span><br><span class="line">        <span class="keyword">assert</span> v <span class="keyword">in</span> range(self.n)</span><br><span class="line">        <span class="keyword">assert</span> w <span class="keyword">in</span> range(self.n)</span><br><span class="line">        <span class="keyword">if</span> w <span class="keyword">in</span> self.g[v]:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">adj</span><span class="params">(self, v)</span>:</span></span><br><span class="line">        <span class="string">"""返回图中一个节点的所有邻边"""</span></span><br><span class="line">        <span class="keyword">return</span> self.g[v]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""显示图的信息"""</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.g:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">                print(j, end=<span class="string">'\t'</span>)</span><br><span class="line">            print()</span><br></pre></td></tr></table></figure><h2 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h2><h3 id="邻接矩阵表示-1"><a href="#邻接矩阵表示-1" class="headerlink" title="邻接矩阵表示"></a>邻接矩阵表示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DenseGraph</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;  <span class="comment">// 节点数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> m;  <span class="comment">// 边数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> directed;  <span class="comment">// 是否为有向图</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[][] g;  <span class="comment">// 图的具体数据</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DenseGraph</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">boolean</span> directed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">        <span class="keyword">this</span>.m = <span class="number">0</span>;  <span class="comment">// 初始化没有任何边</span></span><br><span class="line">        <span class="keyword">this</span>.directed = directed;  <span class="comment">// true 表示有向图，false 表示无向图</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// g 初始化为 n*n 的布尔矩阵, 每一个 g[i][j] 均为 false, 表示没有任何边</span></span><br><span class="line">        <span class="comment">// false为 boolean型变量的默认值</span></span><br><span class="line">        <span class="keyword">this</span>.g = <span class="keyword">new</span> <span class="keyword">boolean</span>[n][n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回节点个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回边数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getE</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向图中添加一个边</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> v &gt;= <span class="number">0</span> &amp;&amp; v &lt; n;</span><br><span class="line">        <span class="keyword">assert</span> w &gt;= <span class="number">0</span> &amp;&amp; w &lt; n;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hasEdge(v, w)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        g[v][w] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果为无向图</span></span><br><span class="line">        <span class="keyword">if</span> (!directed) g[w][v] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        m ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证图中是否有从 v 到 w 的边</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasEdge</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> v &gt;= <span class="number">0</span> &amp;&amp; v &lt; n;</span><br><span class="line">        <span class="keyword">assert</span> w &gt;= <span class="number">0</span> &amp;&amp; w &lt; n;</span><br><span class="line">        <span class="keyword">return</span> g[v][w];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回图中一个节点的所有邻边</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Integer&gt; <span class="title">adj</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> v &gt;= <span class="number">0</span> &amp;&amp; v &lt; n;</span><br><span class="line">        Vector&lt;Integer&gt; adjV = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">if</span> (g[v][i])</span><br><span class="line">                adjV.add(i);</span><br><span class="line">        <span class="keyword">return</span> adjV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示图的信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                System.out.print(g[i][j] + <span class="string">"\t"</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="邻接表表示-1"><a href="#邻接表表示-1" class="headerlink" title="邻接表表示"></a>邻接表表示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparseGraph</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;  <span class="comment">// 节点数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> m;  <span class="comment">// 边数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> directed;  <span class="comment">// 是否为有向图</span></span><br><span class="line">    <span class="keyword">private</span> Vector&lt;Integer&gt;[] g;  <span class="comment">// 图的具体数据</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SparseGraph</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">boolean</span> directed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">        <span class="keyword">this</span>.m = <span class="number">0</span>;  <span class="comment">// 初始化没有任何边</span></span><br><span class="line">        <span class="keyword">this</span>.directed = directed;  <span class="comment">// true 表示有向图，false 表示无向图</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// g 初始化为 n 个空的 vector, 表示每一个 g[i] 都为空, 即没有任何边</span></span><br><span class="line">        <span class="keyword">this</span>.g = (Vector&lt;Integer&gt;[]) <span class="keyword">new</span> Vector[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            g[i] = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回节点个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回边数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getE</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向图中添加一个边</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> v &gt;= <span class="number">0</span> &amp;&amp; v &lt; n;</span><br><span class="line">        <span class="keyword">assert</span> w &gt;= <span class="number">0</span> &amp;&amp; w &lt; n;</span><br><span class="line">        g[v].add(w);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果为无向图</span></span><br><span class="line">        <span class="keyword">if</span> (v != w &amp;&amp; !directed)</span><br><span class="line">            g[w].add(v);</span><br><span class="line"></span><br><span class="line">        m ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证图中是否有从 v 到 w 的边</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasEdge</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> v &gt;= <span class="number">0</span> &amp;&amp; v &lt; n;</span><br><span class="line">        <span class="keyword">assert</span> w &gt;= <span class="number">0</span> &amp;&amp; w &lt; n;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g[v].size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (g[v].elementAt(i) == w)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回图中一个节点的所有邻边</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Integer&gt; <span class="title">adj</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> v &gt;= <span class="number">0</span> &amp;&amp; v &lt; n;</span><br><span class="line">        <span class="keyword">return</span> g[v];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示图的信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; g[i].size(); j++)</span><br><span class="line">                System.out.print(g[i].elementAt(j) + <span class="string">"\t"</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h1><p>从图的某个顶点出发，访问此顶点，然后选择一个与顶点相邻且没被访问过的节点访问，再从此节点出发选择一个与其相邻且未被访问的节点进行访问，依次继续。如果当前被访问过的节点的所有邻接节点都已被访问，则退回到已被访问的节点序列中最后一个拥有未被访问的相邻节点的节点，再出发按同样的方法向前遍历，直到图中所有节点都被访问。</p><p>图的深度优先遍历的两个应用：求连通分量和寻路。</p><h2 id="连通分量"><a href="#连通分量" class="headerlink" title="连通分量"></a>连通分量</h2><p>无向图的一个极大连通子图称为一个连通分量。可以通过深度优先遍历求得联通分量。</p><h3 id="Python-实现-1"><a href="#Python-实现-1" class="headerlink" title="Python 实现"></a>Python 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Components</span>:</span></span><br><span class="line">    <span class="string">"""求无向图的连通分量"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, graph)</span>:</span></span><br><span class="line">        self.G = graph  <span class="comment">#图的引用</span></span><br><span class="line">        self.visited = [<span class="keyword">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(self.G.get_v())]  <span class="comment">#记录 dfs 的过程中节点是否被访问</span></span><br><span class="line">        self.count = <span class="number">0</span>  <span class="comment">#记录连通分量个数</span></span><br><span class="line">        self.id = [<span class="number">-1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(self.G.get_v())]  <span class="comment">#每个节点所对应的连通分量标记</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 求图的连通分量</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.G.get_v()):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.visited[i]:</span><br><span class="line">                self.dfs(i)</span><br><span class="line">                self.count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, v)</span>:</span></span><br><span class="line">        <span class="string">"""图的深度优先遍历"""</span></span><br><span class="line">        self.visited[v] = <span class="keyword">True</span></span><br><span class="line">        self.id[v] = self.count</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.G.adj(v):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.visited[i]:</span><br><span class="line">                self.dfs(i)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_count</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""返回图的连通分量个数"""</span></span><br><span class="line">        <span class="keyword">return</span> self.count</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_connected</span><span class="params">(self, v, w)</span>:</span></span><br><span class="line">        <span class="string">"""查询点 v 和点 w 是否连通"""</span></span><br><span class="line">        <span class="keyword">assert</span> v <span class="keyword">in</span> range(self.G.get_v())</span><br><span class="line">        <span class="keyword">assert</span> w <span class="keyword">in</span> range(self.G.get_v())</span><br><span class="line">        <span class="keyword">return</span> self.id[v] == self.id[w]</span><br></pre></td></tr></table></figure><h3 id="Java-实现-1"><a href="#Java-实现-1" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Components</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Graph G;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[] visited; <span class="comment">//记录 dfs 的过程中节点是否被访问</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;  <span class="comment">//记录连通分量个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] id;  <span class="comment">//每个节点所对应的连通分量标记</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Components</span><span class="params">(Graph graph)</span> </span>&#123;</span><br><span class="line">        G = graph;</span><br><span class="line">        visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[G.getV()];</span><br><span class="line">        id = <span class="keyword">new</span> <span class="keyword">int</span>[G.getV()];</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.getV(); i++) &#123;</span><br><span class="line">            visited[i] = <span class="keyword">false</span>;</span><br><span class="line">            id[i] = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 求图的连通分量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.getV(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[i]) &#123;</span><br><span class="line">                dfs(i);</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 图的深度优先遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        visited[v] = <span class="keyword">true</span>;</span><br><span class="line">        id[v] = count;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i: G.adj(v)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[i])</span><br><span class="line">                dfs(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回图的连通分量个数"</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询点 v 和点 w 是否连通</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isConnected</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> v &gt;= <span class="number">0</span> &amp;&amp; v &lt; G.getV();</span><br><span class="line">        <span class="keyword">assert</span> w &gt;= <span class="number">0</span> &amp;&amp; w &lt; G.getV();</span><br><span class="line">        <span class="keyword">return</span> id[v] == id[w];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Graph 为实现的一个图的接口。</p><h2 id="寻路"><a href="#寻路" class="headerlink" title="寻路"></a>寻路</h2><p>图的另一个应用即为寻找一个节点到起点的路径。</p><h3 id="Python-实现-2"><a href="#Python-实现-2" class="headerlink" title="Python 实现"></a>Python 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Path</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, graph, s)</span>:</span></span><br><span class="line">        <span class="string">"""寻路算法, 寻找图 graph 从 s 点到其他点的路径"""</span></span><br><span class="line">        self.G = graph  <span class="comment">#图的引用</span></span><br><span class="line">        <span class="keyword">assert</span> s <span class="keyword">in</span> range(self.G.get_v())</span><br><span class="line">        self.visited = [<span class="keyword">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(self.G.get_v())]  <span class="comment">#记录 dfs 的过程中节点是否被访问</span></span><br><span class="line">        self.s = s  <span class="comment">#起始点</span></span><br><span class="line">        self._from = [<span class="number">-1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(self.G.get_v())]  <span class="comment"># 记录路径, _from[i]表示查找的路径上i的上一个节点</span></span><br><span class="line"></span><br><span class="line">        self.dfs(s)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, v)</span>:</span></span><br><span class="line">        <span class="string">"""图的深度优先遍历"""</span></span><br><span class="line">        self.visited[v] = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.G.adj(v):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.visited[i]:</span><br><span class="line">                self._from[i] = v</span><br><span class="line">                self.dfs(i)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">path</span><span class="params">(self, w)</span>:</span></span><br><span class="line">        <span class="string">"""查询从 s 点到 w 点的路径, 存放在 vec 中"""</span></span><br><span class="line">        <span class="keyword">assert</span> self.has_path(w)</span><br><span class="line">        vec = []</span><br><span class="line">        p = w</span><br><span class="line">        <span class="keyword">while</span> p != <span class="number">-1</span>:</span><br><span class="line">            vec.append(p)</span><br><span class="line">            p = self._from[p]</span><br><span class="line">        <span class="keyword">return</span> vec[::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_path</span><span class="params">(self, w)</span>:</span></span><br><span class="line">        <span class="string">"""查询从 s 点到 w 点是否有路径"""</span></span><br><span class="line">        <span class="keyword">assert</span> w <span class="keyword">in</span> range(self.G.get_v())</span><br><span class="line">        <span class="keyword">return</span> self.visited[w]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_path</span><span class="params">(self, w)</span>:</span></span><br><span class="line">        <span class="string">"""打印出从 s 点到 w 点的路径"""</span></span><br><span class="line">        <span class="keyword">assert</span> self.has_path(w)</span><br><span class="line">        vec = self.path(w)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> vec:</span><br><span class="line">            <span class="keyword">if</span> i == vec[<span class="number">-1</span>]:</span><br><span class="line">                print(i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(i, end=<span class="string">'-&gt;'</span>)</span><br></pre></td></tr></table></figure><h3 id="Java-实现-2"><a href="#Java-实现-2" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Path</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Graph G;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> s;  <span class="comment">//起始点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[] visited;  <span class="comment">//记录dfs的过程中节点是否被访问</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] from;  <span class="comment">//记录路径, from[i]表示查找的路径上i的上一个节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻路算法, 寻找图 graph 从 s 点到其他点的路径</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Path</span><span class="params">(Graph graph, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">        G = graph;</span><br><span class="line">        <span class="keyword">assert</span> s &gt;= <span class="number">0</span> &amp;&amp; s &lt; G.getV();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">        visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[G.getV()];</span><br><span class="line">        from = <span class="keyword">new</span> <span class="keyword">int</span>[G.getV()];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.getV(); i++) &#123;</span><br><span class="line">            visited[i] = <span class="keyword">false</span>;</span><br><span class="line">            from[i] = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dfs(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 图的深度优先遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        visited[v] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i: G.adj(v)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[i]) &#123;</span><br><span class="line">                from[i] = v;</span><br><span class="line">                dfs(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询从 s 点到 w 点是否有路径</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPath</span><span class="params">(<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> w &gt;= <span class="number">0</span> &amp;&amp; w &lt; G.getV();</span><br><span class="line">        <span class="keyword">return</span> visited[w];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询从 s 点到 w 点的路径, 存放在 vec 中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Vector&lt;Integer&gt; <span class="title">path</span><span class="params">(<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">hasPath</span><span class="params">(w)</span></span>;</span><br><span class="line"></span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> p = w;</span><br><span class="line">        <span class="keyword">while</span> (p != -<span class="number">1</span>) &#123;</span><br><span class="line">            stack.push(p);</span><br><span class="line">            p = from[p];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Vector&lt;Integer&gt; res = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty())</span><br><span class="line">            res.add(stack.pop());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印出从 s 点到 w 点的路径</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showPath</span><span class="params">(<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">hasPath</span><span class="params">(w)</span></span>;</span><br><span class="line">        Vector&lt;Integer&gt; vec = path(w);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i: vec) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == vec.lastElement())</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            <span class="keyword">else</span> System.out.print(i + <span class="string">"-&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h1><p>首先访问起点，并将其标记为已访问过，接着访问起点的所有未被访问过的邻接点，并均标记已访问过，然后再按照遍历起点的邻接点的次序，访问每一个节的所有未被访问过的邻接点，并均标记为已访问过，依次类推，直到图中所有和起点有路径相通的顶点都被访问过为止。</p><h2 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h2><p>广度优先遍历也实现了一个节点到起点的最短路径。</p><h3 id="Python3-实现"><a href="#Python3-实现" class="headerlink" title="Python3 实现"></a>Python3 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShortestPath</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, graph, s)</span>:</span></span><br><span class="line">        <span class="string">"""寻路算法, 寻找图 graph 从 s 点到其他点的路径"""</span></span><br><span class="line">        self.G = graph  <span class="comment">#图的引用</span></span><br><span class="line">        <span class="keyword">assert</span> s <span class="keyword">in</span> range(self.G.get_v())</span><br><span class="line">        self.visited = [<span class="keyword">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(self.G.get_v())]  <span class="comment">#记录 dfs 的过程中节点是否被访问</span></span><br><span class="line">        self.s = s  <span class="comment">#起始点</span></span><br><span class="line">        self._from = [<span class="number">-1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(self.G.get_v())]  <span class="comment"># 记录路径, _from[i]表示查找的路径上i的上一个节点</span></span><br><span class="line">        self._ord = [<span class="number">-1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(self.G.get_v())]  <span class="comment"># 记录路径中节点的次序。_ord[i]表示i节点在路径中的次序。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 无向图最短路径算法, 从 s 开始广度优先遍历整张图</span></span><br><span class="line">        q = queue.Queue()</span><br><span class="line">        q.put(s)</span><br><span class="line">        self.visited[s] = <span class="keyword">True</span></span><br><span class="line">        self._ord[s] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">            v = q.get()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> self.G.adj(v):</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> self.visited[i]:</span><br><span class="line">                    q.put(i)</span><br><span class="line">                    self.visited[i] = <span class="keyword">True</span></span><br><span class="line">                    self._from[i] = v</span><br><span class="line">                    self._ord[i] = self._ord[v] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">path</span><span class="params">(self, w)</span>:</span></span><br><span class="line">        <span class="string">"""查询从 s 点到 w 点的路径, 存放在 vec 中"""</span></span><br><span class="line">        <span class="keyword">assert</span> self.has_path(w)</span><br><span class="line">        vec = []</span><br><span class="line">        p = w</span><br><span class="line">        <span class="keyword">while</span> p != <span class="number">-1</span>:</span><br><span class="line">            vec.append(p)</span><br><span class="line">            p = self._from[p]</span><br><span class="line">        <span class="keyword">return</span> vec[::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_path</span><span class="params">(self, w)</span>:</span></span><br><span class="line">        <span class="string">"""查询从 s 点到 w 点是否有路径"""</span></span><br><span class="line">        <span class="keyword">assert</span> w <span class="keyword">in</span> range(self.G.get_v())</span><br><span class="line">        <span class="keyword">return</span> self.visited[w]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_path</span><span class="params">(self, w)</span>:</span></span><br><span class="line">        <span class="string">"""打印出从 s 点到 w 点的路径"""</span></span><br><span class="line">        <span class="keyword">assert</span> self.has_path(w)</span><br><span class="line">        vec = self.path(w)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> vec:</span><br><span class="line">            <span class="keyword">if</span> i == vec[<span class="number">-1</span>]:</span><br><span class="line">                print(i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(i, end=<span class="string">'-&gt;'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">length</span><span class="params">(self, w)</span>:</span></span><br><span class="line">        <span class="string">"""查看从 s 点到 w 点的最短路径长度。若从 s 到 w 不可达，返回-1"""</span></span><br><span class="line">        <span class="keyword">assert</span> w <span class="keyword">in</span> range(self.G.get_v())</span><br><span class="line">        <span class="keyword">return</span> self._ord[w]</span><br></pre></td></tr></table></figure><h3 id="Java-实现-3"><a href="#Java-实现-3" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShortestPath</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Graph G;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> s;  <span class="comment">//起始点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[] visited;  <span class="comment">//记录dfs的过程中节点是否被访问</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] from;  <span class="comment">//记录路径, from[i]表示查找的路径上i的上一个节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] ord;  <span class="comment">//记录路径中节点的次序。ord[i]表示i节点在路径中的次序。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻路算法, 寻找图 graph 从 s 点到其他点的路径</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShortestPath</span><span class="params">(Graph graph, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">        G = graph;</span><br><span class="line">        <span class="keyword">assert</span> s &gt;= <span class="number">0</span> &amp;&amp; s &lt; G.getV();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">        visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[G.getV()];</span><br><span class="line">        from = <span class="keyword">new</span> <span class="keyword">int</span>[G.getV()];</span><br><span class="line">        ord = <span class="keyword">new</span> <span class="keyword">int</span>[G.getV()];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.getV(); i++) &#123;</span><br><span class="line">            visited[i] = <span class="keyword">false</span>;</span><br><span class="line">            from[i] = -<span class="number">1</span>;</span><br><span class="line">            ord[i] = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 无向图最短路径算法, 从 s 开始广度优先遍历整张图</span></span><br><span class="line">        LinkedList&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        q.push(s);</span><br><span class="line">        visited[s] = <span class="keyword">true</span>;</span><br><span class="line">        ord[s] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = q.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i: G.adj(v)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!visited[i]) &#123;</span><br><span class="line">                    q.push(i);</span><br><span class="line">                    visited[i] = <span class="keyword">true</span>;</span><br><span class="line">                    from[i] = v;</span><br><span class="line">                    ord[i] = ord[v] + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询从 s 点到 w 点是否有路径</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPath</span><span class="params">(<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> w &gt;= <span class="number">0</span> &amp;&amp; w &lt; G.getV();</span><br><span class="line">        <span class="keyword">return</span> visited[w];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询从 s 点到 w 点的路径, 存放在 vec 中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Vector&lt;Integer&gt; <span class="title">path</span><span class="params">(<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">hasPath</span><span class="params">(w)</span></span>;</span><br><span class="line"></span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> p = w;</span><br><span class="line">        <span class="keyword">while</span> (p != -<span class="number">1</span>) &#123;</span><br><span class="line">            stack.push(p);</span><br><span class="line">            p = from[p];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Vector&lt;Integer&gt; res = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty())</span><br><span class="line">            res.add(stack.pop());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印出从 s 点到 w 点的路径</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showPath</span><span class="params">(<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">hasPath</span><span class="params">(w)</span></span>;</span><br><span class="line">        Vector&lt;Integer&gt; vec = path(w);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i: vec) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == vec.lastElement())</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            <span class="keyword">else</span> System.out.print(i + <span class="string">"-&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查看从 s 点到 w 点的最短路径长度</span></span><br><span class="line">    <span class="comment">// 若从 s 到 w 不可达，返回-1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">(<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> w &gt;= <span class="number">0</span> &amp;&amp; w &lt; G.getV();</span><br><span class="line">        <span class="keyword">return</span> ord[w];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h1><table><thead><tr><th style="text-align:center"><strong>无向图</strong></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">邻接矩阵表示</td><td style="text-align:center"><a href="https://github.com/tyrotalk/Algorithms-in-Action/blob/master/06-Graph_Basics/Code-Python/dense_graph.py" target="_blank" rel="noopener">Python 源码</a></td><td style="text-align:center"><a href="https://github.com/tyrotalk/Algorithms-in-Action/blob/master/06-Graph_Basics/Code-Java/DenseGraph.java" target="_blank" rel="noopener">Java 源码</a></td></tr><tr><td style="text-align:center">邻接表表示</td><td style="text-align:center"><a href="https://github.com/tyrotalk/Algorithms-in-Action/blob/master/06-Graph_Basics/Code-Python/sparse_graph.py" target="_blank" rel="noopener">Python 源码</a></td><td style="text-align:center"><a href="https://github.com/tyrotalk/Algorithms-in-Action/blob/master/06-Graph_Basics/Code-Java/SparseGraph.java" target="_blank" rel="noopener">Java 源码</a></td></tr><tr><td style="text-align:center">深度优先遍历和连通分量</td><td style="text-align:center"><a href="https://github.com/tyrotalk/Algorithms-in-Action/blob/master/06-Graph_Basics/Code-Python/components.py" target="_blank" rel="noopener">Python 源码</a></td><td style="text-align:center"><a href="https://github.com/tyrotalk/Algorithms-in-Action/blob/master/06-Graph_Basics/Code-Java/Components.java" target="_blank" rel="noopener">Java 源码</a></td></tr><tr><td style="text-align:center">深度优先遍历和寻路</td><td style="text-align:center"><a href="https://github.com/tyrotalk/Algorithms-in-Action/blob/master/06-Graph_Basics/Code-Python/path.py" target="_blank" rel="noopener">Python 源码</a></td><td style="text-align:center"><a href="https://github.com/tyrotalk/Algorithms-in-Action/blob/master/06-Graph_Basics/Code-Java/Path.java" target="_blank" rel="noopener">Java 源码</a></td></tr><tr><td style="text-align:center">广度优先遍历和最短路径</td><td style="text-align:center"><a href="https://github.com/tyrotalk/Algorithms-in-Action/blob/master/06-Graph_Basics/Code-Python/shortest_path.py" target="_blank" rel="noopener">Python 源码</a></td><td style="text-align:center"><a href="https://github.com/tyrotalk/Algorithms-in-Action/blob/master/06-Graph_Basics/Code-Java/ShortestPath.java" target="_blank" rel="noopener">Java 源码</a></td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法：二分查找法</title>
      <link href="/2017/07/23/%E7%AE%97%E6%B3%95%EF%BC%9A%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%B3%95.html/"/>
      <url>/2017/07/23/%E7%AE%97%E6%B3%95%EF%BC%9A%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%B3%95.html/</url>
      <content type="html"><![CDATA[<p>二分查找法。</p><a id="more"></a><h1 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a>二分查找法</h1><p>二分查找法在有序序列中查找某一特定元素。查找过程从序列的中间元素开始，如果中间元素正好是要查找的元素，则查找过程结束；如果某一特定元素大于中间元素，则在序列大于中间元素的那一半中查找；如果某一特定元素小于中间元素，则在序列小于中间元素的那一半中查找。而且跟开始一样从中间元素开始比较。时间复杂度为 O(logn)。<br><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/算法：二分查找法/Binary_search.png"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>在有序序列 lst 中，查找 target，如果找到 target，返回相应的索引 index，否则返回 -1。</p><h3 id="Python-实现"><a href="#Python-实现" class="headerlink" title="Python 实现"></a>Python 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(lst, target)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    非递归方法</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    l, r = <span class="number">0</span>, len(lst) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">        <span class="comment"># 防止整形溢出，不使用 mid = (l + r) // 2</span></span><br><span class="line">        mid = l + (r - l) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> lst[mid] == target:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">if</span> lst[mid] &gt; target:</span><br><span class="line">            r = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find2</span><span class="params">(lst, target, l, r)</span>:</span></span><br><span class="line">    <span class="string">"""递归方法"""</span></span><br><span class="line">    <span class="keyword">if</span> l &gt; r:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    mid = l + (r - l) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> lst[mid] == target:</span><br><span class="line">        <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">elif</span> lst[mid] &gt; target:</span><br><span class="line">        <span class="keyword">return</span> find2(lst, target, l, mid - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> find2(lst, target, mid + <span class="number">1</span>, r)</span><br></pre></td></tr></table></figure><h3 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非递归方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(Comparable[] arr, Comparable target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> r = arr.length;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="comment">// 防止整形溢出，不使用 int mid = (l + r) / 2</span></span><br><span class="line">        <span class="keyword">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[mid].compareTo(target) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">if</span> (arr[mid].compareTo(target) &gt; <span class="number">0</span>)</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">find2</span><span class="params">(Comparable[] arr, Comparable target, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (arr[mid].compareTo(target) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid].compareTo(target) &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> find2(arr, target, l, mid - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> find2(arr, target, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h1><p>二分查找法</p><p><a href="https://github.com/tyrotalk/Algorithms-in-Action/blob/master/04-Binary-Search-Tree/Code-Python/binary_search.py" target="_blank" rel="noopener">Python 源码</a><br><a href="https://github.com/tyrotalk/Algorithms-in-Action/blob/master/04-Binary-Search-Tree/Code-Java/BinarySearch.java" target="_blank" rel="noopener">Java 源码</a></p>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法：堆排序</title>
      <link href="/2017/07/17/%E7%AE%97%E6%B3%95%EF%BC%9A%E5%A0%86%E6%8E%92%E5%BA%8F.html/"/>
      <url>/2017/07/17/%E7%AE%97%E6%B3%95%EF%BC%9A%E5%A0%86%E6%8E%92%E5%BA%8F.html/</url>
      <content type="html"><![CDATA[<p><a href="https://zh.wikipedia.org/wiki/%E5%A0%86%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">堆排序（Heapsort）</a>：利用堆这种数据结构的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。<br><a id="more"></a></p><h1 id="基于的堆排序"><a href="#基于的堆排序" class="headerlink" title="基于的堆排序"></a>基于<a href="/2017/08/26/Python-数据结构：优先队列.html/" title="优先队列">优先队列</a>的堆排序</h1><p>二叉堆堆能够很好的实现优先队列的基本操作。当一棵二叉树的每个节点都大于等于它的两个子节点时即为堆有序。</p><h2 id="堆算法"><a href="#堆算法" class="headerlink" title="堆算法"></a>堆算法</h2><h3 id="由下至上的堆有序化"><a href="#由下至上的堆有序化" class="headerlink" title="由下至上的堆有序化"></a>由下至上的堆有序化</h3><p>当堆的有序状态因为某个节点变得比其父节点更大时就需要通过交换它和它的父节点来使堆有序。</p><h4 id="Python3-实现"><a href="#Python3-实现" class="headerlink" title="Python3 实现"></a>Python3 实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shift_up</span><span class="params">(self, k)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    由下至上的堆有序化，保证最大堆的性质</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">while</span> k &gt; <span class="number">1</span> <span class="keyword">and</span> self.data[k] &gt; self.data[k // <span class="number">2</span>]:</span><br><span class="line">        self.data[k], self.data[k // <span class="number">2</span>] = self.data[k // <span class="number">2</span>], self.data[k]</span><br><span class="line">        k //= <span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 由下至上的堆有序化，保证最大堆的性质</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shiftUp</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (k &gt; <span class="number">1</span> &amp;&amp; data[k / <span class="number">2</span>].compareTo(data[k]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果当前元素大于父节点，交换</span></span><br><span class="line">        swap(k, k / <span class="number">2</span>);</span><br><span class="line">        k /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="由上至下的堆有序化"><a href="#由上至下的堆有序化" class="headerlink" title="由上至下的堆有序化"></a>由上至下的堆有序化</h3><p>当堆的有序状态因为某个节点变得比其两个子节点更小时就需要通过交换它和它的两个子节点中较大的一个来使堆有序。</p><h4 id="Python3-实现-1"><a href="#Python3-实现-1" class="headerlink" title="Python3 实现"></a>Python3 实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shift_down</span><span class="params">(self, k)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    由上至下的堆有序化，保证最大堆的性质</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">while</span> k * <span class="number">2</span> &lt;= self.count:</span><br><span class="line">        j = k * <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> j + <span class="number">1</span> &lt;= self.count <span class="keyword">and</span> self.data[j] &lt; self.data[j + <span class="number">1</span>]:</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.data[k] &gt; self.data[j]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        self.data[k], self.data[j] = self.data[j], self.data[k]</span><br><span class="line">        k = j</span><br></pre></td></tr></table></figure><h4 id="Java-实现-1"><a href="#Java-实现-1" class="headerlink" title="Java 实现"></a>Java 实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 由上至下的堆有序化，保证最大堆的性质</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shiftDown</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">2</span> * k &lt;= count) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = k * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (j + <span class="number">1</span> &lt;= count &amp;&amp; data[j + <span class="number">1</span>].compareTo(data[j]) &gt; <span class="number">0</span>)</span><br><span class="line">            j++;</span><br><span class="line">        <span class="keyword">if</span> (data[k].compareTo(data[j]) &gt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        swap(k, j);</span><br><span class="line">        k = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h3><p>将新元素加到堆末尾，通过由下至上的堆有序化使元素到合适的位置。</p><h4 id="Python3-实现-2"><a href="#Python3-实现-2" class="headerlink" title="Python3 实现"></a>Python3 实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, item)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    在最大堆中插入一个新的元素</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">assert</span> self.count + <span class="number">1</span> &lt;= self.capacity</span><br><span class="line">    self.count += <span class="number">1</span></span><br><span class="line">    self.data.append(item)</span><br><span class="line">    self.shift_up(self.count)</span><br></pre></td></tr></table></figure><h4 id="Java-实现-2"><a href="#Java-实现-2" class="headerlink" title="Java 实现"></a>Java 实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在最大堆中插入一个新的元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> count + <span class="number">1</span> &lt;= capacity;</span><br><span class="line">    data[++count] = item;</span><br><span class="line">    shiftUp(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除最大元素"><a href="#删除最大元素" class="headerlink" title="删除最大元素"></a>删除最大元素</h3><p>删除堆顶端的最大元素，将堆末尾的元素放到顶端，通过由上至下的堆有序化使此时顶端元素到合适的位置。</p><h4 id="Python3-实现-3"><a href="#Python3-实现-3" class="headerlink" title="Python3 实现"></a>Python3 实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_max</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    从最大堆中取出堆顶元素, 即堆中所存储的最大数据</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">assert</span> self.count &gt; <span class="number">0</span></span><br><span class="line">    re_max = self.data[<span class="number">1</span>]</span><br><span class="line">    self.data[<span class="number">1</span>] = self.data[self.count]</span><br><span class="line">    self.data[self.count] = <span class="keyword">None</span></span><br><span class="line">    self.count -= <span class="number">1</span></span><br><span class="line">    self.shift_down(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> re_max</span><br></pre></td></tr></table></figure><h4 id="Java-实现-3"><a href="#Java-实现-3" class="headerlink" title="Java 实现"></a>Java 实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从最大堆中取出堆顶元素, 即堆中所存储的最大数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Item <span class="title">extractMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> count &gt; <span class="number">0</span>;</span><br><span class="line">    Item max = data[<span class="number">1</span>];</span><br><span class="line">    data[<span class="number">1</span>] = data[count];</span><br><span class="line">    data[count--] = <span class="keyword">null</span>;</span><br><span class="line">    shiftDown(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原地堆排序"><a href="#原地堆排序" class="headerlink" title="原地堆排序"></a>原地堆排序</h2><p>原地堆排序将需要排序的序列通过由上至下的堆有序化使序列变成一个最大堆，将第一个元素（最大元素）与最后一个元素交换，再将此时序列除最后一个元素（最大元素）的前面部分进行上述变换；如此继续，最后序列有序。<br>注意：</p><ol><li>原地堆排序与上面堆算法不同，其索引从0开始；</li><li>源码地址中有另外两种堆排序算法（索引从1开开始），其都借助了一个辅助序列，效率不如原地堆排序。</li></ol><h3 id="Python3-实现-4"><a href="#Python3-实现-4" class="headerlink" title="Python3 实现"></a>Python3 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(lst)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    不使用额外的堆排序，直接对 lst 进行原地堆排序</span></span><br><span class="line"><span class="string">    最后一个非叶子节点的索引 = (最后一个元素的索引-1)/2</span></span><br><span class="line"><span class="string">    最后一个元素的索引 = n-1</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    n = len(lst)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range((n - <span class="number">1</span>) // <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        shift_down(lst, n, i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        lst[<span class="number">0</span>], lst[i] = lst[i], lst[<span class="number">0</span>]</span><br><span class="line">        shift_down(lst, i, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shift_down</span><span class="params">(lst, n, k)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    由上至下的堆有序化，保证最大堆的性质</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    e = lst[k]</span><br><span class="line">    <span class="keyword">while</span> k * <span class="number">2</span> + <span class="number">1</span> &lt; n:</span><br><span class="line">        j = k * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> j + <span class="number">1</span> &lt; n <span class="keyword">and</span> lst[j] &lt; lst[j + <span class="number">1</span>]:</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> e &gt; lst[j]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        lst[k] = lst[j]</span><br><span class="line">        k = j</span><br><span class="line">    lst[k] = e</span><br></pre></td></tr></table></figure><h3 id="Java-实现-4"><a href="#Java-实现-4" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 不使用额外的堆排序，直接对数组进行原地堆排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">newSort</span><span class="params">(Comparable[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对数组进行原地堆排序的索引从0开始索引的</span></span><br><span class="line">        <span class="comment">// 最后一个非叶子节点的索引 = (最后一个元素的索引-1)/2</span></span><br><span class="line">        <span class="comment">// 最后一个元素的索引 = n-1</span></span><br><span class="line">        <span class="keyword">int</span> n = arr.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = (n - <span class="number">1</span> - <span class="number">1</span>) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            shiftDown(arr, n, i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            swap(arr, i, <span class="number">0</span>);</span><br><span class="line">            shiftDown(arr, i, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由上至下的堆有序化，保证最大堆的性质</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shiftDown</span><span class="params">(Comparable[] arr, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        Comparable e = arr[k];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (k * <span class="number">2</span> + <span class="number">1</span> &lt; n) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = k * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (j + <span class="number">1</span> &lt; n &amp;&amp; arr[j + <span class="number">1</span>].compareTo(arr[j]) &gt; <span class="number">0</span>)</span><br><span class="line">                j++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (e.compareTo(arr[j]) &gt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            arr[k] = arr[j];</span><br><span class="line">            k = j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        arr[k] = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//交换堆中两个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Comparable[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Comparable temp = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h1><ol><li><a href="https://github.com/tyrotalk/Algorithms-in-Action/tree/master/03-Heap-Sort/Code-Python/heap" target="_blank" rel="noopener">Python 源码</a></li><li><a href="https://github.com/tyrotalk/Algorithms-in-Action/tree/master/03-Heap-Sort/Code-Java/heap" target="_blank" rel="noopener">Java 源码</a></li></ol>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法：高级排序算法</title>
      <link href="/2017/07/10/%E7%AE%97%E6%B3%95%EF%BC%9A%E9%AB%98%E7%BA%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95.html/"/>
      <url>/2017/07/10/%E7%AE%97%E6%B3%95%EF%BC%9A%E9%AB%98%E7%BA%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95.html/</url>
      <content type="html"><![CDATA[<p>本篇包括归并排序和快速排序，它们都是采用了分治法的 O(NlogN) 算法。<br><a id="more"></a></p><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>归并排序是建立在归并操作上的一种有效的排序算法，其将两个有序的序列归并成一个更大的有序序列。</p><h2 id="原地归并"><a href="#原地归并" class="headerlink" title="原地归并"></a>原地归并</h2><p>原地归并将两个不同的有序序列归并到第三个序列中，在实现过程中就需要一个辅助序列。</p><h3 id="Python3-实现"><a href="#Python3-实现" class="headerlink" title="Python3 实现"></a>Python3 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(lst, l, mid, r)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    将 lst[l...mid] 和 lst[mid+1...r] 两部分进行归并</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    aux = copy.deepcopy(lst[l:r + <span class="number">1</span>])  <span class="comment">#辅助序列aux</span></span><br><span class="line">    i, j = l, mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(l, r + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> i &gt; mid:  <span class="comment"># 左半部分元素已经处理完毕</span></span><br><span class="line">            lst[k] = aux[j - l]</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> j &gt; r:  <span class="comment"># 右半部分元素已经处理完毕</span></span><br><span class="line">            lst[k] = aux[i - l]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> aux[i - l] &lt; aux[j - l]:</span><br><span class="line">            lst[k] = aux[i - l]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            lst[k] = aux[j - l]</span><br><span class="line">            j += <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 arr[l...mid] 和 arr[mid+1...r] 两部分进行归并</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Comparable[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> mid, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = l;</span><br><span class="line">    <span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    System.arraycopy(arr, l, aux, l, r - l + <span class="number">1</span>);  <span class="comment">//辅助序列aux</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = l; k &lt;= r; k++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; mid) arr[k] = aux[j++]; <span class="comment">//左半部分元素已经处理完毕</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; r) arr[k] = aux[i++]; <span class="comment">//右半部分元素已经处理完毕</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (aux[i].compareTo(aux[j]) &lt; <span class="number">0</span>) arr[k] = aux[i++];</span><br><span class="line">        <span class="keyword">else</span> arr[k] = aux[j++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自顶向下的归并排序"><a href="#自顶向下的归并排序" class="headerlink" title="自顶向下的归并排序"></a>自顶向下的归并排序</h2><p>对子序列 a[l…r] 进行排序， 先将其分为 a[l…mid] 和 a[mid+1…r] 两部分，分别通过递归调用将它们单独排序，最后将有序的子序列归并为最终的排序结果。</p><h3 id="Python3-实现-1"><a href="#Python3-实现-1" class="headerlink" title="Python3 实现"></a>Python3 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(lst)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    初始化，使归并排序边界正确</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    sort_next(lst, <span class="number">0</span>, len(lst) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort_next</span><span class="params">(lst, l, r)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    使用自顶向下、递归进行归并排序,对 lst[l...r] 的范围进行排序</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> l &gt;= r:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    mid = (l + r) // <span class="number">2</span></span><br><span class="line">    sort_next(lst, l, mid)  <span class="comment">#将左半部分排序</span></span><br><span class="line">    sort_next(lst, mid + <span class="number">1</span>, r)  <span class="comment">#将右半部分排序</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对于 lst[mid] &lt;= lst[mid + 1]的情况, 不进行merge</span></span><br><span class="line">    <span class="keyword">if</span> lst[mid] &gt; lst[mid + <span class="number">1</span>]:</span><br><span class="line">        merge(lst, l, mid, r)  <span class="comment">#归并</span></span><br></pre></td></tr></table></figure><h3 id="Java-实现-1"><a href="#Java-实现-1" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Comparable[] aux; <span class="comment">// 辅助数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">newSort</span><span class="params">(Comparable[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = arr.length;</span><br><span class="line">    aux = <span class="keyword">new</span> Comparable[n]; <span class="comment">// 一次性分配空间</span></span><br><span class="line">    newSort(arr, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用递归进行归并排序,对 arr[l...r] 的范围进行排序</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">newSort</span><span class="params">(Comparable[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    newSort(arr, l, mid); <span class="comment">// 将左半部分排序</span></span><br><span class="line">    newSort(arr, mid + <span class="number">1</span>, r); <span class="comment">// 将右半部分排序</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对于arr[mid] &lt;= arr[mid+1]的情况,不进行merge</span></span><br><span class="line">    <span class="keyword">if</span> (arr[mid].compareTo(arr[mid + <span class="number">1</span>]) &gt; <span class="number">0</span>)</span><br><span class="line">        merge(arr, l, mid, r); <span class="comment">// 归并</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自底向上的归并排序"><a href="#自底向上的归并排序" class="headerlink" title="自底向上的归并排序"></a>自底向上的归并排序</h2><p>首先进行两两归并，然后四四归并，接着八八归并，一直下去，即先归并微型序列，再成对归并得到的子序列，一直下去，直到将整个序列归并。</p><h3 id="Python3-实现-2"><a href="#Python3-实现-2" class="headerlink" title="Python3 实现"></a>Python3 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(lst)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    进行 lgN 次两两归并</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    n = len(lst)</span><br><span class="line">    sz = <span class="number">1</span>  <span class="comment"># sz 子数组大小</span></span><br><span class="line">    <span class="keyword">while</span> sz &lt; n:</span><br><span class="line">        l = <span class="number">0</span>  <span class="comment"># l 子数组索引</span></span><br><span class="line">        <span class="keyword">while</span> l &lt; n - sz:</span><br><span class="line">            <span class="comment"># 对于 lst[mid] &lt;= lst[mid + 1]的情况, 不进行merge</span></span><br><span class="line">            <span class="keyword">if</span> lst[l + sz - <span class="number">1</span>] &gt; lst[l + sz]:</span><br><span class="line">                merge(lst, l, l + sz - <span class="number">1</span>, min(l + sz + sz - <span class="number">1</span>, n - <span class="number">1</span>))</span><br><span class="line">            l += sz + sz</span><br><span class="line">        sz += sz</span><br></pre></td></tr></table></figure><h3 id="Java-实现-2"><a href="#Java-实现-2" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Comparable[] aux;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行 lgN 次两两归并</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">newSort</span><span class="params">(Comparable[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = arr.length;</span><br><span class="line">    aux = <span class="keyword">new</span> Comparable[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> sz = <span class="number">1</span>; sz &lt; n; sz += sz) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; n - sz; l += sz + sz) &#123;</span><br><span class="line">            <span class="comment">// 对于arr[mid] &lt;= arr[mid+1]的情况,不进行merge</span></span><br><span class="line">            <span class="keyword">if</span> (arr[l + sz - <span class="number">1</span>].compareTo(arr[l + sz]) &gt; <span class="number">0</span>)</span><br><span class="line">                merge(arr, l, l + sz - <span class="number">1</span>,</span><br><span class="line">                        Math.min(l + sz + sz - <span class="number">1</span>, n - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序特点"><a href="#归并排序特点" class="headerlink" title="归并排序特点"></a>归并排序特点</h2><ol><li>对于长度为 N 的序列，自顶向下的归并排序和自顶向上的归并排序都需要 1/2NlgN 至 NlgN 次比较，最多访问序列 6NlgN 次；</li><li>归并排序的主要缺点是辅助序列所使用的额外空间和 N 的大小成正比。</li></ol><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>快速排序将一个序列分成两个子序列，两部分独立地排序。<br>步骤：</p><ol><li>从序列中挑出一个基准。</li><li>切分操作：重新排序序列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任何一边）。在这个分区结束之后，该基准就处于序列的中间位置。</li><li>递归地把小于基准值元素的子序列和大于基准值元素的子序列排序。</li></ol><h2 id="基本算法"><a href="#基本算法" class="headerlink" title="基本算法"></a>基本算法</h2><h3 id="Python3-版本"><a href="#Python3-版本" class="headerlink" title="Python3 版本"></a>Python3 版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">def sort(lst):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    对序列所有元素进行随机排序</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    sort_next(lst, 0, len(lst) - 1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def sort_next(lst, l, r):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    快速排序</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if r &lt;= l:</span><br><span class="line">        return</span><br><span class="line">    p = partition(lst, l, r)  #切分</span><br><span class="line">    sort_next(lst, l, p - 1)  #将左半部分 lst[l...p-1] 排序</span><br><span class="line">    sort_next(lst, p + 1, r)  #将右半部分 lst[p+1...r] 排序</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def partition(lst, l, r):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    将序列切分为 lst[l...p-1], lst[p], lst[p+1, r]</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    v = lst[l]</span><br><span class="line">    j = l</span><br><span class="line">    for i in range(l + 1, r + 1):</span><br><span class="line">        if lst[i] &lt; v:</span><br><span class="line">            j += 1</span><br><span class="line">            lst[j], lst[i] = lst[i], lst[j]</span><br><span class="line">    lst[l], lst[j] = lst[j], lst[l]</span><br><span class="line">    return j</span><br></pre></td></tr></table></figure><h3 id="Java-版本"><a href="#Java-版本" class="headerlink" title="Java 版本"></a>Java 版本</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">newSort</span><span class="params">(Comparable[] arr)</span> </span>&#123;</span><br><span class="line">        newSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">newSort</span><span class="params">(Comparable[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> p = partition(arr, l, r); <span class="comment">//切分</span></span><br><span class="line">        newSort(arr, l, p - <span class="number">1</span>); <span class="comment">//将左半部分 arr[l...p-1] 排序</span></span><br><span class="line">        newSort(arr, p + <span class="number">1</span>, r); <span class="comment">//将右半部分 arr[p+1...r] 排序</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将序列切分为 arr[l...p-1], arr[p], arr[p+1, r]</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(Comparable[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        Comparable v = arr[l];</span><br><span class="line">        <span class="keyword">int</span> j = l;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l + <span class="number">1</span>; i &lt;= r; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i].compareTo(v) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                j++;</span><br><span class="line">                swap(arr, i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(arr, l, j);</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//交换数组中两个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Object[] arr, <span class="keyword">int</span> index1, <span class="keyword">int</span> index2)</span> </span>&#123;</span><br><span class="line">        Object temp = arr[index1];</span><br><span class="line">        arr[index1] = arr[index2];</span><br><span class="line">        arr[index2] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="算法改进"><a href="#算法改进" class="headerlink" title="算法改进"></a>算法改进</h2><h3 id="保持序列的随机性"><a href="#保持序列的随机性" class="headerlink" title="保持序列的随机性"></a>保持序列的随机性</h3><p>快速排序的最好情况是每次都正好将序列对半分，但对于一个趋近有序的序列，会出现切分不平衡的情况，使得算法极为低效。此时打乱原有序列的顺序便能预防这种情况。</p><ol><li>Python3: <code>random.shuffle(lst)</code></li><li>Java: <code>StdRandom.shuffle(arr);</code></li></ol><h3 id="双路快速排序"><a href="#双路快速排序" class="headerlink" title="双路快速排序"></a>双路快速排序</h3><p>改进快速排序的第二个方法是使用双路快速排序，其切分部分在选定一个基准后，会从序列左端开始向右扫描直到找到一个大于等于它的元素，再从序列右端开始向左扫描直到找到一个小于等于它的元素，交换这两个元素，如此继续。</p><h4 id="Python3-版本-1"><a href="#Python3-版本-1" class="headerlink" title="Python3 版本"></a>Python3 版本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(lst, l, r)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    将序列切分为 lst[l...p-1], lst[p], lst[p+1, r]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    v = lst[l]</span><br><span class="line">    i, j = l, r + <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= r <span class="keyword">and</span> lst[i] &lt; v:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> j &gt;= l <span class="keyword">and</span> lst[j] &gt; v:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        lst[i], lst[j] = lst[j], lst[i]</span><br><span class="line">    lst[l], lst[j] = lst[j], lst[l]</span><br><span class="line">    <span class="keyword">return</span> j</span><br></pre></td></tr></table></figure><h4 id="Java-版本-1"><a href="#Java-版本-1" class="headerlink" title="Java 版本"></a>Java 版本</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(Comparable[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    Comparable v = arr[l];</span><br><span class="line">    <span class="keyword">int</span> i = l, j = r + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (arr[++i].compareTo(v) &lt; <span class="number">0</span> &amp;&amp; i &lt;= r);</span><br><span class="line">        <span class="keyword">while</span> (arr[--j].compareTo(v) &gt; <span class="number">0</span> &amp;&amp; j &gt;= l);</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= j) <span class="keyword">break</span>;</span><br><span class="line">        swap(arr, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr, l, j);</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三路快速排序"><a href="#三路快速排序" class="headerlink" title="三路快速排序"></a>三路快速排序</h3><p>改进快速排序的第三种方法是使用三路快速排序，其将序列分为切分为三个部分，分别对应小于、等于和大于切分元素的序列元素，再对小于和大于部分进行递归排序。</p><h4 id="Python3-版本-2"><a href="#Python3-版本-2" class="headerlink" title="Python3 版本"></a>Python3 版本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort_next</span><span class="params">(lst, l, r)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> r &lt;= l:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    v = lst[l]</span><br><span class="line"></span><br><span class="line">    lt = l  <span class="comment"># lst[l+1...lt] &lt; v</span></span><br><span class="line">    i = l + <span class="number">1</span>  <span class="comment"># lst[lt+1...i] = v</span></span><br><span class="line">    gt = r + <span class="number">1</span>  <span class="comment"># lst[i+1...h] &gt; v</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> i &lt; gt:</span><br><span class="line">        <span class="keyword">if</span> lst[i] &lt; v:</span><br><span class="line">            lst[lt + <span class="number">1</span>], lst[i] = lst[i], lst[lt + <span class="number">1</span>]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            lt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> lst[i] &gt; v:</span><br><span class="line">            lst[gt - <span class="number">1</span>], lst[i] = lst[i], lst[gt - <span class="number">1</span>]</span><br><span class="line">            gt -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">    lst[l], lst[lt] = lst[lt], lst[l]</span><br><span class="line">    sort_next(lst, l, lt - <span class="number">1</span>)  <span class="comment">#将前半部分 lst[l...lt-1] 排序</span></span><br><span class="line">    sort_next(lst, gt, r)  <span class="comment">#将后半部分 lst[gt...r] 排序</span></span><br></pre></td></tr></table></figure><h4 id="Java-版本-2"><a href="#Java-版本-2" class="headerlink" title="Java 版本"></a>Java 版本</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">newSort</span><span class="params">(Comparable[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> lt = l, i = l + <span class="number">1</span>, gt = r + <span class="number">1</span>;</span><br><span class="line">    Comparable v = arr[l];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; gt) &#123;</span><br><span class="line">        <span class="keyword">int</span> cmp = arr[i].compareTo(v);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) swap(arr, ++lt, i++);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) swap(arr, --gt, i);</span><br><span class="line">        <span class="keyword">else</span> i++;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr, l, lt);</span><br><span class="line">    newSort(arr, l, lt - <span class="number">1</span>); <span class="comment">//将左半部分 arr[l...p-1] 排序</span></span><br><span class="line">    newSort(arr, gt, r); <span class="comment">//将右半部分 arr[p+1...r] 排序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序特点"><a href="#快速排序特点" class="headerlink" title="快速排序特点"></a>快速排序特点</h2><ol><li>长度为 N 的序列排序所需的时间和 NlgN 成正比，平均需要 2NlgN 次比较；</li><li>随机打乱原始序列的顺序能防止快速排序出现最坏的情况。</li></ol><h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h1><ol><li>归并排序</li></ol><ul><li><a href="https://github.com/tyrotalk/Algorithms-in-Action/tree/master/02-Sorting-Advance/Code-Python/merge_sort" target="_blank" rel="noopener">Python</a></li><li><a href="https://github.com/tyrotalk/Algorithms-in-Action/tree/master/02-Sorting-Advance/Code-Java/mergeSort" target="_blank" rel="noopener">Java</a></li></ul><ol><li>快速排序</li></ol><ul><li><a href="https://github.com/tyrotalk/Algorithms-in-Action/tree/master/02-Sorting-Advance/Code-Python/quick_sort" target="_blank" rel="noopener">Python</a></li><li><a href="https://github.com/tyrotalk/Algorithms-in-Action/tree/master/02-Sorting-Advance/Code-Java/quickSort" target="_blank" rel="noopener">Java</a></li></ul>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法：简单排序算法</title>
      <link href="/2017/07/02/%E7%AE%97%E6%B3%95%EF%BC%9A%E7%AE%80%E5%8D%95%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95.html/"/>
      <url>/2017/07/02/%E7%AE%97%E6%B3%95%EF%BC%9A%E7%AE%80%E5%8D%95%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95.html/</url>
      <content type="html"><![CDATA[<p>简单排序算法有三种：选择排序、插入排序和冒泡排序。都属于 O(n^2) 级别的算法。</p><a id="more"></a><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p>原理：首先，找到数组中最小的元素，将它和数组第一个元素交换位置；其次，在剩下的元素中找到最小的元素，将它与数组第二个元素交换位置。如此反复，直到将整个数组排序。</p><ul><li>对于长度为 n 的数组，选择排序需要大约 (n^2)/2 次比较和 n 次交换。</li><li>对于随机排列的长度为 n 且主键不重复的数组，平均情况下插入排序需要 (n^2)/4 次比较以及 (n^2)/4 次交换。最坏情况下需要 (n^2)/2 次比较和 (n^2)/2 次交换，最好情况下需要 n-1 次比较和0次交换。</li></ul><h2 id="Python3-代码"><a href="#Python3-代码" class="headerlink" title="Python3 代码"></a>Python3 代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="string">"""由小到大排序"""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr) - <span class="number">1</span>):</span><br><span class="line">        min_index = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(arr)):</span><br><span class="line">            <span class="keyword">if</span> arr[min_index] &gt; arr[j]:</span><br><span class="line">                min_index = j</span><br><span class="line">        <span class="keyword">if</span> min_index != i:</span><br><span class="line">            arr[min_index], arr[i] = arr[i], arr[min_index]</span><br></pre></td></tr></table></figure><h2 id="Java-代码"><a href="#Java-代码" class="headerlink" title="Java 代码"></a>Java 代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">newSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> minIndex = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[minIndex] &gt; arr[j])</span><br><span class="line">                minIndex = j;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(arr, i, minIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//交换数组中两个数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> index1, <span class="keyword">int</span> index2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[index1];</span><br><span class="line">    arr[index1] = arr[index2];</span><br><span class="line">    arr[index2] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用模版（泛型）"><a href="#使用模版（泛型）" class="headerlink" title="使用模版（泛型）"></a>使用模版（泛型）</h2><p>上面静态语言 Java 的代码只能对整型数组进行排序，我们用泛型来使代码能对任意类型数组排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectionSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">newSort</span><span class="params">(Comparable[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> minIndex = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j].compareTo(arr[minIndex]) &lt; <span class="number">0</span>)</span><br><span class="line">                    minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(arr, i, minIndex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//交换数组中两个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Object[] arr, <span class="keyword">int</span> index1, <span class="keyword">int</span> index2)</span> </span>&#123;</span><br><span class="line">        Object temp = arr[index1];</span><br><span class="line">        arr[index1] = arr[index2];</span><br><span class="line">        arr[index2] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//测试 Integer</span></span><br><span class="line">        Integer[] a = &#123;<span class="number">10</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        SelectionSort.newSort(a);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试 Double</span></span><br><span class="line">        Double[] b = &#123;<span class="number">4.4</span>, <span class="number">3.3</span>, <span class="number">2.2</span>, <span class="number">1.1</span>&#125;;</span><br><span class="line">        SelectionSort.newSort(b);</span><br><span class="line">        System.out.println(Arrays.toString(b));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试 String</span></span><br><span class="line">        String[] c = &#123;<span class="string">"D"</span>, <span class="string">"C"</span>, <span class="string">"B"</span>, <span class="string">"A"</span>&#125;;</span><br><span class="line">        SelectionSort.newSort(c);</span><br><span class="line">        System.out.println(Arrays.toString(c));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试自定义类 People</span></span><br><span class="line">        People[] people = <span class="keyword">new</span> People[<span class="number">4</span>];</span><br><span class="line">        people[<span class="number">0</span>] = <span class="keyword">new</span> People(<span class="string">"A"</span>, <span class="number">23</span>);</span><br><span class="line">        people[<span class="number">1</span>] = <span class="keyword">new</span> People(<span class="string">"D"</span>, <span class="number">22</span>);</span><br><span class="line">        people[<span class="number">2</span>] = <span class="keyword">new</span> People(<span class="string">"C"</span>, <span class="number">26</span>);</span><br><span class="line">        people[<span class="number">3</span>] = <span class="keyword">new</span> People(<span class="string">"B"</span>, <span class="number">22</span>);</span><br><span class="line">        SelectionSort.newSort(people);</span><br><span class="line">        System.out.println(Arrays.toString(people));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义 <code>People</code> 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">People</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(People that)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.age &lt; that.age) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.age &gt; that.age) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name.compareTo(that.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"People "</span> + <span class="keyword">this</span>.name + <span class="string">" "</span> + <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="随机生成数组"><a href="#随机生成数组" class="headerlink" title="随机生成数组"></a>随机生成数组</h2><h3 id="Python3-代码-1"><a href="#Python3-代码-1" class="headerlink" title="Python3 代码"></a>Python3 代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">随机生成数值型数组</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_array</span><span class="params">(n, min_range, max_range)</span>:</span></span><br><span class="line">    <span class="string">"""生成 n 个元素的整型（浮点型）数组，每个元素取值范围为 [minRange, maxRange]"""</span></span><br><span class="line">    <span class="comment"># 使用断言检查 minRange 是否不大于 maxRange</span></span><br><span class="line">    <span class="keyword">assert</span> min_range &lt;= max_range</span><br><span class="line">    arr = [random.randint(min_range, max_range) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><h3 id="Java-代码-1"><a href="#Java-代码-1" class="headerlink" title="Java 代码"></a>Java 代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortTestHelper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SortTestHelper</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成 n 个元素的整型数组，每个元素取值范围为 [minRange, maxRange]</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer[] generateRandomArray(<span class="keyword">int</span> n, <span class="keyword">int</span> minRange, <span class="keyword">int</span> maxRange) &#123;</span><br><span class="line">        assert minRange &lt;= maxRange; #使用断言检查 minRange 是否不大于 maxRange</span><br><span class="line">        Integer[] integers = <span class="keyword">new</span> Integer[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            integers[i] = (<span class="keyword">int</span>)(Math.random() * (maxRange + <span class="number">1</span> - minRange) + minRange);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> integers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试算法的性能"><a href="#测试算法的性能" class="headerlink" title="测试算法的性能"></a>测试算法的性能</h2><p>检查算法是否运算正确及其所用时间</p><h3 id="Python3-代码-2"><a href="#Python3-代码-2" class="headerlink" title="Python3 代码"></a>Python3 代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selection_sort <span class="keyword">import</span> sort</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_sorted</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="string">"""判断数组排序后是否有序"""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr) - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> arr[i] &gt; arr[i + <span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_sort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="string">"""测试排序算法运行的正确性及所用时间"""</span></span><br><span class="line">    begin_time = time.time()</span><br><span class="line">    sort(arr)</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    <span class="keyword">assert</span> is_sorted(arr)  <span class="comment"># 使用断言检查排序算法运行成功</span></span><br><span class="line">    print(<span class="string">"排序结果: "</span> + str(arr))</span><br><span class="line">    print(<span class="string">"排序算法所用时间: "</span> + str(end_time - begin_time) + <span class="string">'s'</span>)</span><br></pre></td></tr></table></figure><h3 id="Java-代码-2"><a href="#Java-代码-2" class="headerlink" title="Java 代码"></a>Java 代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断数组排序后是否有序</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSorted</span><span class="params">(Comparable[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i].compareTo(arr[i+<span class="number">1</span>]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 Java 反射机制测试排序算法运行的正确性及所用时间</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSort</span><span class="params">(Comparable[] arr, String sortClassName)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获得排序类</span></span><br><span class="line">        Class c = Class.forName(sortClassName);</span><br><span class="line">        <span class="comment">// 获得排序方法</span></span><br><span class="line">        Method method = c.getMethod(<span class="string">"newSort"</span>, <span class="keyword">new</span> Class[]&#123;Comparable[].class&#125;);</span><br><span class="line"></span><br><span class="line">        Object[] params = <span class="keyword">new</span> Object[]&#123;arr&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> beginTime = System.nanoTime();</span><br><span class="line">        <span class="comment">// 调用排序方法</span></span><br><span class="line">        method.invoke(<span class="keyword">null</span>, params);</span><br><span class="line">        <span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用断言检查排序算法运行成功</span></span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(arr)</span></span>;</span><br><span class="line">        System.out.print(<span class="string">"排序结果："</span>);</span><br><span class="line">        printArray(arr);</span><br><span class="line">        System.out.println(<span class="string">"排序运算时间："</span> + (endTime - beginTime) + <span class="string">"ns"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><p>原理：通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p><ul><li>插入排序需要的交换操作和数组中倒置的数量相同，需要的比较次数大于等于倒置的数量，小于等于倒置的数量加上数组的大小再减一。</li></ul><h2 id="Python3-代码-3"><a href="#Python3-代码-3" class="headerlink" title="Python3 代码"></a>Python3 代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(arr)</span>:</span></span><br><span class="line"><span class="string">"""由小到大排序"""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(arr)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &lt; arr[j - <span class="number">1</span>]:</span><br><span class="line">                arr[j], arr[j - <span class="number">1</span>] = arr[j - <span class="number">1</span>], arr[j]</span><br></pre></td></tr></table></figure><h2 id="Java-代码-3"><a href="#Java-代码-3" class="headerlink" title="Java 代码"></a>Java 代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">newSort</span><span class="params">(Comparable[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; arr[j].compareTo(arr[j - <span class="number">1</span>]) &lt; <span class="number">0</span>; j--)</span><br><span class="line">            swap(arr, j, j - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换数组中两个数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Object[] arr, <span class="keyword">int</span> index1, <span class="keyword">int</span> index2)</span> </span>&#123;</span><br><span class="line">    Object temp = arr[index1];</span><br><span class="line">    arr[index1] = arr[index2];</span><br><span class="line">    arr[index2] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优化插入排序"><a href="#优化插入排序" class="headerlink" title="优化插入排序"></a>优化插入排序</h2><p>上面的插入排序算法的效率并不如选择排序算法，需要对插入排序算法进行优化。<br>事实上，对部分有序的数组排序时使用（优化后的）插入排序算法更有效。</p><blockquote><p>典型的部分有序的数组：</p><ul><li>数组中每个元素距离它的最终位置都不远；</li><li>一个有序的大数组接一个小数组；</li><li>数组中只有几个元素的位置不正确。</li></ul></blockquote><ul><li>对于随机排序的无重复主键的数组，插入排序和选择排序的运行时间是平方级别的，两者之比应该是一个较小的常数。</li></ul><h3 id="Python3-代码-4"><a href="#Python3-代码-4" class="headerlink" title="Python3 代码"></a>Python3 代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(arr)):</span><br><span class="line">        e = arr[i]</span><br><span class="line">        j = i</span><br><span class="line">        <span class="keyword">while</span> j &gt; <span class="number">0</span> <span class="keyword">and</span> e &lt; arr[j - <span class="number">1</span>]:</span><br><span class="line">            arr[j] = arr[j - <span class="number">1</span>]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        arr[j] = e</span><br></pre></td></tr></table></figure><h3 id="Java-代码-4"><a href="#Java-代码-4" class="headerlink" title="Java 代码"></a>Java 代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">newSort</span><span class="params">(Comparable[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        Comparable e = arr[i];</span><br><span class="line">        <span class="keyword">int</span> j = i;</span><br><span class="line">        <span class="keyword">for</span> (; j &gt; <span class="number">0</span> &amp;&amp; e.compareTo(arr[j - <span class="number">1</span>]) &lt; <span class="number">0</span>; j--)</span><br><span class="line">            arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">        arr[j] = e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>原理：重复地走访要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，即该数列已经排序完成。</p><ul><li>冒泡排序对长度为 n 的数组需要 O(n^2) 的比较次数，且可以原地排序；</li><li>冒泡排序是与插入排序拥有相等的运行时间，但是两种算法在需要的交换次数却很大地不同。</li></ul><h2 id="Python3-代码-5"><a href="#Python3-代码-5" class="headerlink" title="Python3 代码"></a>Python3 代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr) - <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">        flag = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, i):</span><br><span class="line">            <span class="keyword">if</span> arr[j + <span class="number">1</span>] &lt; arr[j]:</span><br><span class="line">                flag = <span class="keyword">False</span></span><br><span class="line">                arr[j + <span class="number">1</span>], arr[j] = arr[j], arr[j + <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="Java-代码-5"><a href="#Java-代码-5" class="headerlink" title="Java 代码"></a>Java 代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">newSort</span><span class="params">(Comparable[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j + <span class="number">1</span>].compareTo(arr[j]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">                swap(arr, j, j + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//交换数组中两个数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Object[] arr, <span class="keyword">int</span> index1, <span class="keyword">int</span> index2)</span> </span>&#123;</span><br><span class="line">    Object temp = arr[index1];</span><br><span class="line">    arr[index1] = arr[index2];</span><br><span class="line">    arr[index2] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><p>也称递减增量排序算法，是插入排序的一种更高效的改进版本。</p><ul><li>希尔排序的思想是使数组中任意间隔为 h 的元素是有序的；</li><li>如果需要解决一个排序问题而又没有系统排序函数可用，可先用希尔排序，然后再考虑是否值得将它替换为更加复杂的排序算法。</li></ul><h2 id="Python3-代码-6"><a href="#Python3-代码-6" class="headerlink" title="Python3 代码"></a>Python3 代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    n = len(arr)</span><br><span class="line">    gap = n // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> gap &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(gap, n):</span><br><span class="line">            temp = arr[i]</span><br><span class="line">            j = i</span><br><span class="line">            <span class="keyword">while</span> j &gt;= gap <span class="keyword">and</span> temp &lt; arr[j - gap]:</span><br><span class="line">                arr[j] = arr[j - gap]</span><br><span class="line">                j -= gap</span><br><span class="line">            arr[j] = temp</span><br><span class="line">        gap //= <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="Java-代码-6"><a href="#Java-代码-6" class="headerlink" title="Java 代码"></a>Java 代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">newSort</span><span class="params">(Comparable[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = arr.length;</span><br><span class="line">    <span class="keyword">int</span> gap = length / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = gap; i &lt; length; i++) &#123;</span><br><span class="line">            Comparable temp = arr[i];</span><br><span class="line">            <span class="keyword">int</span> j = i;</span><br><span class="line">            <span class="keyword">for</span> (;j &gt;= gap &amp;&amp; temp.compareTo(arr[j - gap]) &lt; <span class="number">0</span>; j -= gap)</span><br><span class="line">                arr[j] = arr[j - gap];</span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h1><ol><li>选择排序算法<ul><li><a href="https://github.com/tyrotalk/Algorithms-in-Action/tree/master/01-Sorting-Basic/Code-Python/selection_sort" target="_blank" rel="noopener">Python</a></li><li><a href="https://github.com/tyrotalk/Algorithms-in-Action/tree/master/01-Sorting-Basic/Code-Java/src/sortingBasic/selectionSort" target="_blank" rel="noopener">Java</a></li></ul></li><li>插入排序算法<ul><li><a href="https://github.com/tyrotalk/Algorithms-in-Action/tree/master/01-Sorting-Basic/Code-Python/insertion_sort" target="_blank" rel="noopener">Python</a></li><li><a href="https://github.com/tyrotalk/Algorithms-in-Action/tree/master/01-Sorting-Basic/Code-Java/src/sortingBasic/insertionSort" target="_blank" rel="noopener">Java</a></li></ul></li><li>优化后插入排序算法<ul><li><a href="https://github.com/tyrotalk/Algorithms-in-Action/tree/master/01-Sorting-Basic/Code-Python/insertion_sort_advance" target="_blank" rel="noopener">Python</a></li><li><a href="https://github.com/tyrotalk/Algorithms-in-Action/tree/master/01-Sorting-Basic/Code-Java/src/sortingBasic/insertionSortAdvance" target="_blank" rel="noopener">Java</a></li></ul></li><li>冒泡排序算法<ul><li><a href="https://github.com/tyrotalk/Algorithms-in-Action/tree/master/01-Sorting-Basic/Code-Python/bubble_sort" target="_blank" rel="noopener">Python</a></li><li><a href="https://github.com/tyrotalk/Algorithms-in-Action/tree/master/01-Sorting-Basic/Code-Java/src/sortingBasic/bubbleSort" target="_blank" rel="noopener">Java</a></li></ul></li><li>希尔排序<ul><li><a href="https://github.com/tyrotalk/Algorithms-in-Action/tree/master/01-Sorting-Basic/Code-Python/shell_sort" target="_blank" rel="noopener">Python</a></li><li><a href="https://github.com/tyrotalk/Algorithms-in-Action/tree/master/01-Sorting-Basic/Code-Java/src/sortingBasic/shellSort" target="_blank" rel="noopener">Java</a></li></ul></li></ol>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>隐式和显式Intent</title>
      <link href="/2017/06/04/%E9%9A%90%E5%BC%8F%E5%92%8C%E6%98%BE%E5%BC%8FIntent.html/"/>
      <url>/2017/06/04/%E9%9A%90%E5%BC%8F%E5%92%8C%E6%98%BE%E5%BC%8FIntent.html/</url>
      <content type="html"><![CDATA[<p>Intent 是一个消息传递对象，您可以使用它从其他应用组件请求操作。Intent 可以通过多种方式促进组件之间的通信。<br><a id="more"></a></p><h1 id="基本用例"><a href="#基本用例" class="headerlink" title="基本用例"></a>基本用例</h1><ol><li>启动 Activity</li><li>启动服务</li><li>启动广播</li></ol><h1 id="Intent-类型"><a href="#Intent-类型" class="headerlink" title="Intent 类型"></a>Intent 类型</h1><ol><li>显式 Intent<br>明确知道某个组件或应用处理相关 Intent 使用显式 Intent。</li><li>隐式 Intent<br>不清楚哪个组件或应用将要处理相关 Intent 使用隐式 Intent。例如在多个浏览器应用中调用其中一个打开链接。</li></ol><h1 id="显式-Intent-示例"><a href="#显式-Intent-示例" class="headerlink" title="显式 Intent 示例"></a>显式 Intent 示例</h1><p>打开指定 Activity:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent i = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, OneActivity.class);</span><br><span class="line">startActivity(i);</span><br></pre></td></tr></table></figure></p><h1 id="隐式-Intent-示例"><a href="#隐式-Intent-示例" class="headerlink" title="隐式 Intent 示例"></a>隐式 Intent 示例</h1><p>调用邮箱应用发送邮件:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_SENDTO);</span><br><span class="line">intent.setData(Uri.parse(<span class="string">"mailto:"</span>));</span><br><span class="line">intent.putExtra(Intent.EXTRA_TEXT, <span class="comment">//text);</span></span><br><span class="line">intent.putExtra(Intent.EXTRA_SUBJECT,<span class="comment">//text);</span></span><br><span class="line"><span class="keyword">if</span> (intent.resolveActivity(getPackageManager()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">    startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h1><ol><li><a href="https://developer.android.com/guide/components/intents-filters.html?hl=zh-cn" target="_blank" rel="noopener">Intent 和 Intent 过滤器</a></li></ol>]]></content>
      
      <categories>
          
          <category> 移动开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>初识Firebase</title>
      <link href="/2017/05/20/%E5%88%9D%E8%AF%86Firebase.html/"/>
      <url>/2017/05/20/%E5%88%9D%E8%AF%86Firebase.html/</url>
      <content type="html"><![CDATA[<p><a href="http://www.studyjamscn.com/" target="_blank" rel="noopener">Google Study Jams 活动官网</a><br><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识Firebase/firebase.jpg"><br><a id="more"></a></p><h1 id="Firebase-是什么"><a href="#Firebase-是什么" class="headerlink" title="Firebase 是什么"></a>Firebase 是什么</h1><p>Firebase 是一个移动平台，可帮助快速开发优秀的应用，扩大用户群，并赚取更多收益。Firebase 由大量相辅相成的功能组成，可以自行混搭使用这些功能以满足自己的需求。</p><h1 id="Firebase-功能"><a href="#Firebase-功能" class="headerlink" title="Firebase 功能"></a>Firebase 功能</h1><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识Firebase/function.png"><h2 id="Analytics-Firebase-的核心"><a href="#Analytics-Firebase-的核心" class="headerlink" title="Analytics(Firebase 的核心)"></a>Analytics(Firebase 的核心)</h2><ol><li><a href="https://firebase.google.cn/docs/analytics/?hl=zh-cn" target="_blank" rel="noopener">Analytics</a>: 一款免费的应用测量解决方案，该解决方案可以提供关于应用使用量和用户参与度的数据分析。<h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2></li><li><a href="https://firebase.google.cn/docs/cloud-messaging/?hl=zh-cn" target="_blank" rel="noopener">Firebase Cloud Messaging (FCM)(云消息传递)</a>: 一种跨平台消息传递解决方案，您可以使用它免费且可靠地传递消息和通知。</li><li><a href="https://firebase.google.cn/docs/auth/?hl=zh-cn" target="_blank" rel="noopener">Authentication(身份验证)</a>: 提供后端服务、易用 SDK 和现成 UI 库来向应用验证用户的身份。它支持使用密码、深受欢迎的联合用户身份提供商（如 Google、Facebook 和 Twitter）等方法进行身份验证。</li><li><a href="https://firebase.google.cn/docs/database/?hl=zh-cn" target="_blank" rel="noopener">Realtime Database(实时数据库)</a>: 一种云托管数据库。数据库将数据存储为 JSON，并以实时方式与每个连接的客户端同步。 </li><li><a href="https://firebase.google.cn/docs/storage/?hl=zh-cn" target="_blank" rel="noopener">Storage(存储)</a>: 专为需要存储和呈现用户生成的内容（例如照片或视频）的应用开发者构建。</li><li><a href="https://firebase.google.cn/docs/hosting/?hl=zh-cn" target="_blank" rel="noopener">Hosting(托管)</a>: 为网络应用提供快速安全的静态托管。</li><li><a href="https://firebase.google.cn/docs/remote-config/?hl=zh-cn" target="_blank" rel="noopener">Remote Config(远程配置)</a>: 在不发布应用更新的情况下更改您的应用的行为和外观。</li><li><a href="https://firebase.google.cn/docs/test-lab/?hl=zh-cn" target="_blank" rel="noopener">Test Lab for Android(测试实验室)</a>: 在 Google 数据中心内托管的设备上测试您的应用。</li><li><a href="https://firebase.google.cn/docs/crash/?hl=zh-cn" target="_blank" rel="noopener">Crash Reporting(崩溃报告)</a>: 综合性可操作信息，旨在帮助诊断和修复应用中的问题。<h2 id="增长"><a href="#增长" class="headerlink" title="增长"></a>增长</h2></li><li><a href="https://firebase.google.cn/docs/notifications/?hl=zh-cn" target="_blank" rel="noopener">Notifications(通知)</a>: 一种支持为移动应用开发者发送具有针对性的用户通知的免费服务。</li><li><a href="https://firebase.google.cn/docs/app-indexing/?hl=zh-cn" target="_blank" rel="noopener">App Indexing</a>: 将应用纳入 Google 搜索。 如果当用户搜索相关内容时已安装您的应用，则他们可以直接从搜索结果中启动您的应用。 如果用户还未安装应用，则将在搜索结果中显示安装卡片。添加 App Indexing 推广 Google 搜索内的应用结果类型，并提供查询自动填充功能。</li><li><a href="https://firebase.google.cn/docs/dynamic-links/?hl=zh-cn" target="_blank" rel="noopener">Dynamic Links(动态链接)</a>: 能够动态更改其行为以便在不同的平台提供最佳体验的智能网址。</li><li><a href="https://firebase.google.cn/docs/invites/?hl=zh-cn" target="_blank" rel="noopener">Invites(邀请)</a>: 用于发送个性化电子邮件和短信邀请， 载入用户和衡量邀请影响的跨平台解决方案。</li><li><a href="https://firebase.google.cn/docs/adwords/?hl=zh-cn" target="_blank" rel="noopener">AdWords</a>: 通过在线广告赢得潜在客户。<h2 id="获利"><a href="#获利" class="headerlink" title="获利"></a>获利</h2></li><li><a href="https://firebase.google.cn/docs/admob/?hl=zh-cn" target="_blank" rel="noopener">AdMob by Google</a>: 通过移动应用及针对性应用内广告获利的最简单方法。</li></ol><h1 id="Firebase-连接-Android-项目"><a href="#Firebase-连接-Android-项目" class="headerlink" title="Firebase 连接 Android 项目"></a>Firebase 连接 Android 项目</h1><h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><ol><li>一台运行 Android 2.3 (Gingerbread) 或更新版本并运行 Google Play 服务 9.6.1 或更新版本的设备。<img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识Firebase/设备信息.jpeg"> <img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识Firebase/GooglePlayService.jpeg"></li><li>Android SDK包含 Google Play Services 30 或更高版本、Google Repository 26 或更高版本。<img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识Firebase/SDKTools.png"></li><li>Android Studio 1.5 或更高版本。<img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识Firebase/Updates.png"></li></ol><h2 id="将-Firebase-添加至应用"><a href="#将-Firebase-添加至应用" class="headerlink" title="将 Firebase 添加至应用"></a>将 Firebase 添加至应用</h2><ol><li>创建 Android Studio 项目</li><li>在 <a href="https://console.firebase.google.com/?hl=zh-cn" target="_blank" rel="noopener">Firebase 控制台</a>创建项目<img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识Firebase/创建项目.png"><blockquote><p>“国家／地区” 与货币有关。</p></blockquote></li><li><p>将 Firebase 添加到您的 Android 应用</p><ol><li>点击带有 Android 标志的大按钮；<img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识Firebase/关联应用.png"></li><li>注册应用<img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识Firebase/注册应用.png"><blockquote><ul><li>软件包名称可在<strong>应用级 build.gradle 文件</strong>查看<img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识Firebase/applicationID.png"></li><li>查看调试签名证书 SHA1<ul><li><strong>方法一</strong>: 在终端(macOS系统)中使用<code>$ keytool -exportcert -alias androiddebugkey -keystore ~/.android/debug.keystore -list -v -storepass android</code>命令查看调试签名证书 SHA1。</li><li><strong>方法二</strong>: 在 Android Studio 中获取<img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识Firebase/SHA1.png"></li></ul></li></ul></blockquote></li><li>下载配置文件<img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识Firebase/下载配置文件.png"><blockquote><p><strong>注意</strong>: 当你的 Firebase 配置更改后，需要重新下载 google-services.json 文件到你的项目。</p></blockquote></li><li>添加 Firebase SDK<img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识Firebase/添加FirebaseSDK.png"><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识Firebase/gradle.png"></li><li><p>添加 Firebase 可用库<br>在应用级 build.gradle 文件中 dependencies 处 添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  // ...</span><br><span class="line">  compile &apos;com.google.firebase:firebase-core:9.6.1&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>验证 Firebase 是否正确初始化<br>在 Android studio 中运行项目，查看 logcat，看到<strong>FirebaseApp initialization successful</strong>极为成功。</p><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识Firebase/验证.png"></li></ol></li></ol><h1 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h1><ol><li><a href="https://firebase.google.cn/?hl=zh-cn" target="_blank" rel="noopener">Firebase 官网</a></li><li><a href="https://firebase.google.cn/docs/android/setup?hl=zh-cn#available_libraries" target="_blank" rel="noopener">Firebase 可用库</a></li><li><a href="https://codelabs.developers.google.com/codelabs/firebase-android/#0" target="_blank" rel="noopener">官方教程</a></li><li>Android Studio 项目示例: <a href="https://firebase.google.com/docs/samples/#android" target="_blank" rel="noopener">Firebase 官方 FriendlyChat 示例</a></li></ol>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Firebase </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Google Study Jams 面向对象中的小东西</title>
      <link href="/2017/05/15/Google-Study-Jams-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84%E5%B0%8F%E4%B8%9C%E8%A5%BF.html/"/>
      <url>/2017/05/15/Google-Study-Jams-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84%E5%B0%8F%E4%B8%9C%E8%A5%BF.html/</url>
      <content type="html"><![CDATA[<h1 id="添加复选框"><a href="#添加复选框" class="headerlink" title="添加复选框"></a>添加复选框</h1><p>添加布局文件:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">CheckBox</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:id</span>=<span class="string">"@+id/_checkbox"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:text</span>=<span class="string">"checkbox"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>判断 CheckBox 是否选中(Java 代码):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CheckBox mCheckBox = (CheckBox) findViewById(R.id._checkbox);</span><br><span class="line"><span class="keyword">boolean</span> hasCheckBox = mCheckBox.isChecked();</span><br></pre></td></tr></table></figure></p><h1 id="添加画面滚动"><a href="#添加画面滚动" class="headerlink" title="添加画面滚动"></a>添加画面滚动</h1><p>更改布局文件，使用:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ScrollView</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line">&lt;/ScrollView&gt;</span><br></pre></td></tr></table></figure></p><h1 id="添加-EditText-文本框"><a href="#添加-EditText-文本框" class="headerlink" title="添加 EditText 文本框"></a>添加 EditText 文本框</h1><p>添加布局文件:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:id</span>=<span class="string">"@+id/editText_view"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:hint</span>=<span class="string">"editText"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:inputType</span>=<span class="string">"textMultiLine"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>获取文本(java 代码):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EditText mEditText = (EditText) findViewById(R.id.editText_view);</span><br><span class="line">String text = mEditText.getText().toString();</span><br></pre></td></tr></table></figure></p><h1 id="使用-Intent-发送电子邮件"><a href="#使用-Intent-发送电子邮件" class="headerlink" title="使用 Intent 发送电子邮件"></a>使用 Intent 发送电子邮件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_SENDTO);</span><br><span class="line">intent.setData(Uri.parse(<span class="string">"mailto:"</span>)); <span class="comment">// only email apps should handle this</span></span><br><span class="line">intent.putExtra(Intent.EXTRA_TEXT, text); <span class="comment">// 邮件内容</span></span><br><span class="line">intent.putExtra(Intent.EXTRA_SUBJECT, subject); <span class="comment">// 邮件主题</span></span><br><span class="line"><span class="keyword">if</span> (intent.resolveActivity(getPackageManager()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="本地化"><a href="#本地化" class="headerlink" title="本地化"></a>本地化</h1><ol><li>根据应用的语言使用环境显示不同的语言，可在 <em>string.xml</em> 中打开 <strong>Open editor</strong> 配置;</li><li>当翻译的文本中有一部分不需要翻译时可以添加如 <code>&lt;xliff:g id=&quot;name&quot; example=&quot;Jack&quot;&gt;%%&lt;/xliff:g&gt;</code> 的文本。<blockquote><p>id: 不需要翻译文本的 id<br>example: 示例<br>%s: 字符串类型</p></blockquote></li></ol><h1 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h1><p><a href="https://s3.cn-north-1.amazonaws.com.cn/static-documents/nd803/Common+Android+Views+Cheat+Sheet.pdf" target="_blank" rel="noopener">常见 Android 视图备忘单链接</a><br><a href="http://developer.android.youdaxue.com/guide/components/intents-common.html?utm_source=udacity&amp;utm_medium=course&amp;utm_campaign=android_basics" target="_blank" rel="noopener">常见 Intent 指南</a></p>]]></content>
      
      <categories>
          
          <category> 移动开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>创建新的Activity</title>
      <link href="/2017/05/07/%E5%88%9B%E5%BB%BA%E6%96%B0%E7%9A%84Activity.html/"/>
      <url>/2017/05/07/%E5%88%9B%E5%BB%BA%E6%96%B0%E7%9A%84Activity.html/</url>
      <content type="html"><![CDATA[<h1 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h1><p>定义 <em>activity_main.xml</em> 、<em>activity_one.cml</em> 和与之对应的 <em>MainActivity.class</em> 、<em>OneActivity.class</em> 文件。<br>   <img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/创建新的Activity/定义.png"></p><a id="more"></a><h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><ol><li><p>在 <em>MainActivity.class</em> 定义一个 <strong>openOneList 方法</strong>，用于在 <em>activity_main.cml</em> 中打开 <em>activity_one.xml</em>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openOneList</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        Intent i = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, OneActivity.class);</span><br><span class="line">        startActivity(i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>在 <em>activity_main.xml</em> 中添加一个 Button:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"打开另一个Activity"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:onClick</span>=<span class="string">"openOneList"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>点击这个按钮会由 <strong>onClick</strong> 启动 <strong>openOneList 方法</strong>。</p></li><li><p>在 <em>activity_one.xml</em> 添加一个 TextView 用于表示 打开成功:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"这是另一个Activity"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"32sp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@android:color/holo_orange_light"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 <em>AndroidManifest.xml</em> 文件的 <em>application</em> 中添加 <code>&lt;activity android:name=&quot;.OneActivity&quot;/&gt;</code>。</p></li><li>演示   <img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/创建新的Activity/anotherActivity.gif"></li></ol><h1 id="使用事件监听器"><a href="#使用事件监听器" class="headerlink" title="使用事件监听器"></a>使用事件监听器</h1><ol><li><p>同样在 <em>activity_main.xml</em> 中添加一个 Button，并加上id:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/button_view"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"打开另一个Activity"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 <em>MainActivity.class</em> 连接 Button 视图:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Button button = (Button)findViewById(R.id.button_view);</span><br></pre></td></tr></table></figure></li><li><p>在 <em>MainActivity.class</em> 中创建事件监听器，重写 onClick 方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                Intent i = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, OneActivity.class);</span><br><span class="line">                startActivity(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> 移动开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android Studio 导入项目慢解决方法</title>
      <link href="/2017/05/01/Android-Studio-%E5%AF%BC%E5%85%A5%E9%A1%B9%E7%9B%AE%E6%85%A2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html/"/>
      <url>/2017/05/01/Android-Studio-%E5%AF%BC%E5%85%A5%E9%A1%B9%E7%9B%AE%E6%85%A2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html/</url>
      <content type="html"><![CDATA[<p>很多时候我们在 Android Studio 中导入项目时会很慢，一直处在 <strong>Building ‘#project’ Gradle project info</strong> 的状态。<br><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/Android-Studio-导入项目慢解决方法/info.png"><br><a id="more"></a></p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>导入很慢是因为 Android Studio 在下载适配的的 Gradle 文件，由于一些众所周知的原因，在国内下载非常慢。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><ol><li>随意打开一个已有的项目，找到 <strong>gradle-wrapper.properties</strong> 文件（在 <em>/gradle/wrappergradle-wrapper.properties</em> 中）；</li><li>将 <strong>distributionUrl</strong> 整行复制；<img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/Android-Studio-导入项目慢解决方法/gradle-wrapper.png"></li><li>在文件系统中打开要导入项目的 <strong>gradle-wrapper.properties</strong> 文件，将 <strong>distributionUrl</strong> 整行粘贴覆盖；<img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/Android-Studio-导入项目慢解决方法/distributionUrl.png"></li><li>继续在文件系统中打开要导入项目的 <strong>项目级 build.gradle</strong> 文件（／build.gradle），更改 <strong>Gradle</strong> 插件版本号（版本匹配关系可在<a href="https://developer.android.com/studio/releases/gradle-plugin.html" target="_blank" rel="noopener">官方文档</a>中查看）；<img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/Android-Studio-导入项目慢解决方法/build.gradle.png"></li><li>再次在 Android studio 中导入项目就行了。</li></ol>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Android Studio </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 基础：函数</title>
      <link href="/2017/04/26/Python-%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%87%BD%E6%95%B0.html/"/>
      <url>/2017/04/26/Python-%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%87%BD%E6%95%B0.html/</url>
      <content type="html"><![CDATA[<p>函数是带名字的代码块，用于完成具体的工作。要执行函数定义的特定任务，可调用该函数。</p><a id="more"></a><h1 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无参</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> &lt;函数名&gt;<span class="params">()</span>:</span></span><br><span class="line">    &lt;函数体&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有参</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> &lt;函数名&gt;<span class="params">(&lt;形参/实参&gt;)</span>:</span></span><br><span class="line">    &lt;函数体&gt;</span><br></pre></td></tr></table></figure><h1 id="传递实参"><a href="#传递实参" class="headerlink" title="传递实参"></a>传递实参</h1><p>函数定义中可能包含多个形参，所以函数调用中也可能包含多个实参。</p><h2 id="位置实参"><a href="#位置实参" class="headerlink" title="位置实参"></a>位置实参</h2><p>调用函数时，将函数调用中的每个实参顺序与函数定义中的形参顺序一一对应。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">language</span><span class="params">(name, type)</span>:</span></span><br><span class="line">        print(name + <span class="string">": "</span> + type)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>language(<span class="string">'Ted'</span>, <span class="string">'Python'</span>)</span><br><span class="line">Ted: Python</span><br></pre></td></tr></table></figure></p><h2 id="关键字实参"><a href="#关键字实参" class="headerlink" title="关键字实参"></a>关键字实参</h2><p>关键字实参是传递给函数的名称—值对。在函数调用中直接讲实参和形参名关联起来。关键字实参无需考虑函数调用中的实参顺序。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">language</span><span class="params">(name, type)</span>:</span></span><br><span class="line">        print(name + <span class="string">": "</span> + type)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>language(name=<span class="string">'Ted'</span>, type=<span class="string">'Python'</span>)</span><br><span class="line">Ted: Python</span><br></pre></td></tr></table></figure></p><h2 id="形参默认值"><a href="#形参默认值" class="headerlink" title="形参默认值"></a>形参默认值</h2><p>编写函数时，可以给每个形参指定默认值。在调用函数中如果给形参提供了实参，将使用提供的实参值；否则，将使用形参的默认值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">language</span><span class="params">(name, type=<span class="string">'Python'</span>)</span>:</span></span><br><span class="line">        print(name + <span class="string">": "</span> + type)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>language(<span class="string">'Ted'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>language(name=<span class="string">'Ted'</span>)</span><br><span class="line">Ted: Python</span><br><span class="line">Ted: Python</span><br></pre></td></tr></table></figure></p><h1 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h1><p>函数可以处理一些数据，并用 <code>return()</code> 语句返回一个或一组值。返回的值被称为返回值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">language</span><span class="params">(name, type)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">": "</span> + type</span><br></pre></td></tr></table></figure></p><blockquote><p>如果没有return语句，函数执行完毕后也会返回结果，只是结果为 <code>None</code>。<br><code>return None</code> 可以简写为 <code>return</code>。</p></blockquote><h1 id="传递任意数量的实参"><a href="#传递任意数量的实参" class="headerlink" title="传递任意数量的实参"></a>传递任意数量的实参</h1><p>有时函数需要任意数量的实参，可在函数定义中的形参名前加星号。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">language</span><span class="params">(*type)</span>:</span></span><br><span class="line">        print(type)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>language(<span class="string">'Python'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>language(<span class="string">'Python'</span>, <span class="string">'Java'</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">'Python'</span>,)</span><br><span class="line">(<span class="string">'Python'</span>, <span class="string">'Java'</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>形参名 <code>*type</code> 中的星号让 Python 创建一个名为 <code>type</code> 的空元组，并将收到的所有值都封装到这个元组中。</p></blockquote><h2 id="传递不同类型的实参"><a href="#传递不同类型的实参" class="headerlink" title="传递不同类型的实参"></a>传递不同类型的实参</h2><p>如果要让函数接受不同类型的实参，必须在函数定义中将接纳任意数量实参的形参放在最后。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">language</span><span class="params">(name, *type)</span>:</span></span><br><span class="line">        print(&#123;name: type&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>language(<span class="string">'Ted'</span>, <span class="string">'Python'</span>, <span class="string">'Java'</span>)</span><br><span class="line">&#123;<span class="string">'Ted'</span>: (<span class="string">'Python'</span>, <span class="string">'Java'</span>)&#125;</span><br></pre></td></tr></table></figure></p><h2 id="使用任意数量的关键字实参"><a href="#使用任意数量的关键字实参" class="headerlink" title="使用任意数量的关键字实参"></a>使用任意数量的关键字实参</h2><p>有时候，需要接受任意数量的实参，但预先不知道传递给函数的会是什么样的信息。可将函数编写成能够接受任意数量的 键-值 对。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">language</span><span class="params">(name, **type)</span>:</span></span><br><span class="line">        dict = &#123;&#125;</span><br><span class="line">        dict[<span class="string">'name'</span>] = name</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> type.items():</span><br><span class="line">            dict[key] = value</span><br><span class="line">        print(dict)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>language(<span class="string">'Ted'</span>, one=<span class="string">'Python'</span>, two=<span class="string">'Java'</span>)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'Ted'</span>, <span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>形参名 <code>**type</code> 中的两个星号让 Python 创建一个名为 <code>type</code> 的空字典，并将收到的所有名称—值对都封装到这个字典中。</p></blockquote><h1 id="将函数存储在模块中"><a href="#将函数存储在模块中" class="headerlink" title="将函数存储在模块中"></a>将函数存储在模块中</h1><p>可将定义的函数放在一个独立文件（模块）中，使用 <code>import</code> 语句导入到需要使用的程序文件中。<br>导入模块的方法有：</p><ol><li>导入整个模块</li><li>导入特定的函数</li><li>使用 as 给函数指定别名</li><li>使用 as 给模块指定别名</li><li>导入模块中的所有函数</li></ol><h2 id="导入整个模块"><a href="#导入整个模块" class="headerlink" title="导入整个模块"></a>导入整个模块</h2><p>创建 <code>language.py</code> 模块文件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_language</span><span class="params">(name, *type)</span>:</span></span><br><span class="line">    print(&#123;name: type&#125;)</span><br></pre></td></tr></table></figure></p><p>创建 <code>languages.py</code> 文件，在其中使用 <code>make_language()</code> 函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> language</span><br><span class="line">language.make_language(<span class="string">'Ted'</span>, <span class="string">'Python'</span>, <span class="string">'Java'</span>)</span><br></pre></td></tr></table></figure></p><h2 id="导入特定的函数"><a href="#导入特定的函数" class="headerlink" title="导入特定的函数"></a>导入特定的函数</h2><p>语法：<br><code>from module_name import function_name</code><br>或导入任意数量的函数：<br><code>from module_name import function_name_1, function_name_2</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line"><span class="keyword">from</span> language <span class="keyword">import</span> make_language</span><br><span class="line"></span><br><span class="line">make_language(<span class="string">'Ted'</span>, <span class="string">'Python'</span>, <span class="string">'Java'</span>)</span><br></pre></td></tr></table></figure></p><h2 id="使用-as-给函数指定别名"><a href="#使用-as-给函数指定别名" class="headerlink" title="使用 as 给函数指定别名"></a>使用 <code>as</code> 给函数指定别名</h2><p>语法：<br><code>from module_name import function_name as fn</code></p><blockquote><p>将导入的函数名 <code>function_name</code> 重命名为 <code>fn</code>。</p></blockquote><h2 id="使用-as-给模块指定别名"><a href="#使用-as-给模块指定别名" class="headerlink" title="使用 as 给模块指定别名"></a>使用 as 给模块指定别名</h2><p>语法：<br><code>import module_name as mn</code></p><blockquote><p>将导入的模块名 <code>module_name</code> 重命名为 <code>mn</code>，函数名不变。</p></blockquote><h2 id="导入模块中的所有函数"><a href="#导入模块中的所有函数" class="headerlink" title="导入模块中的所有函数"></a>导入模块中的所有函数</h2><p>语法：<br><code>from module_name import *</code></p><h1 id="函数编写规范"><a href="#函数编写规范" class="headerlink" title="函数编写规范"></a>函数编写规范</h1><ol><li>给函数指定描述性名称，且只在其中使用小写字母和下划线。</li><li>每个函数都应包含简要地阐述其功能的注释，该注释应紧跟在函数定义后面，并采用文档字符串格式。</li><li>给形参指定默认值时，等号两边不要有空格。函数调用中的关键字实参，等号两边也不要有空格</li><li>建议代码行的长度不要超过79字符，这样只要编辑器窗口适中，就能看到整行代码。</li><li>如果程序或模块包含多个函数，可使用两个空行将相邻的函数分开。</li><li>所有的import语句都应放在文件开头，在文件开头使用了注释来描述整个程序时例外。</li></ol>]]></content>
      
      <categories>
          
          <category> Python 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>篮球计分器实践</title>
      <link href="/2017/04/21/%E7%AF%AE%E7%90%83%E8%AE%A1%E5%88%86%E5%99%A8%E5%AE%9E%E8%B7%B5.html/"/>
      <url>/2017/04/21/%E7%AF%AE%E7%90%83%E8%AE%A1%E5%88%86%E5%99%A8%E5%AE%9E%E8%B7%B5.html/</url>
      <content type="html"><![CDATA[<p><a href="http://www.studyjamscn.com/" target="_blank" rel="noopener">Google Study Jams 活动官网</a><br><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/篮球计分器实践/developers.png"><br><a id="more"></a></p><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>根据两个球队所得分数（1、2、3分）累计各队总分并展示，比赛结束后分数清零。</p><h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><p>这里使用 <strong>RelativeLayout</strong>，包含有：</p><ol><li>ImageView(背景图片）</li><li><p>LinearLayout(A队、B队)</p><ul><li><p>LinearLayout(A队)</p><blockquote><p>TextView(队名)<br>TextView(分数)<br>Button(+1分)<br>Button(+2分)<br>Button(+3分)</p></blockquote></li><li><p>LinearLayout(A队)</p><blockquote><p>TextView(队名)<br>TextView(分数)<br>Button(+1分)<br>Button(+2分)<br>Button(+3分)</p></blockquote></li></ul></li><li><p>button(重置按钮)</p></li></ol><h1 id="UI优化"><a href="#UI优化" class="headerlink" title="UI优化"></a>UI优化</h1><p>操作栏和按钮颜色在styles.xml中统一设置。<br><strong>colorPrimary</strong>将更改操作栏的颜色。<strong>colorButtonNormal</strong>将更改按钮的颜色。</p><blockquote><p>注意：<strong>colorButtonNormal</strong>只能在搭载 API 22 及以上版本的手机上起到作用。如果手机版本更低，这些按钮将不会变成设置的颜色。</p></blockquote><h1 id="功能实现-代码"><a href="#功能实现-代码" class="headerlink" title="功能实现(代码)"></a>功能实现(代码)</h1><ol><li><p>activity_main.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">"com.example.android.courtcounter.MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:scaleType</span>=<span class="string">"centerCrop"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">"@drawable/basketball"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentStart</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentTop</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:fontFamily</span>=<span class="string">"sans-serif-bold"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:padding</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"Team A"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">"#616161"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">"20sp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/team_a_score"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:fontFamily</span>=<span class="string">"sans-serif-light"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:padding</span>=<span class="string">"4dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">"#ff0000"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">"112sp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginLeft</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginRight</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:onClick</span>=<span class="string">"addThreeForTeamA"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"+3 分"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginLeft</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginRight</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:onClick</span>=<span class="string">"addTwoForTeamA"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"+2 分"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginLeft</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginRight</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:onClick</span>=<span class="string">"addOneForTeamA"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"+1 分"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"1dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">"@android:color/darker_gray"</span>&gt;</span><span class="tag">&lt;/<span class="name">View</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:fontFamily</span>=<span class="string">"sans-serif-bold"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:padding</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"Team B"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">"#616161"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">"20sp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/team_b_score"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:fontFamily</span>=<span class="string">"sans-serif-light"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:padding</span>=<span class="string">"4dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">"#0000ff"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">"112sp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginLeft</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginRight</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:onClick</span>=<span class="string">"addThreeForTeamB"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"+3 分"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginLeft</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginRight</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:onClick</span>=<span class="string">"addTwoForTeamB"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"+2 分"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginLeft</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginRight</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:onClick</span>=<span class="string">"addOneForTeamB"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"+1 分"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"32dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:onClick</span>=<span class="string">"resetScoreForTeamAandB"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"重置"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>MainActivity.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.android.courtcounter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> android.content.DialogInterface;</span><br><span class="line"><span class="keyword">import</span> android.app.AlertDialog;</span><br><span class="line"><span class="keyword">import</span> android.app.AlertDialog.Builder;</span><br><span class="line"><span class="keyword">import</span> android.content.DialogInterface.OnClickListener;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Tracks score for Team A</span></span><br><span class="line">    <span class="keyword">int</span> scoreTeamA = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// Tracks score for Team B</span></span><br><span class="line">    <span class="keyword">int</span> scoreTeamB = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * increase the score for Team A by one point</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOneForTeamA</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        scoreTeamA += <span class="number">1</span>;</span><br><span class="line">        displayForTeamA(scoreTeamA);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * increase the score for Team A by two point</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTwoForTeamA</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        scoreTeamA += <span class="number">2</span>;</span><br><span class="line">        displayForTeamA(scoreTeamA);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * increase the score for Team A by three point</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addThreeForTeamA</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        scoreTeamA += <span class="number">3</span>;</span><br><span class="line">        displayForTeamA(scoreTeamA);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Displays the given score for Team A.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayForTeamA</span><span class="params">(<span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">        TextView scoreView = (TextView) findViewById(R.id.team_a_score);</span><br><span class="line">        scoreView.setText(String.valueOf(score));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * increase the score for Team B by one point</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOneForTeamB</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        scoreTeamB += <span class="number">1</span>;</span><br><span class="line">        displayForTeamB(scoreTeamB);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * increase the score for Team B by two point</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTwoForTeamB</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        scoreTeamB += <span class="number">2</span>;</span><br><span class="line">        displayForTeamB(scoreTeamB);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * increase the score for Team B by three point</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addThreeForTeamB</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        scoreTeamB += <span class="number">3</span>;</span><br><span class="line">        displayForTeamB(scoreTeamB);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Displays the given score for Team B.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayForTeamB</span><span class="params">(<span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">        TextView scoreView = (TextView) findViewById(R.id.team_b_score);</span><br><span class="line">        scoreView.setText(String.valueOf(score));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * reset the score for Team A both and Team B</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resetScoreForTeamAandB</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        AlertDialog.Builder builder = <span class="keyword">new</span> Builder(<span class="keyword">this</span>);</span><br><span class="line">        builder.setTitle(<span class="string">"重置"</span>);<span class="comment">//设置对话框的标题</span></span><br><span class="line">        builder.setMessage(<span class="string">"你确定要重置所有分数吗？"</span>);<span class="comment">//设置对话框的内容</span></span><br><span class="line">        builder.setPositiveButton(<span class="string">"确定"</span>, <span class="keyword">new</span> OnClickListener() &#123;  <span class="comment">//这个是设置确定按钮</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface arg0, <span class="keyword">int</span> arg1)</span> </span>&#123;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"重置成功"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                scoreTeamA = <span class="number">0</span>;</span><br><span class="line">                displayForTeamA(scoreTeamA);</span><br><span class="line">                scoreTeamB = <span class="number">0</span>;</span><br><span class="line">                displayForTeamB(scoreTeamB);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        builder.setNegativeButton(<span class="string">"取消"</span>, <span class="keyword">new</span> OnClickListener() &#123;  <span class="comment">//取消按钮</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface arg0, <span class="keyword">int</span> arg1)</span> </span>&#123;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"重置取消"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        AlertDialog b = builder.create();</span><br><span class="line">        b.show(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>styles.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Base application theme. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>#FFA000<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>#FFC107<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorButtonNormal"</span>&gt;</span>#FFC107<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="运行展示"><a href="#运行展示" class="headerlink" title="运行展示"></a>运行展示</h1><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/篮球计分器实践/展示01.png"> <img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/篮球计分器实践/展示02.png"> <img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/篮球计分器实践/展示03.png"><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>屏幕横屏显示时显示如下图：<br><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/篮球计分器实践/问题.png"></p><h2 id="解决方法一"><a href="#解决方法一" class="headerlink" title="解决方法一"></a>解决方法一</h2><p>限定屏幕方向为竖屏:<br>在 AndroidManifest.xml 中添加 android:screenOrientation=”portrait”; portrait 为竖屏。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"com.example.android.courtcounter"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">".MainActivity"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:screenOrientation</span>=<span class="string">"portrait"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="解决方法二"><a href="#解决方法二" class="headerlink" title="解决方法二"></a>解决方法二</h2><p>使用<strong>ScrollView</strong>加滚动条。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ScrollView</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fillViewport</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- everything you already have --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p><strong>注意</strong>:这种方法下横竖屏切换时原有数据会被初始化，这是因为Android Activity 有生命周期，后面我会写一篇文章介绍Activity生命周期。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 移动开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>认识ViewGroup</title>
      <link href="/2017/04/17/%E8%AE%A4%E8%AF%86ViewGroup.html/"/>
      <url>/2017/04/17/%E8%AE%A4%E8%AF%86ViewGroup.html/</url>
      <content type="html"><![CDATA[<p><a href="http://www.studyjamscn.com/" target="_blank" rel="noopener">Google Study Jams 活动官网</a><br><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/认识ViewGroup/developers.png"><br><a id="more"></a></p><h1 id="认识ViewGroup"><a href="#认识ViewGroup" class="headerlink" title="认识ViewGroup"></a>认识ViewGroup</h1><hr><p><strong>ViewGroup</strong> 是大视图，其中可包含小视图。小视图称为 ViewGroup 的子视图，可以是 TextView 或ImageView。ViewGroup 称为其子视图的父视图。<strong>ViewGroup</strong> 本身可能是透明的，仅用于包含及放置其子视图。但其子视图几乎始终可见。</p><h1 id="锚定视图"><a href="#锚定视图" class="headerlink" title="锚定视图"></a>锚定视图</h1><hr><p><strong>锚定</strong>——将视图锚定到屏幕的四条边是最容易的方法。当屏幕方向改变时，视图可以整齐的锚定于屏幕边缘。<br>使用RelativeLayout，可以很容易实现<strong>锚定视图</strong>。<br><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/认识ViewGroup/Anchored.jpg"> <img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/认识ViewGroup/Anchored-horizontal.jpg"><br>将 A、B、C 固定后，在横屏和竖屏下相对位置不变。</p><h1 id="线性布局-LinearLayout"><a href="#线性布局-LinearLayout" class="headerlink" title="线性布局(LinearLayout)"></a>线性布局(LinearLayout)</h1><hr><p><strong>LinearLayout</strong> 用于使所有子视图在单个方向（垂直或水平）保持对齐。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:orientation</span>=<span class="string">"vertical"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:text</span>=<span class="string">"some content"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:text</span>=<span class="string">"some content"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:text</span>=<span class="string">"some content"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/认识ViewGroup/LinearLayout.png"><h2 id="属性"><a href="#属性" class="headerlink" title="属性:"></a>属性:</h2><ol><li><code>android:orientation=&quot;vertical&quot;</code>: 垂直分布；<br><code>android:orientation=&quot;horizontal&quot;</code>: 水平分布。</li><li><code>android:layout_gravity</code>: 表示该组件在父控件中的位置;<br><code>android:gravity</code>: 表示该组件的子组件在自身中的位置。<blockquote><p>对于<strong>layout_gravity</strong>:</p><ul><li>属性可选值:<br>top, bottom, left, right, center, center_vertical, center_horizontal, fill, fill_vertical, fill_horizontal, clip_vertical, clip_horizontal, start, end；一个属性可以包含多个值，用 ‘|’ 分开即可；</li><li>当<code>android:orientation=&quot;vertical&quot;</code>时，只有水平方向的设置(left,right,center_horizontal)生效，垂直方向的设置无效；</li><li>当<code>android:orientation=&quot;horizontal&quot;</code>时，只有垂直方向的设置(top,bottom,center_vertical)生效，水平方向的设置无效；</li><li><strong>layout_gravity</strong> 对 <strong>RelativeLayout(相对布局)</strong> 无效。</li></ul></blockquote></li></ol><h2 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h2><p>垂直时:<code>layout_height:0dp</code><br>水平时:<code>layout_width:0dp</code><br>根据<strong>layout_weight</strong>的值所占比例分配子视图的高度或宽度。<br>权重layout_weight在不设置情况下默认为0。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@android:color/holo_blue_dark"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"some content"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@android:color/holo_orange_dark"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"some content"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/认识ViewGroup/weight.png"><h1 id="相对布局-RelativeLayout"><a href="#相对布局-RelativeLayout" class="headerlink" title="相对布局(RelativeLayout)"></a>相对布局(RelativeLayout)</h1><hr><p><strong>RelativeLayout</strong> 是一种常见的 ViewGroup，允许我们相对于其自身的边缘放置其子项； 还允许我们相对于彼此之间的关系来安排子项。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_alignParentTop</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:text</span>=<span class="string">"upper left"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_alignParentTop</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:text</span>=<span class="string">"upper right"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:text</span>=<span class="string">"lower left"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/认识ViewGroup/RelativeLayout.png"><blockquote><p><strong>RelativeLayout</strong> 视图会发生重叠，视图标签顺序决定视图在屏幕上放置的顺序。</p></blockquote><h1 id="布局优化-使用padding、margin"><a href="#布局优化-使用padding、margin" class="headerlink" title="布局优化(使用padding、margin)"></a>布局优化(使用padding、margin)</h1><hr><ol><li><strong>android:padding</strong> 设置内边距；</li><li><strong>android:layout_margin</strong> 让视图的边留出一部分空白，使两个视图相互不接触，</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><hr><ol><li><a href="https://s3.cn-north-1.amazonaws.com.cn/static-documents/nd803/Android+for+All+%EF%BC%8D+Vocabulary+Glossary.pdf" target="_blank" rel="noopener">Android 词汇术语表</a></li><li><a href="https://developer.android.com/guide/topics/ui/layout/linear.html?hl=zh-cn" target="_blank" rel="noopener">Android 开发者文档: 线性布局</a></li><li><a href="https://developer.android.com/reference/android/widget/LinearLayout.LayoutParams.html#attr_android:layout_gravity" target="_blank" rel="noopener">Layout_gravity | Android Developers</a></li></ol>]]></content>
      
      <categories>
          
          <category> 移动开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 基础：字典</title>
      <link href="/2017/04/11/Python-%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%AD%97%E5%85%B8.html/"/>
      <url>/2017/04/11/Python-%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%AD%97%E5%85%B8.html/</url>
      <content type="html"><![CDATA[<p>在 Python 中，字典是一系列<strong>键 — 值（key - value）</strong>对。每个键都与一个值相关联，你可以使用键来访问与之相关联的值。可将任何 Python 对象用作字典中的值。</p><a id="more"></a><blockquote><p><strong>全文采用 Python3 版本</strong></p></blockquote><h1 id="字典的特点"><a href="#字典的特点" class="headerlink" title="字典的特点"></a>字典的特点</h1><ol><li>查找速度快；</li><li>存储的 <strong>key - value</strong> 对是没有顺序的；</li><li>作为 <strong>key</strong> 的元素必须不可变。</li></ol><h1 id="更改字典的键-—-值对"><a href="#更改字典的键-—-值对" class="headerlink" title="更改字典的键 — 值对"></a>更改字典的<strong>键 — 值</strong>对</h1><ol><li><p>添加<strong>键 — 值</strong>对<br> 添加<strong>键 — 值</strong>对，可依次指定字典名、用方括号括起的键和相关联的值。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>language = &#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(language)</span><br><span class="line">&#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>language[<span class="string">'three'</span>] = <span class="string">'JavaScript'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(language)</span><br><span class="line">&#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>, <span class="string">'three'</span>: <span class="string">'JavaScript'</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改字典的值<br> 修改字典中的值，可依次指定字典名、用方括号括起的键以及与该键相关联的新值。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>language = &#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>, <span class="string">'three'</span>: <span class="string">'JavaScript'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(language)</span><br><span class="line">&#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>, <span class="string">'three'</span>: <span class="string">'JavaScript'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>language[<span class="string">'three'</span>] = <span class="string">'C++'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(language)</span><br><span class="line">&#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>, <span class="string">'three'</span>: <span class="string">'C++'</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除<strong>键 — 值</strong>对<br> 可使用 <code>del</code> 语句彻底删除<strong>键 — 值</strong>对</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>language = &#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>, <span class="string">'three'</span>: <span class="string">'JavaScript'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(language)</span><br><span class="line">&#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>, <span class="string">'three'</span>: <span class="string">'JavaScript'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> language[<span class="string">'three'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(language)</span><br><span class="line">&#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h1><ol><li><p>遍历所有<strong>键 — 值</strong>对<br> 可使用 <code>for</code> 循环遍历字典。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>language = &#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>, <span class="string">'three'</span>: <span class="string">'JavaScript'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(language)</span><br><span class="line">&#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>, <span class="string">'three'</span>: <span class="string">'JavaScript'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> key, value <span class="keyword">in</span> language.items():</span><br><span class="line">        print(key + <span class="string">": "</span> + value)</span><br><span class="line">one: Python</span><br><span class="line">two: Java</span><br><span class="line">three: JavaScript</span><br></pre></td></tr></table></figure><blockquote><p><code>items()</code> 方法返回一个键—值对列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; &gt;&gt;&gt; key_value = []</span><br><span class="line">&gt; &gt;&gt;&gt; <span class="keyword">for</span> d <span class="keyword">in</span> language:</span><br><span class="line">&gt;         key_value.append(d)</span><br><span class="line">&gt; &gt;&gt;&gt; print(key_value)</span><br><span class="line">&gt; [(<span class="string">'one'</span>, <span class="string">'Python'</span>), (<span class="string">'two'</span>, <span class="string">'Java'</span>), (<span class="string">'three'</span>, <span class="string">'JavaScript'</span>)]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>遍历字典中的键或值<br> 可使用 <code>key()</code> 方法遍历字典中的键。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>language = &#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>, <span class="string">'three'</span>: <span class="string">'JavaScript'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(language)</span><br><span class="line">&#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>, <span class="string">'three'</span>: <span class="string">'JavaScript'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> dict_key <span class="keyword">in</span> language.key():</span><br><span class="line">        print(dict_key)</span><br><span class="line">one</span><br><span class="line">two</span><br><span class="line">three</span><br></pre></td></tr></table></figure><blockquote><p><code>.key()</code> 可省略</p></blockquote><p> 可使用 <code>values()</code> 方法遍历字典中的值</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>language = &#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>, <span class="string">'three'</span>: <span class="string">'JavaScript'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(language)</span><br><span class="line">&#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>, <span class="string">'three'</span>: <span class="string">'JavaScript'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> dict_value <span class="keyword">in</span> language.values():</span><br><span class="line">        print(dict_value)</span><br><span class="line">Python</span><br><span class="line">Java</span><br><span class="line">JavaScript</span><br></pre></td></tr></table></figure></li><li><p>按顺序遍历遍历字典中的键或值<br> 要以特定的顺序返回元素，可在for循环中使用 <code>sorted()</code> 函数进行排序。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>language = &#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>, <span class="string">'three'</span>: <span class="string">'JavaScript'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(language)</span><br><span class="line">&#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>, <span class="string">'three'</span>: <span class="string">'JavaScript'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> dict_key <span class="keyword">in</span> sorted(language.key()):</span><br><span class="line">        print(dict_key)</span><br><span class="line">one</span><br><span class="line">three</span><br><span class="line">two</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> dict_value <span class="keyword">in</span> sorted(language.values()):</span><br><span class="line">        print(dict_value)</span><br><span class="line">Java</span><br><span class="line">JavaScript</span><br><span class="line">Python</span><br></pre></td></tr></table></figure></li><li><p>set（集合）<br> 集合类似于列表，但每个元素都必须是独一无二的。可用来去除重复项。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>language = &#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>, <span class="string">'three'</span>: <span class="string">'Python'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(language)</span><br><span class="line">&#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: <span class="string">'Java'</span>, <span class="string">'three'</span>: <span class="string">'Python'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> dict_value <span class="keyword">in</span> set(language.values()):</span><br><span class="line">        print(dict_value)</span><br><span class="line">Java</span><br><span class="line">Python</span><br></pre></td></tr></table></figure></li></ol><h1 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h1><p>将一系列字典存储在列表中，或将列表作为值存储在字典中，称为嵌套。</p><ol><li><p>列表中存储字典</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>language_1 = &#123;<span class="string">'name'</span>: <span class="string">'Ted'</span>, <span class="string">'favourite_language'</span>: <span class="string">'Python'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>language_2 = &#123;<span class="string">'name'</span>: <span class="string">'Tom'</span>, <span class="string">'favourite_language'</span>: <span class="string">'Java'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>language = [language_1, language_2]</span><br></pre></td></tr></table></figure></li><li><p>字典中存储列表</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>language = &#123;<span class="string">'one'</span>: <span class="string">'Python'</span>, <span class="string">'two'</span>: [<span class="string">'Java'</span>, <span class="string">'JavaScript'</span>]&#125;</span><br></pre></td></tr></table></figure></li><li><p>字典中存储字典</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>language = &#123;</span><br><span class="line">        language_1: &#123;<span class="string">'one'</span>: <span class="string">'Python'</span>&#125;,</span><br><span class="line">        language_2: &#123;<span class="string">'two'</span>: <span class="string">'Java'</span>&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> Python 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>初识View</title>
      <link href="/2017/04/08/%E5%88%9D%E8%AF%86View.html/"/>
      <url>/2017/04/08/%E5%88%9D%E8%AF%86View.html/</url>
      <content type="html"><![CDATA[<p>开始学习 Android，发现了 Google 官方的 <a href="http://www.studyjamscn.com/" target="_blank" rel="noopener">Study Jams</a> 活动，就参加了。<br><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识View/developers.png"></p><a id="more"></a><h1 id="Layout（布局）"><a href="#Layout（布局）" class="headerlink" title="Layout（布局）"></a>Layout（布局）</h1><p>应用的<strong>布局</strong>指屏幕上显示的设计或布置。<br>该<strong>用户界面</strong>由<strong>视图</strong>矩形区域构成。大视图可以包含小视图，并且始终有一个包含所有其他视图的最大视图。<br><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识View/layout.png"></p><h1 id="User-Interface（用户界面）"><a href="#User-Interface（用户界面）" class="headerlink" title="User Interface（用户界面）"></a>User Interface（用户界面）</h1><p>应用的<strong>用户界面</strong>是我们在 Android 设备屏幕上所看到的内容</p><h1 id="View（视图）"><a href="#View（视图）" class="headerlink" title="View（视图）"></a>View（视图）</h1><p><strong>视图</strong>是屏幕上可见的矩形区域。<br>常见视图有：<strong>TextView</strong>, <strong>ImageView</strong>, <strong>Button</strong>。</p><blockquote><p>提到 View 就不得不提到 <strong>XML</strong>。<br><strong>XML</strong> 代表“可扩展标记语言”，用于编写以层次结构或家族树形式组织的信息，是描述 Android 应用的屏幕布局的理想语言。<br>代码示例<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:text</span>=<span class="string">"Hello"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:src</span>=<span class="string">"@drawable/mountain"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>其中 wrap_content —— 围绕其内容压缩视图；match_parent ——扩展视图以占用父视图的全部宽度/高度。  </p></blockquote><ol><li><p><strong>TextView</strong>——显示文本<br>Xml 代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:background</span>=<span class="string">"@color/colorAccent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:text</span>=<span class="string">"这是一个 TextView"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:textSize</span>=<span class="string">"36sp"</span> /&gt;</span></span><br></pre></td></tr></table></figure><img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识View/TextView.png"><p>TextView 属性可查看开发者文档： <a href="https://developer.android.com/reference/android/widget/TextView.html" target="_blank" rel="noopener">TextView | Android Developers</a>  </p></li><li><p><strong>ImageView</strong>——显示图片<br>xml 代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:src</span>=<span class="string">"@drawable/sky"</span> /&gt;</span></span><br></pre></td></tr></table></figure> <img alt="图片说明" class="class1 class2" src="http://ot2o5t4xh.bkt.clouddn.com/static/images/初识View/ImageView.png"><p> <code>android:src=“@drawable/sky</code> 中 @drawable/sky 为图片地址。<br> ImageView 属性可查看开发者文档： <a href="https://developer.android.com/reference/android/widget/ImageView.html" target="_blank" rel="noopener">ImageView | Android Developers</a>  </p></li></ol>]]></content>
      
      <categories>
          
          <category> 移动开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 基础：元组和切片</title>
      <link href="/2017/04/02/Python-%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%85%83%E7%BB%84%E5%92%8C%E5%88%87%E7%89%87.html/"/>
      <url>/2017/04/02/Python-%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%85%83%E7%BB%84%E5%92%8C%E5%88%87%E7%89%87.html/</url>
      <content type="html"><![CDATA[<p>元组——另一种有序、不可变的列表。<br>切片——处理列表的部分元素。</p><a id="more"></a><blockquote><p><strong>全文采用 Python3 版本</strong></p></blockquote><h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><h2 id="定义元组"><a href="#定义元组" class="headerlink" title="定义元组"></a>定义元组</h2><p>元组使用<code>()</code>代替列表的<code>[]</code>来标识。</p><ol><li><p>定义元组后，可以像访问列表元素一样使用索引来访问其元素。</p></li><li><p>元组没有<code>append()</code>方法，也没有<code>insert()</code>和<code>pop()</code>方法。</p><h2 id="创建单元素元组"><a href="#创建单元素元组" class="headerlink" title="创建单元素元组"></a>创建单元素元组</h2></li><li><p>空元组直接用<code>()</code>表示</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = ()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(t)</span><br><span class="line">()</span><br></pre></td></tr></table></figure></li><li><p>单元素元组要多加一个<code>,</code>号</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(t)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p> <code>()</code>既可以表示元组，又可以作为括号表示运算时的优先级，所以 <code>(1)</code>被Python解释器计算出结果 <em>1</em>。<br> 正确方式：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(t)</span><br><span class="line">(<span class="number">1</span>,)</span><br></pre></td></tr></table></figure></li></ol><h2 id="“可变”的元组"><a href="#“可变”的元组" class="headerlink" title="“可变”的元组"></a>“可变”的元组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="string">'a'</span>, <span class="string">'b'</span>, [<span class="string">'A'</span>, <span class="string">'B'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = t[<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list[<span class="number">1</span>] = <span class="string">'C'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(t)</span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>, [<span class="string">'A'</span>, <span class="string">'C'</span>])</span><br></pre></td></tr></table></figure><p>在这里，<em>B</em> 变为了 <em>C</em>，但元组本身并没有变。因为元组不变是指<strong>指向不变</strong>，虽然 list 中的元素改变了，但元组中 <em>t[2]</em> 仍然指向了这个 <em>list</em> 。</p><h2 id="修改元组变量"><a href="#修改元组变量" class="headerlink" title="修改元组变量"></a>修改元组变量</h2><p>虽然元组是不可变的，但给元组变量赋值是合法的。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(t)</span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(t)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure></p><h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h1><h2 id="创建切片"><a href="#创建切片" class="headerlink" title="创建切片"></a>创建切片</h2><p>要创建切片，可指定要使用的第一个元素和最后一个元素的索引。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'four'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(numbers[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line">[<span class="string">'two'</span>, <span class="string">'three'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(numbers[:<span class="number">3</span>])</span><br><span class="line">[<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(numbers[<span class="number">1</span>:])</span><br><span class="line">[<span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'four'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(numbers[<span class="number">-2</span>:])</span><br><span class="line">[<span class="string">'three'</span>, <span class="string">'four'</span>]</span><br></pre></td></tr></table></figure></p><p><strong>把列表换成元组，切片操作完全相同，只是切片的结果也是元组。</strong></p>]]></content>
      
      <categories>
          
          <category> Python 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 基础：列表</title>
      <link href="/2017/03/25/Python-%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%88%97%E8%A1%A8.html/"/>
      <url>/2017/03/25/Python-%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%88%97%E8%A1%A8.html/</url>
      <content type="html"><![CDATA[<p>列表由一系列按特定顺序排列的元素组成。在Python中，用方括号<code>[]</code>来表示列表，并用逗号来分隔其中的元素。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法格式</span></span><br><span class="line">&lt;list&gt; = [&lt;Expression&gt;, &lt;Expression&gt;, ...]</span><br></pre></td></tr></table></figure></p><a id="more"></a><blockquote><p>全文采用 Python3 版本</p></blockquote><h1 id="修改、添加、删除元素及列表合并"><a href="#修改、添加、删除元素及列表合并" class="headerlink" title="修改、添加、删除元素及列表合并"></a>修改、添加、删除元素及列表合并</h1><ol><li><p>修改列表元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过修改元素值改变现有列表的值</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="string">'H'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p[<span class="number">0</span>] = <span class="string">'Y'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p)</span><br><span class="line">[<span class="string">'Y'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>别名使用:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="string">'H'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q = p <span class="comment"># p 和 q 都指向对象: ['H', 'e', 'l', 'l', 'o']</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p[<span class="number">0</span>] = <span class="string">'Y'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p)</span><br><span class="line">[<span class="string">'Y'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(q)</span><br><span class="line">[<span class="string">'Y'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br><span class="line"><span class="comment"># p[0] = 'Y' 使对象改变，则 q 也改变</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>列表中添加元素</p><ol><li><p><code>append()</code>方法在列表末尾添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.append(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>insert()</code>方法在列表中添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.insert(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p)</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure></li></ol></li><li><p>删除列表元素</p><ol><li><p>使用方法<code>pop()</code> 返回列表末尾删除的值，原列表会改变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q = p.pop()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(q)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p)</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure></li><li><p>使用<code>del</code>语句删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> p[<span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>remove()</code>方法根据值删除元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.remove(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p)</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><blockquote><p><code>remove()</code>只删除第一个指定的值。如果要删除的值可能在列表中出现多次，需要使用循环来判断是否删除了所有这样的值。</p></blockquote></li></ol></li><li><p>用<code>+</code>进行列表合并</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print([<span class="number">1</span>, <span class="number">2</span>] + [<span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure></li></ol><h1 id="排列列表"><a href="#排列列表" class="headerlink" title="排列列表"></a>排列列表</h1><ol><li><p><code>sort()</code>方法对列表永久性排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="string">'d'</span>, <span class="string">'a'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'d'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(n)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><p>直接调用<code>sort()</code>方法按字母顺序、数字由小到大排列。向<code>sort()</code>方法传递参数<code>reverse=True</code>可按相反顺序排列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="string">'d'</span>, <span class="string">'a'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.sort(reverse=<span class="keyword">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p)</span><br><span class="line">[<span class="string">'o'</span>, <span class="string">'l'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n.sort(reverse=<span class="keyword">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(n)</span><br><span class="line">[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>sorted()</code>函数对列表临时排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="string">'d'</span>, <span class="string">'a'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(sorted(p))</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'d'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p)</span><br><span class="line">[<span class="string">'d'</span>, <span class="string">'a'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br></pre></td></tr></table></figure><p>向<code>sort()</code>函数传递参数<code>reverse=True</code>可按相反顺序排列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="string">'d'</span>, <span class="string">'a'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(sorted(p,reverse=<span class="keyword">True</span>))</span><br><span class="line">[<span class="string">'o'</span>, <span class="string">'l'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>reverve()</code>方法反转列表元素的排列顺序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="string">'d'</span>, <span class="string">'a'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.reverse()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p)</span><br><span class="line">[<span class="string">'o'</span>, <span class="string">'l'</span>, <span class="string">'a'</span>, <span class="string">'d'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n.reverse()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(n)</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure></li><li><p>列表长度<br><code>len()</code>函数确定列表的长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(len(l))</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="遍历列表"><a href="#遍历列表" class="headerlink" title="遍历列表"></a>遍历列表</h1><ol><li><p>用<code>for</code>循环遍历列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="keyword">for</span> &lt;name&gt; <span class="keyword">in</span> &lt;list&gt;:</span><br><span class="line">    &lt;Block&gt;</span><br></pre></td></tr></table></figure><p>使用for循环时，对于用于存储列表中每个值的临时变量，可指定任何名称。然而，选择描述单个列表元素的有意义的名称则更容易理解。<br>例如，对于小猫列表、小狗列表和一般性列表，像下面这样编写for循环的第一行代码更合适：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> cat <span class="keyword">in</span> cats:</span><br><span class="line"><span class="keyword">for</span> dog <span class="keyword">in</span> dogs:</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> list_of_items:</span><br></pre></td></tr></table></figure></li><li><p>索引<code>index()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line">&lt;list&gt;.index(&lt;value&gt;) <span class="comment"># 返回 value 在 list 中的索引</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p.index(<span class="number">2</span>))</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pirnt(p.index(<span class="number">3</span>))</span><br><span class="line"><span class="number">3</span> <span class="keyword">in</span> <span class="keyword">not</span> <span class="keyword">in</span> list</span><br></pre></td></tr></table></figure></li><li><p><code>in</code>操作符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line">&lt;value&gt; <span class="keyword">in</span> &lt;list)&gt; <span class="comment"># list 中有 value 返回 True，否则返回 False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="number">0</span> <span class="keyword">in</span> p)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="number">3</span> <span class="keyword">in</span> p)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><p> <code>not in</code>操作符与<code>in</code>相反</p></li></ol><h1 id="创建数值列表"><a href="#创建数值列表" class="headerlink" title="创建数值列表"></a>创建数值列表</h1><ol><li><p><code>range()</code>函数使用<br><code>range()</code>函数可以生成一系列数字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">        print(num)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></li><li><p><code>list()</code>函数将<code>range()</code>结果转换成列表<br>将<code>range()</code>作为<code>list()</code>的输入参数，可输出一个数字列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(list(range(<span class="number">1</span>, <span class="number">4</span>)))</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></li><li><p>简单计算数字列表<br>有几个处理数字列表的函数：找出最大值、最小值和求和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>digits = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>min(digits)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>max(digits)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum(digits)</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure></li><li><p>列表解析<br>列表解析将for循环和创建新元素的代码合并成一行，并自动附加新元素，以此来生成列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>squares = [value**<span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(squares)</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> Python 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 基础：基本运算符</title>
      <link href="/2017/03/17/Python-%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6.html/"/>
      <url>/2017/03/17/Python-%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6.html/</url>
      <content type="html"><![CDATA[<p>运算符的功能是完成某件事，由如<code>+</code>，<code>-</code>，<code>**</code>这样的符号或者其他特定的关键字表示。<br><a id="more"></a></p><blockquote><p><strong>全文采用 Python3 版本</strong></p></blockquote><h1 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h1><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>加</td></tr><tr><td>-</td><td>减</td></tr><tr><td>*</td><td>乘</td></tr><tr><td>/</td><td>除</td></tr><tr><td>%</td><td>取余</td></tr><tr><td>**</td><td>幂</td></tr><tr><td>//</td><td>取整除，返回商的整除部分</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>+<span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span><span class="number">-1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>*<span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span>/<span class="number">3</span></span><br><span class="line"><span class="number">1.3333333333333333</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span>%<span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span>**<span class="number">3</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span>//<span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>Python2.x 版本中，整数除以整数仍然得到整数。要得到小数，需其中一个数改为浮点数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span>/<span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span>/<span class="number">3.0</span></span><br><span class="line"><span class="number">1.3333333333333333</span></span><br></pre></td></tr></table></figure></p></blockquote><h1 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h1><p>比较运算符返回布尔值。</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>==</td><td>等于</td></tr><tr><td>!=</td><td>不等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b = <span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == b</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a != b</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &gt; b</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &lt; b</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &gt;= b</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &lt;= b</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><blockquote><p>Python2.x 版本中还有一个不等于比较运算符：<code>&lt;&gt;</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b = <span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &lt;&gt;b </span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p></blockquote><h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><p>逻辑运算符返回布尔值。</p><table><thead><tr><th>运算符</th><th>逻辑表达式</th><th>描述</th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>与：如果 x 为 False，返回 False，否则返回 y 的计算值</td></tr><tr><td>or</td><td>x or y</td><td>或：如果 x 为 True，返回 True，否则返回 y 的计算值</td></tr><tr><td>not</td><td>not x</td><td>非：如果 x 为 False，返回 True</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b = <span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">and</span> b</span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">or</span> b</span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> a</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><h1 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h1><p>成员运算符返回布尔值。</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>in</td><td>如果在指定的序列中找到值返回 True，否则返回 False</td></tr><tr><td>not in</td><td>如果在指定的序列中没有找到值返回 True，否则返回 False</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">in</span> list</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">not</span> <span class="keyword">in</span> list</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><h1 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h1><p>身份运算符用于比较两个对象的存储单元，返回布尔值。</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>is</td><td>判断两个标识符是不是引用自一个对象，是返回 True</td></tr><tr><td>is not</td><td>判断两个标识符是不是引用自不同对象，是返回True</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> <span class="keyword">not</span> b</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 基础: 字符串</title>
      <link href="/2017/03/13/Python-%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%AD%97%E7%AC%A6%E4%B8%B2.html/"/>
      <url>/2017/03/13/Python-%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%AD%97%E7%AC%A6%E4%B8%B2.html/</url>
      <content type="html"><![CDATA[<p>字符串是 Python 中最常用的数据类型。可以使用引号(‘或”)来创建字符串。<br>Python 中字符串是不可变的，一旦声明，不能改变。<br><a id="more"></a></p><blockquote><p><strong>全文采用 Python3 版本</strong></p></blockquote><ol><li><p>使用<code>title()</code>、<code>upper()</code>、<code>lower()</code> 方法修改字符串的大小写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># title() 将字符串首字符变为大写</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'sTring'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.title())</span><br><span class="line">STring</span><br><span class="line"></span><br><span class="line"><span class="comment"># upper() 将字符串改为全部大写</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.upper())</span><br><span class="line">STRING</span><br><span class="line"></span><br><span class="line"><span class="comment"># lower() 将字符串改为全部小写</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.lower())</span><br><span class="line">string</span><br></pre></td></tr></table></figure></li><li><p>合并（拼接）字符串<br>Python 使用 <code>+</code> 符号合并字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Hello, '</span> + <span class="string">'Python!'</span>)</span><br><span class="line">Hello, Python!</span><br></pre></td></tr></table></figure></li><li><p>用制表符<code>\t</code>或换行符<code>\n</code>添加空白</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'\tPython'</span>)</span><br><span class="line">Python</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Languages:\nPython\nJava'</span>)</span><br><span class="line">Languages:</span><br><span class="line">Python</span><br><span class="line">Java</span><br></pre></td></tr></table></figure></li><li><p>用<code>strip()</code>、<code>lstrip()</code>、<code>rstrip()</code>删除空白<br>这种删除只是暂时的，原变量不变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">' python '</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除首尾两端的空白</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.strip()</span><br><span class="line"><span class="string">'python'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除开头的空白</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.lstrip()</span><br><span class="line"><span class="string">'python '</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除末尾的空白</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">' string'</span>.rstrip())</span><br><span class="line"><span class="string">' string'</span></span><br></pre></td></tr></table></figure></li><li><p>正确使用单引号和双引号<br>在用单引号括起的字符串中，如果包含撇号，就将导致错误。<br>正确地使用单引号和双引号: 撇号位于两个双引号之间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确使用单、双引号举例:</span></span><br><span class="line">message = <span class="string">"One of Python's strengths is its diverse community."</span></span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure></li><li><p>Python3 和 Python2 的 print 函数区别</p><blockquote><p>Python 2 的 print 声明被 Python3 的 print() 函数取代</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python2 print 是一个声明，可用 () 构建元组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'a'</span>, <span class="string">'b'</span>)</span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>)</span><br></pre></td></tr></table></figure></blockquote></li><li><p>字符串 * 整数n = n 个 字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'$'</span> * <span class="number">3</span>)</span><br><span class="line">$$$</span><br></pre></td></tr></table></figure></li><li><p>索引字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 索引起始为 0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="string">'Udacity'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name[<span class="number">0</span>])</span><br><span class="line">U</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name[<span class="number">-1</span>]) <span class="comment"># 复数表示从后往前的索引</span></span><br><span class="line">y</span><br></pre></td></tr></table></figure></li><li><p>有范围的索引字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">word = <span class="string">'assume'</span></span><br><span class="line">print(word[m:n]) <span class="comment"># 输出索引 m 到 n-1 的所有字符串</span></span><br><span class="line">print(word[m:]) <span class="comment"># 输出从索引 m 开始及之后的所有字符串</span></span><br><span class="line">print(word[:n]) <span class="comment"># 输出索引 0 到 n-1 的所有字符串</span></span><br><span class="line">print(word[:]) <span class="comment"># 输出完整字符串</span></span><br></pre></td></tr></table></figure></li><li><p>用<code>find()</code>在字符串中查找字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pythagoras = <span class="string">'When all else is lost the future still remains.'</span></span><br><span class="line">print(pythagoras.find(<span class="string">'future'</span>)) <span class="comment"># 输出: 27 (即 'f' 的索引)</span></span><br><span class="line">print(pythagoras.find(<span class="string">'You'</span>)) <span class="comment"># 输出: -1 (未查到该字符串)</span></span><br><span class="line"></span><br><span class="line">print(pythagoras.find(<span class="string">''</span>)) <span class="comment"># 输出: 0</span></span><br></pre></td></tr></table></figure></li><li><p>数字查找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从索引 n (含) 之后查找</span></span><br><span class="line"><span class="comment"># 语法格式</span></span><br><span class="line">&lt;string&gt;.find(&lt;string&gt;, n)</span><br></pre></td></tr></table></figure></li><li><p>多重赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法格式</span></span><br><span class="line"></span><br><span class="line">&lt;name1&gt;, &lt;name2&gt;, ... = &lt;expression1&gt;, &lt;expression2&gt;, ..</span><br><span class="line"></span><br><span class="line"><span class="comment"># a 赋值 3, b 赋值 4</span></span><br><span class="line">a, b = <span class="number">3</span>, <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意: t 与 s 交换值</span></span><br><span class="line">s, t = t, s <span class="comment"># 赋值符合右边的值已经先确定</span></span><br></pre></td></tr></table></figure></li><li><p><code>str()</code> 函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># str(&lt;number&gt;): 将整数转换为字符串</span></span><br><span class="line">s = str(<span class="number">8</span>) <span class="comment"># s 为字符串: '8'</span></span><br></pre></td></tr></table></figure></li><li><p>长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># len(&lt;string&gt;): 字符串的长度</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'string'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(len(s))</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p>相反排列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'string'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s[::<span class="number">-1</span>])</span><br><span class="line">gnirts</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> Python 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
